<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BioLab</name>
    </assembly>
    <members>
        <member name="T:BioLab.Optimization.AssignmentProblemSolver">
            <summary>
            An implementation of the Kuhn-Munkres assignment algorithm modified for rectangular matrices.
            </summary>
        </member>
        <member name="T:BioLab.Common.Algorithm">
            <summary>
            Abstract base class for an algorithm. 
            It implements the IAlgorithm interface, provides events that can be fired during processing and other base functionalities.
            </summary>
        </member>
        <member name="T:BioLab.Common.IAlgorithm">
            <summary>
            Exposes the events and methods of an algorithm.
            </summary>
        </member>
        <member name="M:BioLab.Common.IAlgorithm.Run">
            <summary>
            Executes the algorithm.
            </summary>
            <remarks>Some algorithms may throw an <see cref="T:BioLab.Common.AlgorithmAbortedException"/> if the processing is aborted by the user.</remarks>
        </member>
        <member name="E:BioLab.Common.IAlgorithm.ProgressChanged">
            <summary>
            This event is fired to notify a progress change during an algorithm.
            See <see cref="T:BioLab.Common.AlgorithmIntermediateResultEventArgs"/> for more details on
            how to provide progress data.
            </summary>
        </member>
        <member name="E:BioLab.Common.IAlgorithm.IntermediateResult">
            <summary>
            This event should be fired whenever an intermediate result is available.
            See <see cref="T:BioLab.Common.AlgorithmIntermediateResultEventArgs"/> for more details on
            how to provide intermediate results.
            </summary>
            <remarks>
            Optimized algorithms should not create intermediate results if no clients are registered for this event.
            </remarks>
        </member>
        <member name="M:BioLab.Common.Algorithm.GetInfoAttribute">
            <summary>
            This method can be used to quickly retrieve the <see cref="T:BioLab.Common.AlgorithmInfoAttribute"/> associated to the algorithm.
            </summary>
            <returns>A reference to the corresponding <see cref="T:BioLab.Common.AlgorithmInfoAttribute"/> instance, 
            or null if the attribute is not present.</returns>
        </member>
        <member name="M:BioLab.Common.Algorithm.Run">
            <summary>
            Executes the algorithm.
            </summary>
            <remarks>Some algorithms may throw an <see cref="T:BioLab.Common.AlgorithmAbortedException"/> if the processing is aborted by the user.</remarks>
        </member>
        <member name="M:BioLab.Common.Algorithm.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current algorithm.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current algorithm.
            </returns>
        </member>
        <member name="M:BioLab.Common.Algorithm.OnIntermediateResult(BioLab.Common.AlgorithmIntermediateResultEventArgs)">
            <summary>
            Raises the <see cref="E:IntermediateResult"/> event.
            </summary>
            <param name="e">The <see cref="T:BioLab.Common.AlgorithmIntermediateResultEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BioLab.Common.Algorithm.OnProgressChanged(BioLab.Common.AlgorithmProgressChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ProgressChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:BioLab.Common.AlgorithmIntermediateResultEventArgs"/> instance containing the event data.</param>
            <returns>false if the algorithm should be aborted.</returns>
        </member>
        <member name="M:BioLab.Common.Algorithm.IntermediateResultEventHasHandlers">
            <summary>
            This method can be used to know if the corresponding event has registered handlers.
            Optimized algorithms should avoid to create event parameters and fire events during their
            execution if no handlers have been registered.
            </summary>
            <returns>true if there is at least a registered handler for the IntermediateResult event.</returns>
        </member>
        <member name="M:BioLab.Common.Algorithm.ProgressChangedEventHasHandlers">
            <summary>
            This method can be used to know if the corresponding event has registered handlers.
            Optimized algorithms should avoid to create event parameters and fire events during their
            execution if no handlers have been registered.
            </summary>
            <returns>true if there is at least a registered handler for the ProgressChanged event.</returns>
        </member>
        <member name="E:BioLab.Common.Algorithm.IntermediateResult">
            <summary>
            This event should be fired whenever an intermediate result is available.
            See <see cref="T:BioLab.Common.AlgorithmIntermediateResultEventArgs"/> for more details on
            how to provide intermediate results.
            </summary>
            <remarks>
            Optimized algorithms should not create intermediate results if no clients are registered for this event.
            </remarks>
        </member>
        <member name="E:BioLab.Common.Algorithm.ProgressChanged">
            <summary>
            This event is fired to notify a progress change during algorithm execution.
            See <see cref="T:BioLab.Common.AlgorithmIntermediateResultEventArgs"/> for more details on
            how to provide progress data.
            </summary>
        </member>
        <member name="M:BioLab.Optimization.AssignmentProblemSolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Optimization.AssignmentProblemSolver"/> class.
            </summary>
        </member>
        <member name="M:BioLab.Optimization.AssignmentProblemSolver.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Optimization.AssignmentProblemSolver"/> class.
            </summary>
            <param name="costs">The cost matrix.</param>
        </member>
        <member name="M:BioLab.Optimization.AssignmentProblemSolver.Run">
            <summary>
            Solves the assignment problem and stores the result in the output properties.
            </summary>
        </member>
        <member name="P:BioLab.Optimization.AssignmentProblemSolver.SelectedRows">
            <summary>
            Gets the indices of the rows selected in the solution of the assignment problem.
            </summary>
            <value>The selected rows.</value>
        </member>
        <member name="P:BioLab.Optimization.AssignmentProblemSolver.SelectedColumns">
            <summary>
            Gets the indices of the columns selected in the solution of the assignment problem.
            </summary>
            <value>The selected columns.</value>
        </member>
        <member name="P:BioLab.Optimization.AssignmentProblemSolver.Costs">
            <summary>
            Gets or sets the cost matrix.
            </summary>
            <value>A reference to the costs matrix.</value>
        </member>
        <member name="T:BioLab.GUI.Forms.AlgorithmProgressForm">
            <summary>
            Executes an algorithm and displays a form that shows algorithm status and progress (if reported by the
            algorithm) and allows the user to abort the algorithm (note that not all the algorithms can be aborted).
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.AlgorithmProgressForm.Execute(BioLab.Common.IAlgorithm,System.String,System.Windows.Forms.Form)">
            <summary>
            Executes the specified algorithm and shows the progress form.
            </summary>
            <param name="algorithm">The algorithm to be executed.</param>
            <param name="title">The title of the progress form.</param>
            <param name="ownerForm">The top level window that will own the progress form.</param>
            <returns>true if the algorithm has not be aborted, false otherwise.</returns>
        </member>
        <member name="F:BioLab.GUI.Forms.AlgorithmProgressForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.AlgorithmProgressForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.Forms.AlgorithmProgressForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BioLab.Classification.DensityEstimation.IProbabilityDensity">
            <summary>
            This interface provides a probability density function.
            </summary>
        </member>
        <member name="M:BioLab.Classification.DensityEstimation.IProbabilityDensity.CalculateDensity(BioLab.Math.LinearAlgebra.Vector)">
            <summary>
            Calculates the probability density of an input vector.
            </summary>
            <param name="x">The input vector.</param>
            <returns>The value of the probability density in x.</returns>
        </member>
        <member name="M:BioLab.Classification.DensityEstimation.IProbabilityDensity.CalculateDensity(BioLab.Common.FeatureVector)">
            <summary>
            Calculates the probability density of an input vector.
            </summary>
            <param name="vector">The input vector.</param>
            <returns>
            The corresponding value of the probability density.
            </returns>
        </member>
        <member name="T:BioLab.Classification.DensityEstimation.DensityEstimator">
            <summary>
            Represents an algorithm able to estimate the class-conditional probability densities of
            a set of vector.
            </summary>
        </member>
        <member name="M:BioLab.Classification.DensityEstimation.DensityEstimator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.DensityEstimation.DensityEstimator"/> class.
            </summary>
        </member>
        <member name="M:BioLab.Classification.DensityEstimation.DensityEstimator.#ctor(BioLab.Common.FeatureVectorSet)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.DensityEstimation.DensityEstimator"/> class.
            </summary>
            <param name="trainingSet">The set of vectors whose class-conditional densities have to be estimated.</param>
        </member>
        <member name="M:BioLab.Classification.DensityEstimation.DensityEstimator.Estimate">
            <summary>
            Executes the algorithm and returns the value of the output property.
            </summary>
            <returns>The estimated class conditional densities.</returns>
        </member>
        <member name="P:BioLab.Classification.DensityEstimation.DensityEstimator.TrainingSet">
            <summary>
            Gets or sets the set of vectors whose class-conditional densities have to be estimated.
            If the vector set data are not labeled, the probability density of the whole set is estimated.
            </summary>
        </member>
        <member name="P:BioLab.Classification.DensityEstimation.DensityEstimator.ClassConditionalDensities">
            <summary>
            Gets or sets the estimated class conditional densities.
            </summary>
        </member>
        <member name="T:BioLab.Classification.DensityEstimation.NormalMLEstimator">
            <summary>
            Parametric maximum likelihood estimation, assuming normal distributions.
            </summary>
        </member>
        <member name="M:BioLab.Classification.DensityEstimation.NormalMLEstimator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.DensityEstimation.NormalMLEstimator"/> class.
            </summary>
        </member>
        <member name="M:BioLab.Classification.DensityEstimation.NormalMLEstimator.#ctor(BioLab.Common.FeatureVectorSet)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.DensityEstimation.NormalMLEstimator"/> class.
            </summary>
            <param name="trainingSet">The training set.</param>
        </member>
        <member name="M:BioLab.Classification.DensityEstimation.NormalMLEstimator.Run">
            <summary>
            Executes the estimation on the training set.
            </summary>
        </member>
        <member name="T:BioLab.Classification.DensityEstimation.ParzenKernelType">
            <summary>
            Specifies the type of kernel function to be used by a 
            <see cref="T:BioLab.Classification.DensityEstimation.ParzenEstimator"/>
            </summary>
        </member>
        <member name="F:BioLab.Classification.DensityEstimation.ParzenKernelType.Hypercube">
            <summary>
            Uniform kernel function
            </summary>
        </member>
        <member name="F:BioLab.Classification.DensityEstimation.ParzenKernelType.Gaussian">
            <summary>
            Gaussian kernel function
            </summary>
        </member>
        <member name="F:BioLab.Classification.DensityEstimation.ParzenKernelType.UserDefined">
            <summary>
            User-defined kernel function
            </summary>
        </member>
        <member name="T:BioLab.Classification.DensityEstimation.ParzenKernel">
            <summary>
            Represents the method that implements a user-defined Parzen kernel function.
            </summary>
        </member>
        <member name="T:BioLab.Classification.DensityEstimation.ParzenEstimator">
            <summary>
            Estimates the probability density functions of each class in a training set using
            the Parzen Window method.
            </summary>
        </member>
        <member name="M:BioLab.Classification.DensityEstimation.ParzenEstimator.#ctor(BioLab.Common.FeatureVectorSet,System.Double,BioLab.Classification.DensityEstimation.ParzenKernelType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.DensityEstimation.ParzenEstimator"/> class.
            </summary>
            <param name="trainingSet">The training set.</param>
            <param name="bandwidth">The smoothing parameter of the method.</param>
            <param name="kernelType">Type of the kernel function.</param>
            <param name="makeCopy">If True make a copy of the dataset (default true).</param>
        </member>
        <member name="M:BioLab.Classification.DensityEstimation.ParzenEstimator.Run">
            <summary>
            Executes the algorithm.
            </summary>
        </member>
        <member name="P:BioLab.Classification.DensityEstimation.ParzenEstimator.Bandwidth">
            <summary>
            Gets or sets the value of the smoothing parameter.
            </summary>
        </member>
        <member name="P:BioLab.Classification.DensityEstimation.ParzenEstimator.KernelType">
            <summary>
            Gets or sets the type of kernel function to be used.
            </summary>
        </member>
        <member name="P:BioLab.Classification.DensityEstimation.ParzenEstimator.UserKernel">
            <summary>
            Gets or sets the user-defined kernel function. This property is used only when 
            <see cref="P:BioLab.Classification.DensityEstimation.ParzenEstimator.KernelType"/> is <see cref="F:BioLab.Classification.DensityEstimation.ParzenKernelType.UserDefined"/>.
            </summary>
        </member>
        <member name="T:BioLab.Math.LinearAlgebra.SvdDecomposition">
            <summary>
            Singular Values Decomposition (SVD) -
            A = U*S*V' - 
            where U is an m-by-m unitary matrix over K, the matrix S is m-by-n diagonal matrix with 
            nonnegative numbers on the diagonal, and V' denotes the conjugate transpose of V, an n-by-n 
            unitary matrix over K.
            </summary>
            <example>
                Matrix toDecompose = new Matrix(...);
                SVDDecomposition svdDec = new SVDDecomposition(toDecompose);
                svdDec.Run();
                Vector singularValues = svdDec.S;
                Matrix U = svdDec.U;
                ...
            </example>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.SvdDecomposition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.LinearAlgebra.SvdDecomposition"/> class.
            </summary>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.SvdDecomposition.#ctor(BioLab.Math.LinearAlgebra.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.LinearAlgebra.SvdDecomposition"/> class.
            </summary>
            <param name="a">The matrix to be decomposed.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.SvdDecomposition.Run">
            <summary>Executes the SVDDecomposition.</summary>
             <returns>True if decomposition has success.</returns>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.SvdDecomposition.A">
            <summary>Gets or sets the input matrix.</summary>
            <value>The matrix to decompose.</value>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.SvdDecomposition.S">
            <summary>Gets the singular values.</summary>
            <returns>Returns the singular values as a Vector.</returns>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.SvdDecomposition.U">
            <summary>Returns the left singular vectors as a <see cref="T:BioLab.Math.LinearAlgebra.Matrix"/>.</summary>
            <returns>The left singular vectors.</returns>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.SvdDecomposition.CalculateVT">
            <summary>
            True if VT has to be computed.
            </summary>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.SvdDecomposition.VT">
            <summary>Returns the right singular vectors as a <see cref="T:BioLab.Math.LinearAlgebra.Matrix"/>.</summary>
            <returns>The right singular vectors.</returns>
            <remarks>This is the transpose of the V matrix.</remarks>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.SvdDecomposition.Threshold">
            <summary>
            Gets the singularity threshold.
            </summary>
            <value>The threshold.</value>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.SvdDecomposition.ConditionNumber">
            <summary>Condition number.</summary>
            <returns>Return the condition number. max(sv)/min(sv).</returns>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.SvdDecomposition.Norm2">
            <summary>Norm2</summary>
            <returns>The 2-norm of the Matrix</returns>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.SvdDecomposition.Rank">
            <summary>Rank of the Matrix.</summary>
            <returns>The number of non-negligible singular values.</returns>
        </member>
        <member name="T:BioLab.Math.LinearAlgebra.EigenDecomposition">
            <summary>
            Eigen Decomposition of a squared matrix A:
            AV = V*D
            A = V*D*V'
            
            A = squared matrix (if A not squared try with SVD Decomposition)
            V = eigenvectors matrix (in column)
            D = eigenvalues matrix (diagonal)
            </summary>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.EigenDecomposition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.LinearAlgebra.EigenDecomposition"/> class.
            </summary>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.EigenDecomposition.#ctor(BioLab.Math.LinearAlgebra.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.LinearAlgebra.EigenDecomposition"/> class.
            </summary>
            <param name="a">The matrix to be decomposed.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.EigenDecomposition.Run">
            <summary>Executes the EigenDecomposition.</summary>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.EigenDecomposition.tred2">
             <summary>
             Symmetric Householder reduction to tridiagonal form.
             This is derived from the Algol procedures tred2 by Bowdler, Martin, Reinsch, and Wilkinson, 
             Handbook for Auto. Comp., Vol.ii-Linear Algebra, and the corresponding Fortran subroutine in EISPACK.
            </summary>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.EigenDecomposition.A">
            <summary>Gets or sets the input matrix.</summary>
            <value>The matrix to decompose.</value>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.EigenDecomposition.RealEigenvalues">
            <summary>
            Gets the real eigenvalues.
            </summary>
            <returns>A Vector containing the real eigenvalues.</returns>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.EigenDecomposition.ImaginaryEigenvalues">
            <summary>
            Gets the complex eigenvalues.
            </summary>
            <returns>A Vector containing the complex eigenvalues.</returns>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.EigenDecomposition.Eigenvectors">
            <summary>
            Gets the eigenvector matrix.
            </summary>
            <value>The eigenvector matrix.</value>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.EigenDecomposition.DiagonalEigenvalues">
            <summary>
            Gets a diagonal matrix containing the eigenvalues.
            </summary>
        </member>
        <member name="T:BioLab.GUI.UserControls.DefaultAlgorithmParameterControl">
            <summary>
            Provides a default implementation of the interface <see cref="T:BioLab.GUI.Forms.IAlgorithmPreviewParameters"/> that
            uses a PropertyGrid to let the user edit the algorithm parameters.
            </summary>
        </member>
        <member name="T:BioLab.GUI.Forms.IAlgorithmPreviewParameters">
            <summary>
            Provides methods and events to edit the parameters of an algorithm.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.IAlgorithmPreviewParameters.ExchangeValues(BioLab.Common.IAlgorithm,System.Boolean)">
            <summary>
            Sets or gets the parameters values from or to the user interface.
            </summary>
            <param name="algorithm">The algorithm whose parameters are being edited.</param>
            <param name="toControl">if set to <c>true</c> the user interface is updated with the current algorithm
            parameters, otherwise the algorithm parameters are updated according to the user interface.</param>
        </member>
        <member name="E:BioLab.GUI.Forms.IAlgorithmPreviewParameters.ParametersChanged">
            <summary>
            Occurs when a parameter of the algorithm has changed.
            </summary>
        </member>
        <member name="M:BioLab.GUI.UserControls.DefaultAlgorithmParameterControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.UserControls.DefaultAlgorithmParameterControl"/> class.
            </summary>
        </member>
        <member name="M:BioLab.GUI.UserControls.DefaultAlgorithmParameterControl.ExchangeValues(BioLab.Common.IAlgorithm,System.Boolean)">
            <summary>
            Sets or gets the parameters values from or to the user interface.
            </summary>
            <param name="algorithm">The algorithm whose parameters are being edited.</param>
            <param name="toControl">if set to <c>true</c> the user interface is updated with the current algorithm
            parameters, otherwise the algorithm parameters are updated according to the user interface.</param>
        </member>
        <member name="M:BioLab.GUI.UserControls.DefaultAlgorithmParameterControl.OnParametersChanged">
            <summary>
            Raises the ParametersChanged event.
            </summary>
        </member>
        <member name="F:BioLab.GUI.UserControls.DefaultAlgorithmParameterControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.UserControls.DefaultAlgorithmParameterControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.UserControls.DefaultAlgorithmParameterControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:BioLab.GUI.UserControls.DefaultAlgorithmParameterControl.PropertyGrid">
            <summary>
            Allows to acces the PropertyGrid containing the parameter values.
            </summary>
        </member>
        <member name="E:BioLab.GUI.UserControls.DefaultAlgorithmParameterControl.ParametersChanged">
            <summary>
            Occurs when a parameter of the algorithm has changed.
            </summary>
        </member>
        <member name="F:BioLab.GUI.UserControls.ConvolutionParameterControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.UserControls.ConvolutionParameterControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.UserControls.ConvolutionParameterControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:BioLab.GUI.Forms.IntermediateResultsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.IntermediateResultsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.Forms.IntermediateResultsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BioLab.DataStructures.NamespaceDoc">
            <summary>
            Provides generic data structures used by various algorithms.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.ImageOperation`2">
            <summary>
            Represents an algorithm that executes an operation on an input image producing an output.
            </summary>
            <typeparam name="TInputImage">The type of the input image.</typeparam>
            <typeparam name="TOutput">The type of the output. Note that the output may be an image or any other object.</typeparam>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageOperation`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageOperation`2"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageOperation`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageOperation`2"/> class and
            allows to specify the input image.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageOperation`2.OnInputImageChanged">
            <summary>
            Called when the value of the InputImage property has changed.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageOperation`2.Execute">
            <summary>
            Executes the algorithm (by calling the Run() method) and returns the value of the Result property.
            </summary>
            <returns>The result of the image operation (corresponding to the Result property).</returns>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageOperation`2.InputImage">
            <summary>
            Gets or sets the input image of the current image operation.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageOperation`2.Result">
            <summary>
            Gets or sets the result of the current image operation. This property has usually a value only after
            a successful execution of the algorithm (Run() or Execute() methods).
            Inherited classes should set this property during the implementation of the Run() method.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.ImageOperation`3">
            <summary>
            Represents an algorithm that executes an operation on two input images and produces an output.
            </summary>
            <typeparam name="TInputImage1">The type of the first input image.</typeparam>
            <typeparam name="TInputImage2">The type of the second input image.</typeparam>
            <typeparam name="TOutput">The type of the output. Note that the output may be an image or any other object.</typeparam>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageOperation`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageOperation`3"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageOperation`3.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageOperation`3"/> class and
            allows to specify the two input images.
            </summary>
            <param name="inputImage1">The first input image.</param>
            <param name="inputImage2">The second input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageOperation`3.Execute">
            <summary>
            Executes the algorithm (by calling the Run() method) and returns the value of the Result property.
            </summary>
            <returns>The result of the image operation (corresponding to the Result property).</returns>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageOperation`3.InputImage1">
            <summary>
            Gets or sets the first input image of the current image operation.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageOperation`3.InputImage2">
            <summary>
            Gets or sets the second input image of the current image operation.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageOperation`3.Result">
            <summary>
            Gets or sets the result of the current image operation. This property has usually a value only after
            a successful execution of the algorithm (Run() or Execute() methods).
            Inherited classes should set this property during the implementation of the Run() method.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.ImageBinarization">
            <summary>
            This image operation performs a thresholding operation on a grayscale image. 
            The output is a binary image where black pixels correspond to background and white pixels 
            correspond to foreground (or vice versa). The segmentation is determined by a single parameter 
            (the intensity threshold). In a single pass, each pixel in the image is compared with 
            this threshold. If the pixel's intensity is higher than the threshold, the pixel is set 
            to white in the output; if it is less than the threshold, it is set to black.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBinarization.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageBinarization"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBinarization.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageBinarization"/> class and allows to specify both
            the input image and the threshold.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="threshold">The threshold.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBinarization.#ctor(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageBinarization"/> class and allows to specify
            the input image.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBinarization.Run">
            <summary>
            Binarizes the input image.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageBinarization.Threshold">
            <summary>
            Gets or sets the binarization threshold.
            </summary>
            <value>The threshold on the intensity values.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.BrightnessAdjustment">
             <summary>
             This image operation increases or decreases the brightness of a grayscale image.
             </summary>
            <example>
            The following code example performs the following action:
            <list type="bullet">
            <item>
            <description>Increase the lightness of the input image by 20%</description>
            </item>
            </list>
            <code>
            using System;
            using BioLab.ImageProcessing;
            
            namespace Examples
            {
                class Program
                {
                    static void Main()
                    {
                        Image&lt;byte&gt; image = ImageBase.LoadFromFile(@"C:\images\sampleImage.png").ToByteImage();
                        BrightnessAdjustment operation = new BrightnessAdjustment(image, 20);
                        Image&lt;byte&gt; result = operation.Execute();
                        result.SaveToFile(@"C:\images\result.png");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:BioLab.ImageProcessing.BrightnessAdjustment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.BrightnessAdjustment"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.BrightnessAdjustment.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.BrightnessAdjustment"/> class and allows
            both the input image and the percentage variation to be specified.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="brightnessVariation">The brightness variation [-100,100].</param>
        </member>
        <member name="M:BioLab.ImageProcessing.BrightnessAdjustment.#ctor(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.BrightnessAdjustment"/> class and allows
            the input image to be specified.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.BrightnessAdjustment.Run">
            <summary>
            Executes the image operation.
            </summary>
            <remarks>Some algorithms may throw an <see cref="T:BioLab.Common.AlgorithmAbortedException"/> if the processing is aborted by the user.</remarks>
        </member>
        <member name="P:BioLab.ImageProcessing.BrightnessAdjustment.BrightnessVariation">
            <summary>
            Gets or sets the percentage value of the brightness variation. A positive value increases the image
            brighteness; a negative value decreases the image brighteness.
            </summary>
            <value>The brightness variation [-100,+100]</value>
        </member>
        <member name="T:BioLab.ImageProcessing.HistogramAdjustment">
            <summary>
            This image operation performs simple image enhancement operations based on the image histogram:
            contrast stretching and histogram equalization.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.HistogramAdjustment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.HistogramAdjustment"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.HistogramAdjustment.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.HistogramAdjustment"/> class and allows
            to specify the various parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="stretch">if set to <c>true</c> the image contrast is stretched.</param>
            <param name="equalize">if set to <c>true</c> the image histogram is equalized.</param>
            <param name="stretchDiscard">The percentage of high- and low-intensity pixels to be 
            discarded during the constrast stretching.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.HistogramAdjustment.Run">
            <summary>
            Executes this image operation.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.HistogramAdjustment.Stretch">
            <summary>
            Gets or sets a value indicating whether a contrast stretching operation will be performed.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.HistogramAdjustment.Equalize">
            <summary>
            Gets or sets a value indicating whether the image histogram will be equalized.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.HistogramAdjustment.StretchDiscardPercentage">
            <summary>
            Gets or sets the percentage of high- and low-intensity pixels to be 
            discarded during the constrast stretching. This parameter is useful to reduce the effects of outliers.
            </summary>
            <value>The percentage value [0,100].</value>
        </member>
        <member name="T:BioLab.ImageProcessing.ImageArithmeticOperation">
            <summary>
            Specifies an arithmetic or logical operation between the values of two corresponding pixels of two images.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.ImageArithmeticOperation.Add">
            <summary>
            The sum of the two values, clipped to the proper range.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.ImageArithmeticOperation.Subtract">
            <summary>
            The second value is subtracted from the first one and the result is clipped to the proper range.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.ImageArithmeticOperation.Difference">
            <summary>
            The absolute value of the difference between the two values, clipped to the proper range.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.ImageArithmeticOperation.Average">
            <summary>
            The average of the two values.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.ImageArithmeticOperation.Darkest">
            <summary>
            The lowest of the two values.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.ImageArithmeticOperation.Lightest">
            <summary>
            The highest of the two values.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.ImageArithmeticOperation.And">
            <summary>
            The bitwise AND between the two values.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.ImageArithmeticOperation.Or">
            <summary>
            The bitwise OR between the two values.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.ImageArithmeticOperation.Xor">
            <summary>
            The bitwise XOR between the two values.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.ImageArithmetic">
            <summary>
            This operation applies one of the standard arithmetic or logical operations 
            to two images. The operator is applied in a pixel-by-pixel fashion, which means that the value of a 
            pixel in the output image depends only on the values of the corresponding pixels in the input images. 
            The images have to be of the same size.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageArithmetic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageArithmetic"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageArithmetic.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.ImageArithmeticOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageArithmetic"/> class.
            </summary>
            <param name="image1">The first input image.</param>
            <param name="image2">The second input image.</param>
            <param name="operation">The arithmetic or logical operation to be performed.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageArithmetic.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageArithmetic"/> class.
            </summary>
            <param name="image1">The first input image.</param>
            <param name="image2">The second input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageArithmetic.Run">
            <summary>
            Executes the image operation.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageArithmetic.Operation">
            <summary>
            Gets or sets the operation to be performed.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.NegativeImage">
            <summary>
            This image operation creates the negative of the input grayscale image.
            The operation has no parameters.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.NegativeImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.NegativeImage"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.NegativeImage.#ctor(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.NegativeImage"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.NegativeImage.Run">
            <summary>
            Executes the image operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.NegativeRgbImage">
            <summary>
            This image operation creates the negative of the input RGB image.
            The operation has no parameters.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.NegativeRgbImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.NegativeRgbImage"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.NegativeRgbImage.#ctor(BioLab.ImageProcessing.RgbImage{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.NegativeRgbImage"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.NegativeRgbImage.Run">
            <summary>
            Executes the image operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.ImageBorderFilling`1">
            <summary>
            This image operation allows all the pixel in the border of an input image to be replaced
            with a constant value.
            </summary>
            <typeparam name="T">The type of the pixels in the input image.</typeparam>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBorderFilling`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageBorderFilling`1"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBorderFilling`1.#ctor(BioLab.ImageProcessing.Image{`0},System.Int32,`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageBorderFilling`1"/> class and allows
            the parameters to be specified.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="borderSize">The border size, in pixel.</param>
            <param name="borderValue">The constant value for the border pixels.</param>
            <param name="sameImage">if set to <c>true</c> the input image is directly modified, otherwise
            a new image is created.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBorderFilling`1.#ctor(BioLab.ImageProcessing.Image{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageBorderFilling`1"/> class and 
            allows the input image to be specified.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBorderFilling`1.Run">
            <summary>
            Executes the image operation.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageBorderFilling`1.BorderSize">
            <summary>
            Gets or sets the size of the border, in pixels.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageBorderFilling`1.BorderValue">
            <summary>
            Gets or sets the constant value which the border pixels will be set to.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageBorderFilling`1.SameImage">
            <summary>
            Gets or sets a value indicating whether the input image will be directly modified or a new image is created.
            </summary>
            <value><c>true</c> if the input image is directly modified; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.MedianFiltering">
             <summary>
             This image operation applies a median filter to an input image.
             A median filter works by setting, in turn, the value of each pixel in an image 
             (except for the pixels on the border) to the median of the values of the pixels in 
             a window surrounding the pixel. Median filters can be used to remove scattered noise 
             from images and smooth them, while preserving the edges of objects in the image.
             </summary>
            <example>
            The following code example performs the following actions:
            <list type="bullet">
            <item>
            <description>Reads a gray image from file.</description>
            </item>
            <item>
            <description>Creates a new istance of the MedianFilering class for the input image with size of window of 3</description>
            </item>
            <item>
            <description>Executes the median filtering operations.</description>
            </item>
            <item>
            <description>Saves the output image in a new file.</description>
            </item>
            </list>
            <code>
            using System;
            using BioLab.ImageProcessing;
            
            namespace Examples
            {
                class Program
                {
                    static void Main()
                    {
                        Image&lt;byte&gt; inputImage = ImageUtilities.ToByteImage(ImageBase.LoadFromFile(@"C:\images\original.jpg"));
                        MedianFiltering filter = new MedianFiltering(inputImage, 3);
                        Image&lt;byte&gt; outputImage = filter.Execute();
                        outputImage.SaveToFile(@"C:\images\result.jpg");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:BioLab.ImageProcessing.MedianFiltering.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.MedianFiltering"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.MedianFiltering.#ctor(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.MedianFiltering"/> class and allows to specify
            the input image.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.MedianFiltering.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.MedianFiltering"/> class and allows to 
            specify the input image and the window size.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="windowSize">Size of the window.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.MedianFiltering.Run">
            <summary>
            Executes the median filtering.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.MedianFiltering.WindowSize">
            <summary>
            Gets or sets the size of the window, in pixels.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.GaussianBlur">
            <summary>
            This image operation applies a Gaussian blur filter to an input image.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.GaussianBlur.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.GaussianBlur"/> class and allows
            to specify the parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="sigma">The sigma parameter of the Gaussian filter.</param>
            <param name="filterSize">The size of the filter mask, in pixels.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.GaussianBlur.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.GaussianBlur"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.GaussianBlur.Run">
            <summary>
            Executes the algorithm.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.GaussianBlur.Sigma">
            <summary>
            Gets or sets the value of the sigma parameter of the Gaussian flter.
            </summary>
            <value>The sigma parameter of the Gaussian filter.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.GaussianBlur.FilterSize">
            <summary>
            Gets or sets the size of the filter mask, in pixels.
            </summary>
            <value>The size of the filter mask.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.GaussianBlurDouble">
            <summary>
            This image operation applies a Gaussian blur filter to a double image.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.GaussianBlurDouble.#ctor(BioLab.ImageProcessing.Image{System.Double},System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.GaussianBlurDouble"/> class and allows
            to specify the parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="sigma">The sigma parameter of the Gaussian filter.</param>
            <param name="filterSize">The size of the filter mask, in pixels.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.GaussianBlurDouble.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.GaussianBlurDouble"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.GaussianBlurDouble.Run">
            <summary>
            Executes the algorithm.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.GaussianBlurDouble.Sigma">
            <summary>
            Gets or sets the value of the sigma parameter of the Gaussian flter.
            </summary>
            <value>The sigma parameter of the Gaussian filter.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.GaussianBlurDouble.FilterSize">
            <summary>
            Gets or sets the size of the filter mask, in pixels.
            </summary>
            <value>The size of the filter mask.</value>
        </member>
        <member name="T:BioLab.Common.ElapsedTime">
            <summary>
            Provides a simple way to measure the time taken by an operation.
            </summary>
        </member>
        <member name="M:BioLab.Common.ElapsedTime.Start">
            <summary>
            Starts measuring the elapsed time.
            </summary>
        </member>
        <member name="M:BioLab.Common.ElapsedTime.Stop">
            <summary>
            Stops measuring the elapsed time.
            </summary>
        </member>
        <member name="M:BioLab.Common.ElapsedTime.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the elapsed time.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the elapsed time.
            </returns>
        </member>
        <member name="P:BioLab.Common.ElapsedTime.Elapsed">
            <summary>
            Gets the elapsed time.
            </summary>
        </member>
        <member name="T:BioLab.Common.MeasureConverter">
            <summary>
            Provides static methods for converting between different measurement units.
            </summary>
        </member>
        <member name="M:BioLab.Common.MeasureConverter.ConvertCentimetersToInches(System.Double)">
            <summary>
            Converts centimeters to inches.
            </summary>
            <param name="centimeters">The input measure in centimeters.</param>
            <returns>The measure converted to inches.</returns>
        </member>
        <member name="M:BioLab.Common.MeasureConverter.ConvertCentimetersToPixels(System.Double,System.Int32)">
            <summary>
            Converts centimeters to pixels.
            </summary>
            <param name="centimeters">The input measure in centimeters.</param>
            <param name="dotsPerInch">The number of pixels per inch (dpi).</param>
            <returns>The measure converted to pixels.</returns>
        </member>
        <member name="M:BioLab.Common.MeasureConverter.ConvertDegreesToRadians(System.Double)">
            <summary>
            Converts an angle from degrees to radians.
            </summary>
            <param name="angle">The angle expressed in degrees.</param>
            <returns>The angle expressed in radians.</returns>
        </member>
        <member name="M:BioLab.Common.MeasureConverter.ConvertDpcToDpi(System.Int32)">
            <summary>
            Converts dots per centimeter (dpc) into dots per inch (dpi).
            </summary>
            <param name="dotsPerCentimeters">The input value expressed in dots per centimeters (dpc).</param>
            <returns>The corresponding value in dots per inch (dpi).</returns>
        </member>
        <member name="M:BioLab.Common.MeasureConverter.ConvertDpiToDpc(System.Int32)">
            <summary>
            Converts dots per inch (dpi) into dots per centimeter (dpc).
            </summary>
            <param name="dotsPerInch">The input value expressed in dots per inch (dpi).</param>
            <returns>The corresponding value in dots per centimeter (dpc).</returns>
        </member>
        <member name="M:BioLab.Common.MeasureConverter.ConvertInchesToCentimeters(System.Double)">
            <summary>
            Converts inches to centimeters.
            </summary>
            <param name="inches">The input measure in inches.</param>
            <returns>The measure converted into centimeters.</returns>
        </member>
        <member name="M:BioLab.Common.MeasureConverter.ConvertInchesToPixels(System.Double,System.Int32)">
            <summary>
            Converts inches to pixels.
            </summary>
            <param name="inches">The input measure in inches.</param>
            <param name="dotsPerInch">The number of pixels per inch (dpi).</param>
            <returns>The measure converted to pixels.</returns>
        </member>
        <member name="M:BioLab.Common.MeasureConverter.ConvertPixelsToCentimeters(System.Double,System.Int32)">
            <summary>
            Converts pixels to centimeters.
            </summary>
            <param name="pixels">The input measure in pixels.</param>
            <param name="dotsPerInch">The number of pixels per inch (dpi).</param>
            <returns>The measure converted into centimeters.</returns>
        </member>
        <member name="M:BioLab.Common.MeasureConverter.ConvertPixelsToInches(System.Double,System.Int32)">
            <summary>
            Converts pixels to inches.
            </summary>
            <param name="pixels">The input measure in pixels.</param>
            <param name="dotsPerInch">The number of pixels per inch (dpi).</param>
            <returns>The measure converted into inches.</returns>
        </member>
        <member name="M:BioLab.Common.MeasureConverter.ConvertRadiansToDegrees(System.Double)">
            <summary>
            Converts an angle from radians to degrees.
            </summary>
            <param name="angle">The angle expressed in radians.</param>
            <returns>The angle expressed in degrees.</returns>
        </member>
        <member name="T:BioLab.GUI.NamespaceDoc">
            <summary>
            Provides various user interface classes.
            </summary>
        </member>
        <member name="T:BioLab.GUI.Forms.AlgorithmPreviewForm">
            <summary>
            Shows a dialog window that let the user execute a given algorithm, adjust its parameters and
            display the results.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.AlgorithmPreviewForm.#ctor(BioLab.Common.IAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.Forms.AlgorithmPreviewForm"/> class and allows to specify
            the algorithm.
            </summary>
            <param name="algorithm">The algorithm.</param>
        </member>
        <member name="M:BioLab.GUI.Forms.AlgorithmPreviewForm.#ctor(System.Type,BioLab.GUI.Forms.IAlgorithmPreviewFormDataProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.Forms.AlgorithmPreviewForm"/> class and allows to specify
            the type of the algorithm to be executed and a provider for the algorithm input(s).
            </summary>
            <param name="algorithmType">Type of the algorithm to be executed by the form.</param>
            <param name="dataProvider">The data provider, which allows a collection of possible inputs to be
            obtained for each input property of the algorithm.</param>
        </member>
        <member name="F:BioLab.GUI.Forms.AlgorithmPreviewForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.AlgorithmPreviewForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.Forms.AlgorithmPreviewForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:BioLab.GUI.Forms.AlgorithmPreviewForm.Algorithm">
            <summary>
            Gets the algorithm to be executed.
            </summary>
        </member>
        <member name="T:BioLab.GUI.Forms.IAlgorithmPreviewOutput">
            <summary>
            Provides a method to update the algorithm output in the <see cref="T:BioLab.GUI.Forms.AlgorithmPreviewForm"/>.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.IAlgorithmPreviewOutput.UpdateOutputViewer(BioLab.Common.IAlgorithm)">
            <summary>
            Updates the ouput according to the given algorithm instance.
            </summary>
            <param name="algorithm">The algorithm to be used to update the output.</param>
        </member>
        <member name="T:BioLab.GUI.Forms.AlgorithmPreviewFormDataItem">
            <summary>
            Represents a possible input data to one of the input properties of an algorithm in an <see cref="T:BioLab.GUI.Forms.AlgorithmPreviewForm"/>.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.AlgorithmPreviewFormDataItem.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.Forms.AlgorithmPreviewFormDataItem"/> class.
            </summary>
            <param name="data">The input data.</param>
            <param name="name">The name to be displayed for the data.</param>
        </member>
        <member name="M:BioLab.GUI.Forms.AlgorithmPreviewFormDataItem.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current instance.
            </returns>
        </member>
        <member name="P:BioLab.GUI.Forms.AlgorithmPreviewFormDataItem.Data">
            <summary>
            Gets or sets the data this instance contains.
            </summary>
        </member>
        <member name="P:BioLab.GUI.Forms.AlgorithmPreviewFormDataItem.Name">
            <summary>
            Gets or sets the name of the data.
            </summary>
        </member>
        <member name="T:BioLab.GUI.Forms.IAlgorithmPreviewFormDataProvider">
            <summary>
            Allows to get a collection of possible input data for an algorithm in an <see cref="T:BioLab.GUI.Forms.AlgorithmPreviewForm"/>.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.IAlgorithmPreviewFormDataProvider.GetAvailableData(System.Type)">
            <summary>
            Gets the available data for a given type.
            </summary>
            <param name="dataType">Type of the input data.</param>
            <returns>A collection of data of the required type.</returns>
        </member>
        <member name="T:BioLab.GUI.Forms.CustomAlgorithmPreviewOutputAttribute">
            <summary>
            This attribute can be applied to a class derived from <see cref="T:BioLab.Common.Algorithm"/> to
            specify a customized output viewer for the <see cref="T:BioLab.GUI.Forms.AlgorithmPreviewForm"/>.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.CustomAlgorithmPreviewOutputAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.Forms.CustomAlgorithmPreviewOutputAttribute"/> class.
            </summary>
            <param name="userControlType">Type of the user control.</param>
        </member>
        <member name="P:BioLab.GUI.Forms.CustomAlgorithmPreviewOutputAttribute.UserControlType">
            <summary>
            Gets or sets the type of the user control. The user control must be derived from
            <see cref="T:System.Windows.Forms.UserControl"/> and must implement <see cref="T:BioLab.GUI.Forms.IAlgorithmPreviewOutput"/>.
            </summary>
            <value>The type of the user control.</value>
        </member>
        <member name="T:BioLab.GUI.Forms.CustomAlgorithmPreviewParameterControlAttribute">
            <summary>
            This attribute can be applied to a class derived from <see cref="T:BioLab.Common.Algorithm"/> to
            specify a customized parameter editor for the <see cref="T:BioLab.GUI.Forms.AlgorithmPreviewForm"/>.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.CustomAlgorithmPreviewParameterControlAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.Forms.CustomAlgorithmPreviewParameterControlAttribute"/> class.
            </summary>
            <param name="userControlType">Type of the user control.</param>
        </member>
        <member name="P:BioLab.GUI.Forms.CustomAlgorithmPreviewParameterControlAttribute.UserControlType">
            <summary>
            Gets or sets the type of the user control. The user control must be derived from
            <see cref="T:System.Windows.Forms.UserControl"/> and must implement <see cref="T:BioLab.GUI.Forms.IAlgorithmPreviewParameters"/>.
            </summary>
            <value>The type of the user control.</value>
        </member>
        <member name="T:BioLab.GUI.DataViewers.ImageViewer">
            <summary>
            Represents an image viewer: a control able to display and edit an image.
            </summary>
        </member>
        <member name="T:BioLab.GUI.DataViewers.ZoomableDataViewer">
            <summary>
            Default implementation of the IZoomableViwer interface
            </summary>
        </member>
        <member name="T:BioLab.GUI.DataViewers.DataViewer">
            <summary>
            Generic viewer.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DataViewer.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.DataViewers.DataViewer"/> class that shows the given Data.
            </summary>
            <param name="data">The data to be shown in the viewer.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DataViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.DataViewers.DataViewer"/> class.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DataViewer.CreateBitmap(System.Int32,System.Int32)">
            <summary>
            Creates a bitmap with the current viewer content
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DataViewer.CreateBitmap">
            <summary>
            Creates a bitmap with the current viewer content with the same pixel size
            </summary>
            <returns></returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DataViewer.UpdateViewer">
            <summary>
            This medhod should be called each time the <see cref="P:BioLab.GUI.DataViewers.DataViewer.Data"/> content changes and the
            user interface needs to be updated accordingly.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DataViewer.UpdateDefaultContextMenuItems">
            <summary>
            This method updates the default context menu before it is displayed.
            </summary>
        </member>
        <member name="F:BioLab.GUI.DataViewers.DataViewer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DataViewer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DataViewer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.DataViewer.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the background color 
            of the data viewer.</value>
        </member>
        <member name="P:BioLab.GUI.DataViewers.DataViewer.DefaultContextMenu">
            <summary>
            This properties lets derived classes access the default context menu.
            </summary>
            <value>The default context menu.</value>
        </member>
        <member name="P:BioLab.GUI.DataViewers.DataViewer.Data">
            <summary>
            Gets ot sets the Data to be shown in the viewer. When a new data is set, UpdateViewer() is automatically called.
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.DataViewer.UseDefaultContextMenu">
            <summary>
            Gets or sets a value indicating whether the default context menu should be used.
            </summary>
            <value>
            	<c>true</c> if the default context menu is used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BioLab.GUI.DataViewers.DataViewer.EnablePasteInDefaultContextMenu">
            <summary>
            Gets or sets a value indicating whether the &quot;Paste&quot; command is enabled in the default
            context menu.
            </summary>
            <value>
            	<c>true</c> if the &quot;Paste&quot; command is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BioLab.GUI.DataViewers.DataViewer.EnableEditModeInDefaultContextMenu">
            <summary>
            Gets or sets a value indicating whether the &quot;Edit mode&quot; command is enabled
            in the default context menu.
            </summary>
            <value>
            	<c>true</c> if the &quot;Edit mode&quot; command is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:BioLab.GUI.DataViewers.IZoomable">
            <summary>
            Exposes properties, methods and events to manage a DataViewer that supports zooming.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.IZoomable.ZoomIn">
            <summary>
            Increases the zoom factor.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.IZoomable.ZoomOut">
            <summary>
            Decreases the zoom factor.
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.IZoomable.ZoomLevel">
            <summary>
            Zoom factor (1 = 100%, 0.5 = 50%, 2 = 200%, ...)
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.IZoomable.MinZoomLevel">
            <summary>
            Minimum allowed zoom factor
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.IZoomable.MaxZoomLevel">
            <summary>
            Maximu allowed zoom factor
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.IZoomable.FitToScreenSize">
            <summary>
            When enabled, the viewer will always automatically set the zoom level so that the entire data is displayed in the view
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.IZoomable.MouseWheelZoom">
            <summary>
            When enabled, the viewer will change the zoom level when the user moves the mouse wheel
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.IZoomable.LeftMouseButtonTool">
            <summary>
            Gets or sets the behaviour of the control when the left mouse button is pressed.
            </summary>
            <value>The tool associated to the left mouse button.</value>
        </member>
        <member name="E:BioLab.GUI.DataViewers.IZoomable.ZoomRectangleSelected">
            <summary>
            Occurs when the user selects a rectangle with the mouse. Registered delegates can cancel the default behaviour (zoom to the rectangle)
            </summary>
        </member>
        <member name="E:BioLab.GUI.DataViewers.IZoomable.ZoomLevelChanged">
            <summary>
            Occurs when the value of the ZoomLevel property changes. 
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.DataViewers.ZoomableDataViewer"/> class.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.#ctor(BioLab.Common.Data)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.DataViewers.ZoomableDataViewer"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="F:BioLab.GUI.DataViewers.ZoomableDataViewer.worldRectangleDeviceUnits">
            <summary>
            The WorldRectangle in device units
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.DeviceToWorld(System.Drawing.PointF)">
            <summary>
            Converts from device to world units.
            </summary>
            <param name="point">The point to be converted.</param>
            <returns>The point in world units.</returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.DeviceToWorld(System.Drawing.Point)">
            <summary>
            Converts from device to world units.
            </summary>
            <param name="point">The point to be converted.</param>
            <returns>The point in world units.</returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.DeviceToWorld(System.Drawing.SizeF)">
            <summary>
            Converts from device to world units.
            </summary>
            <param name="size">The size to be converted.</param>
            <returns>The size in world units.</returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.DeviceToWorld(System.Drawing.Size)">
            <summary>
            Converts from device to world units.
            </summary>
            <param name="size">The size to be converted.</param>
            <returns>The size in world units.</returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.DeviceToWorld(System.Drawing.Rectangle)">
            <summary>
            Converts from device to world units.
            </summary>
            <param name="rectangle">The rectangle to be converted.</param>
            <returns>The rectangle in world units.</returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.DeviceToWorld(System.Drawing.RectangleF)">
            <summary>
            Converts from device to world units.
            </summary>
            <param name="rectangle">The rectangle to be converted.</param>
            <returns>The rectangle in world units.</returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.WorldToDevice(System.Drawing.PointF)">
            <summary>
            Converts from world to device units.
            </summary>
            <param name="point">The point to be converted.</param>
            <returns>The point in device units.</returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.WorldToDevice(System.Drawing.Point)">
            <summary>
            Converts from world to device units.
            </summary>
            <param name="point">The point to be converted.</param>
            <returns>The point in device units.</returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.WorldToDevice(System.Drawing.SizeF)">
            <summary>
            Converts from world to device units.
            </summary>
            <param name="size">The size to be converted.</param>
            <returns>The size in device units.</returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.WorldToDevice(System.Drawing.Size)">
            <summary>
            Converts from world to device units.
            </summary>
            <param name="size">The size to be converted.</param>
            <returns>The size in device units.</returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.WorldToDevice(System.Drawing.Rectangle)">
            <summary>
            Converts from world to device units.
            </summary>
            <param name="rectangle">The rectangle to be converted.</param>
            <returns>The rectangle in device units.</returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.WorldToDevice(System.Drawing.RectangleF)">
            <summary>
            Converts from world to device units.
            </summary>
            <param name="rectangle">The rectangle to be converted.</param>
            <returns>The rectangle in device units.</returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.ScrollToCenterWorldPoint(System.Drawing.PointF)">
            <summary>
            Scrolls the view so that the point (in world units) is as much centered as possible
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.ScrollWorldPointToDevicePoint(System.Drawing.PointF,System.Drawing.Point)">
            <summary>
            Scrolls the view so that "point" (in world units) is as much close as possible to "clientTargetPoint".
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.AdjustGraphicsToWorldUnits(System.Drawing.Graphics)">
            <summary>
            Setup the graphics to draw directly in World units
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.DrawImageWorldUnits(System.Drawing.Graphics,System.Single,System.Single,System.Drawing.Image)">
            <summary>
            Draws an image in world units
            </summary>
            <remarks>
            Assumes the graphics has not been adjusted with AdjustGraphicsToWorldUnits()
            </remarks>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.ZoomAndScrollToRectangleWorldUnits(System.Drawing.RectangleF)">
            <summary>
            Zooms and scrolls the view to show the given rectangle.
            </summary>
            <param name="rectangle">The rectangle, in world units.</param>
        </member>
        <member name="F:BioLab.GUI.DataViewers.ZoomableDataViewer.inCalculateLayout">
            <summary>
            Special flags used in CalculateLayout to check for re-entrancy
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.CalculateLayout">
            <summary>
            Calculates the layout and shows the scrollbars if necessary
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.ZoomIn">
            <summary>
            Increases the zoom factor.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.ZoomOut">
            <summary>
            Decreases the zoom factor.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.OnClientSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.ClientSizeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.UserControl.Load"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.OnZoomRectangleSelected(BioLab.GUI.DataViewers.ZoomRectangleSelectedEventArgs)">
            <summary>
            Raises the ZoomRectangleSelected event
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.OnZoomLevelChanged(System.EventArgs)">
            <summary>
            Raises the ZoomLevelChanged event
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.AdjustRangeAndSetZoomLevel(System.Double,System.Boolean)">
            <summary>
            Adjust level if out of range and then set it to the zoomLevel variable (not the property).<para/>
            The UpdateActualZoomFactors method is automatically called (but the the CalculateLayout() method is called only if updateZoomLevelProperty is true).
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.ScrollableControl.Scroll"/> event.
            </summary>
            <param name="se">A <see cref="T:System.Windows.Forms.ScrollEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseUp"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.OnMouseCaptureChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseCaptureChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="F:BioLab.GUI.DataViewers.ZoomableDataViewer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomableDataViewer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.ZoomableDataViewer.DeviceToWorldScaleX">
            <summary>
            Horizontal conversion factor at zoom level 1 (derived classes can change these values).
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.ZoomableDataViewer.DeviceToWorldScaleY">
            <summary>
            Vertical conversion factor at zoom level 1 (derived classes can change these values).
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.ZoomableDataViewer.HalfPixelOffsetMode">
            <summary>
            Gets or sets a value indicating whether the world units refers to the center of the pixels at large zoom levels.
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if half pixel offset mode is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BioLab.GUI.DataViewers.ZoomableDataViewer.WorldRectangle">
            Get or set the whole data rectangle in its original units
        </member>
        <member name="P:BioLab.GUI.DataViewers.ZoomableDataViewer.ZoomLevel">
            <summary>
            Gets or sets the zoom factor (1 = 100%, 0.5 = 50%, 2 = 200%, ...)
            </summary>
            <value>The current zoom factor.</value>
        </member>
        <member name="P:BioLab.GUI.DataViewers.ZoomableDataViewer.FitToScreenSize">
            <summary>
            When enabled, the viewer will always automatically set the zoom level so that the entire data is displayed in the view
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.ZoomableDataViewer.MouseWheelZoom">
            <summary>
            When enabled, the viewer will change the zoom level when the user moves the mouse wheel
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.ZoomableDataViewer.LeftMouseButtonTool">
            <summary>
            Gets or sets the behaviour of the control when the left mouse button is pressed.
            </summary>
            <value>The tool associated to the left mouse button.</value>
        </member>
        <member name="P:BioLab.GUI.DataViewers.ZoomableDataViewer.MinZoomLevel">
            <summary>
            Minimum allowed zoom factor
            </summary>
            <value></value>
        </member>
        <member name="P:BioLab.GUI.DataViewers.ZoomableDataViewer.MaxZoomLevel">
            <summary>
            Maximu allowed zoom factor
            </summary>
        </member>
        <member name="E:BioLab.GUI.DataViewers.ZoomableDataViewer.ZoomRectangleSelected">
            <summary>
            Occurs when the user selects a rectangle with the mouse. Registered delegates can cancel the default behaviour (zoom to the rectangle)
            </summary>
        </member>
        <member name="E:BioLab.GUI.DataViewers.ZoomableDataViewer.ZoomLevelChanged">
            <summary>
            Occurs when the value of the ZoomLevel property changes.
            </summary>
        </member>
        <member name="T:BioLab.GUI.DataViewers.IClipboardAware">
            <summary>
            This interface is implemented by classes that interacts with the system clipboard.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.IClipboardAware.Copy">
            <summary>
            Copies the current content to the clipboard.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.IClipboardAware.Paste">
            <summary>
            Pastes the clipboard content into the viewer.
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.IClipboardAware.CanCopy">
            <summary>
            True if the current content can be copied to the clipboard
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.IClipboardAware.CanPaste">
            <summary>
            True if the current clipboard content can be pasted into the viewer
            </summary>
        </member>
        <member name="E:BioLab.GUI.DataViewers.IClipboardAware.DataPasted">
            <summary>
            Occurs when a successful paste operation changed the data.
            </summary>
        </member>
        <member name="T:BioLab.GUI.DataViewers.IEditable">
            <summary>
            Exposes properties and events to edit the content of a DataViewer.
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.IEditable.EditModeEnabled">
            <summary>
            True if it is currently possible to enable the Edit Mode
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.IEditable.EditMode">
            <summary>
            Gets or sets a value indicating whether the edit mode is enabled.
            </summary>
            <value><c>true</c> if the edit mode is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:BioLab.GUI.DataViewers.IEditable.DataChanged">
            <summary>
            Occurs when an edit operation changed any of the data.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ImageViewer.#ctor(BioLab.ImageProcessing.ImageBase)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.DataViewers.ImageViewer"/> class.
            </summary>
            <param name="image">The image to be displayed.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ImageViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.DataViewers.ImageViewer"/> class.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ImageViewer.OnDataPasted">
            <summary>
            Raises the DataPasted event.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ImageViewer.Copy">
            <summary>
            Copies the current content to the clipboard.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ImageViewer.Paste">
            <summary>
            Pastes the clipboard content into the viewer.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ImageViewer.UpdateViewer">
            <summary>
            This medhod should be called each time the image content changes and the
            user interface needs to be updated accordingly.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ImageViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ImageViewer.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ImageViewer.OnDataChanged">
            <summary>
            Raises the DataChanged event.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ImageViewer.UpdateDefaultContextMenuItems">
            <summary>
            This method updates the default context menu before it is displayed.
            </summary>
        </member>
        <member name="F:BioLab.GUI.DataViewers.ImageViewer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ImageViewer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ImageViewer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.ImageViewer.CanCopy">
            <summary>
            True if the current content can be copied to the clipboard
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.ImageViewer.CanPaste">
            <summary>
            True if the current clipboard content can be pasted into the viewer
            </summary>
        </member>
        <member name="E:BioLab.GUI.DataViewers.ImageViewer.DataPasted">
            <summary>
            Occurs when a successful paste operation changed the data.
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.ImageViewer.Image">
            <summary>
            Gets or sets the data as a BioLab.ImageProcessing.Image
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.ImageViewer.EditModeEnabled">
            <summary>
            True if it is currently possible to enable the Edit Mode
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.ImageViewer.EditMode">
            <summary>
            Gets or sets a value indicating whether the edit mode is enabled.
            </summary>
            <value>
            	<c>true</c> if the edit mode is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:BioLab.GUI.DataViewers.ImageViewer.DataChanged">
            <summary>
            Occurs when an edit operation changed any of the data.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Histogram">
            <summary>
            Represents the histogram of a gray scale image: it contains the number of pixels for each grayscale value.
            </summary>
        </member>
        <member name="T:BioLab.Common.Data">
            <summary>
            The abstract base class from which most data classes in the 
            library inherits (e.g. the <see cref="T:BioLab.ImageProcessing.Image`1"/> class)
            </summary>
        </member>
        <member name="M:BioLab.Common.Data.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that desrcibes the current <see cref="T:BioLab.Common.Data"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that desrcibes the current <see cref="T:BioLab.Common.Data"/>.
            </returns>
        </member>
        <member name="M:BioLab.Common.Data.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the current <see cref="T:BioLab.Common.Data"/> to a specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.Common.Data"/> will be saved.</param>
        </member>
        <member name="M:BioLab.Common.Data.SaveToFile(System.String)">
            <summary>
            Saves the current <see cref="T:BioLab.Common.Data"/> to a specified file.
            </summary>
            <param name="path">A string that contains the name of the file to which to save the current <see cref="T:BioLab.Common.Data"/>.</param>
        </member>
        <member name="M:BioLab.Common.Data.InternalClone">
            <summary>
            Creates an exact copy of this instance.
            </summary>
            <returns>
            The <see cref="T:BioLab.Common.Data"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.Common.Data.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of this instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:BioLab.Common.Data.Clone">
            <summary>
            Creates a new object that is a copy of this instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:BioLab.Common.Data.Description">
            <summary>
            Gets or sets the data description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:BioLab.Common.Data.UserObject">
            <summary>
            Gets or sets a custom object associated to the data.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Histogram.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Histogram"/> class where the number of pixels
            for each grayscale value is zero.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Histogram.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Histogram"/> class copying the values from an input array.
            </summary>
            <param name="data">The input array. Note that the length of the array must be 256.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Histogram.Clone">
            <summary>
            Creates a new histogram that is a copy of the current instance.
            </summary>
            <returns>
            A new histogram that is a copy of this instance.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Histogram.InternalClone">
            <summary>
            Creates an exact copy of this instance.
            </summary>
            <returns>
            The <see cref="T:BioLab.Common.Data"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Histogram.FindLocalMinimum(System.Int32)">
            <summary>
            Looks for a local minimum in the histogram. This method attempts to find a minimum that
            is located between two maximum values, whose distance is largest than the input parameter.
            </summary>
            <param name="minimumDistanceBetweenMaxima">The required distance between the two maximum values.</param>
            <returns>The graylevel corresponding to the minimum found.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Histogram.FindMaxValue">
            <summary>
            Returns the largest value of the histogram.
            </summary>
            <returns>The largest histogram value.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Histogram.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the current <see cref="T:BioLab.ImageProcessing.Histogram"/> to a specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.ImageProcessing.Histogram"/> will be saved.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Histogram.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the histogram values.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the histogram values.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Histogram.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the histogram values.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the histogram values.
            </returns>
        </member>
        <member name="P:BioLab.ImageProcessing.Histogram.Item(System.Int32)">
            <summary>
            Gets or sets the number of pixels for a given graylevel.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.HistogramBuilder">
             <summary>
             Calculates the histogram of a whole grayscale image or of a rectangular region in a grayscale image.
             </summary>
            <example>
            The following code example performs the following actions:
            <list type="bullet">
            <item>
            <description>Reads a gray image from file.</description>
            </item>
            <item>
            <description>Creates a new instance of the HistogramBuilder class using sqrt of values.</description>
            </item>
            <item>
            <description>Executes the HistogramBuilder operation to create the Histogram.</description>
            </item>
            <item>
            <description>Writes the maximum histogram value in the console.</description>
            </item>
            </list>
            <code>
            using System;
            using BioLab.ImageProcessing;
            
            namespace Examples
            {
                class Program
                {
                    static void Main()
                    {
                        Image&lt;byte&gt; image = ImageBase.LoadFromFile(@"C:\images\image.jpg").ToByteImage();
                        HistogramBuilder operation = new HistogramBuilder(image, true, 0);
                        Histogram result = operation.Execute();
                        Console.Write("The maximum histogram value is {0}",result.GetMaxValue());
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:BioLab.ImageProcessing.HistogramBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.HistogramBuilder"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.HistogramBuilder.#ctor(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.HistogramBuilder"/> class and allows to specify
            the input image.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.HistogramBuilder.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.HistogramBuilder"/> class and allows to specify
            the input image and the main parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="sqrt">if set to <c>true</c>, the square root of each histogram value is performed.</param>
            <param name="smoothWindowSize">Size of the smooth window: if this parameter is greater than zero, 
            each histogram value is calculated as the average of its neighboring values.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.HistogramBuilder.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Boolean,System.Int32,BioLab.Math.Geometry.IntRectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.HistogramBuilder"/> class and allows to specify
            the input image and the main parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="sqrt">if set to <c>true</c>, the square root of each histogram value is performed.</param>
            <param name="smoothWindowSize">Size of the smooth window: if this parameter is greater than zero,
            each histogram value is calculated as the average of its neighboring values.</param>
            <param name="region">The rectangular region of the image on which the histogram has to be calculated.
            If the region is empty, the histogram is calculated on the whole image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.HistogramBuilder.Run">
            <summary>
            Calculates the histogram.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.HistogramBuilder.Sqrt">
            <summary>
            Gets or sets a value indicating whether the square root of each histogram value is performed.
            </summary>
            <value><c>true</c> if the square root of each histogram value is performed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.HistogramBuilder.SmoothWindowSize">
            <summary>
            If this parameter is greater than zero, 
            each histogram value is calculated as the average of its neighboring values, to obtain a smoothed histogram.
            </summary>
            <value>The size of the smooth window.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.HistogramBuilder.Region">
            <summary>
            Gets or sets the rectangular region of the image on which the histogram has to be calculated.
            If the region is empty, the histogram is calculated on the whole image.
            </summary>
            <value>The rectangular region of the image on which the histogram has to be calculated.</value>
        </member>
        <member name="T:BioLab.GUI.Forms.ImagePreviewForm">
            <summary>
            A simple form that displays a given image.
            </summary>
        </member>
        <member name="F:BioLab.GUI.Forms.ImagePreviewForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.ImagePreviewForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.Forms.ImagePreviewForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.ImagePreviewForm.#ctor(BioLab.ImageProcessing.ImageBase)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.Forms.ImagePreviewForm"/> class.
            </summary>
            <param name="image">The image to be displayed.</param>
        </member>
        <member name="M:BioLab.GUI.Forms.ImagePreviewForm.#ctor(BioLab.ImageProcessing.ImageBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.Forms.ImagePreviewForm"/> class.
            </summary>
            <param name="image">The image to be shown in the form.</param>
            <param name="autoClose">if set to <c>true</c>, the form will be automatically closed when the user releases the mouse button.</param>
        </member>
        <member name="P:BioLab.GUI.Forms.ImagePreviewForm.AutoClose">
            <summary>
            Gets or sets a value indicating whether the form will be automatically closed when the user releases the mouse button.
            </summary>
            <value><c>true</c> if the form will be automatically closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BioLab.Classification.NamespaceDoc">
            <summary>
            Provides classes for performing classification tasks.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.TopologyOperation`1">
            <summary>
            Represents a generic digital topology algorithm that takes a binary image as input and produces an object
            of a given type as output.
            </summary>
            <typeparam name="TOutput">The type of the algorithm output.</typeparam>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.TopologyOperation`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.TopologyOperation`1"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.TopologyOperation`1.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.TopologyOperation`1"/> class and allows
            to specify the input image and the foreground.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="foreground">The graylevel value to be considered as foreground; any other value 
            is considered as background.</param>
        </member>
        <member name="P:BioLab.ImageProcessing.Topology.TopologyOperation`1.Foreground">
            <summary>
            Gets or sets the foreground value.
            </summary>
            <value>The graylevel value to be considered as foreground; any other value 
            is considered as background.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.TopologyOperation`3">
            <summary>
            Represents a generic digital topology algorithm that takes two images as input and produces an object
            of a given type as output.
            </summary>
            <typeparam name="TInputImage1">The type of the first input image.</typeparam>
            <typeparam name="TInputImage2">The type of the second input image.</typeparam>
            <typeparam name="TOutput">The type of the algorithm output.</typeparam>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.TopologyOperation`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.TopologyOperation`3"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.TopologyOperation`3.#ctor(`0,`1,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.TopologyOperation`3"/> class
            and allows to specify the input images and the foreground.
            </summary>
            <param name="inputImage1">The first input image.</param>
            <param name="inputImage2">The second input image.</param>
            <param name="foreground">The graylevel value to be considered as foreground; any other value 
            is considered as background.</param>
        </member>
        <member name="P:BioLab.ImageProcessing.Topology.TopologyOperation`3.Foreground">
            <summary>
            Gets or sets the foreground value.
            </summary>
            <value>The graylevel value to be considered as foreground; any other value 
            is considered as background.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.DistanceTransform">
            <summary>
            Calculates the distance transform of a binary image.
            The result of the transform is a graylevel image that looks similar to the input image, 
            except that the graylevel intensities of points inside foreground regions are changed 
            to show the distance to the closest boundary from each point. 
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.DistanceTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.DistanceTransform"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.DistanceTransform.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Byte,BioLab.ImageProcessing.MetricType)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.DistanceTransform"/> class and allows to specify the
            input image, the foreground, and the metric.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="foreground">The graylevel value to be considered as foreground; any other value 
            is considered as background.</param>
            <param name="metric">The metric to be used to calculate pixel distances.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.DistanceTransform.Run">
            <summary>
            Calculates the distance transform.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.Topology.DistanceTransform.Metric">
            <summary>
            Gets or sets the metric to calculate pixel distances.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.CityBlockDirection">
            <summary>
            Represents a direction in a city block metric (d4): the four enum
            values are numbered consecutively in counter-clockwise order, starting from zero (East direction).
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.Topology.CityBlockDirection.Invalid">
            <summary>
            An invalid direction
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.Topology.CityBlockDirection.East">
            <summary>
            East direction (value 0)
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.Topology.CityBlockDirection.North">
            <summary>
            North direction (value 1)
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.Topology.CityBlockDirection.West">
            <summary>
            West direction (value 2)
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.Topology.CityBlockDirection.South">
            <summary>
            South direction (value 3)
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.ChessboardDirection">
            <summary>
            Represents a direction in a chessboard metric (d8): the eight enum
            values are numbered consecutively in counter-clockwise order, starting from zero (East direction).
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.Topology.ChessboardDirection.Invalid">
            <summary>
            An invalid direction
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.Topology.ChessboardDirection.East">
            <summary>
            East direction (value 0)
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.Topology.ChessboardDirection.Northeast">
            <summary>
            NorthEast direction (value 1)
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.Topology.ChessboardDirection.North">
            <summary>
            North direction (value 2)
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.Topology.ChessboardDirection.Northwest">
            <summary>
            NorthWest direction (value 3)
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.Topology.ChessboardDirection.West">
            <summary>
            West direction (value 4)
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.Topology.ChessboardDirection.Southwest">
            <summary>
            SouthWest direction (value 5)
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.Topology.ChessboardDirection.South">
            <summary>
            South direction (value 6)
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.Topology.ChessboardDirection.Southeast">
            <summary>
            SouthEast direction (value 7)
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.CityBlockMetric">
            <summary>
            Provides static methods to work with the city block metric.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.CityBlockMetric.GetOppositeDirection(BioLab.ImageProcessing.Topology.CityBlockDirection)">
            <summary>
            Gets the opposite direction of a given direction (e.g. South-&gt;North)
            </summary>
            <param name="direction">The input direction.</param>
            <returns>The opposite direction.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.CityBlockMetric.GetPreviousDirection(BioLab.ImageProcessing.Topology.CityBlockDirection)">
            <summary>
            Gets the previous direction of a given direction, according to the counter-clockwise order.
            </summary>
            <param name="direction">The input direction.</param>
            <returns>The previous direction.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.CityBlockMetric.GetNextDirection(BioLab.ImageProcessing.Topology.CityBlockDirection)">
            <summary>
            Gets the next direction of a given direction, according to the counter-clockwise order.
            </summary>
            <param name="direction">The input direction.</param>
            <returns>The previous direction.</returns>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.ChessboardMetric">
            <summary>
            Provides static methods to work with the chessboard metric.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.ChessboardMetric.GetOppositeDirection(BioLab.ImageProcessing.Topology.ChessboardDirection)">
            <summary>
            Gets the opposite direction of a given direction (e.g. South-&gt;North)
            </summary>
            <param name="direction">The input direction.</param>
            <returns>The opposite direction.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.ChessboardMetric.GetEuclideanDistance(BioLab.ImageProcessing.Topology.ChessboardDirection)">
            <summary>
            Gets the Euclidean distance corresponding to a movement (one step) in the specified direction.
            The distance of a diagonal movement is the square root of two, while the distance of a 
            vertical or horizontal movement is one.
            </summary>
            <param name="direction">The movement direction.</param>
            <returns>The distance, in pixels.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.ChessboardMetric.GetPreviousDirection(BioLab.ImageProcessing.Topology.ChessboardDirection)">
            <summary>
            Gets the previous direction of a given direction, according to the counter-clockwise order.
            </summary>
            <param name="direction">The input direction.</param>
            <returns>The previous direction.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.ChessboardMetric.GetNextDirection(BioLab.ImageProcessing.Topology.ChessboardDirection)">
            <summary>
            Gets the next direction of a given direction, according to the counter-clockwise order.
            </summary>
            <param name="direction">The input direction.</param>
            <returns>The previous direction.</returns>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.CityBlockContour">
            <summary>
            Represents the contour of an object in an image.
            The contour is stored as a starting pixel location and a list of directions according to 
            the CityBlock metric.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.CityBlockContour.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.CityBlockContour"/> class.
            </summary>
            <param name="x">The x coordinate of the starting pixel.</param>
            <param name="y">The y coordinate of the starting pixel.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.CityBlockContour.Add(BioLab.ImageProcessing.Topology.CityBlockDirection)">
            <summary>
            Adds the specified direction to the contour.
            </summary>
            <param name="direction">The direction to be added.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.CityBlockContour.Clear">
            <summary>
            Clears all the directions making the contour empty.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.CityBlockContour.InternalClone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new contour that is a copy of this instance.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.CityBlockContour.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new contour that is a copy of this instance.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.CityBlockContour.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the directions in the contour.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the directions in the contour.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.CityBlockContour.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the directions in the contour.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the directions in the contour.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.CityBlockContour.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the current <see cref="T:BioLab.ImageProcessing.Topology.CityBlockContour"/> to a specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.ImageProcessing.Topology.CityBlockContour"/> will be saved.</param>
        </member>
        <member name="P:BioLab.ImageProcessing.Topology.CityBlockContour.Location">
            <summary>
            Gets or sets the location of the first pixel.
            </summary>
            <value>The location of the first pixel.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.ContourExtraction">
            <summary>
            Extracts the contours of the objects in a binary image.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.ContourExtraction.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.ContourExtraction"/> class and allows to specify
            the foreground.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="foreground">The graylevel value to be considered as foreground; any other value 
            is considered as background.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.ContourExtraction.Run">
            <summary>
            Executes this image operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.ConnectedComponentImage">
            <summary>
            Represents an image containing a set of connected components. The value of each pixel denotes
            the zero-based index of the component that the pixel belongs to. The value of background pixels is -1.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Image`1">
             <summary>
             Represents a generic image with a single channel (typically gray-scale).
             </summary>
             <typeparam name="T">The type of the pixels in the image.</typeparam>
            <example>
             The following code example performs the following actions:
            <list type="bullet"> 
            <item>
            <description> Reads a gray level image from file.</description>
            </item>
            <item>
            <description> Calculates the average gray level value and prints it to screen.</description>
            </item>
            <item>
            <description> Binarizes the image using the average gray level as a threshold.</description>
            </item>
            <item>
            <description> Writes the image to a new file.</description>
            </item>
            </list>
            Note that a method to calculate the average pixel value in an image is available in the <see cref="T:BioLab.ImageProcessing.ImageUtilities"/> class.
            <code>
            
            using System;
            using BioLab.ImageProcessing;
            
            namespace Examples
            {
                class Program
                {
                    static void Main()
                    {
                        float avgGray = 0;
                        Image&lt;byte&gt; image = (Image&lt;byte&gt;)ImageBase.LoadFromFile(@"C:\images\peppers.bmp");
                        foreach (byte pixel in image)
                        {
                            avgGray += pixel;
                        }
                        avgGray /= image.PixelCount;
                        Console.WriteLine("Average gray level = {0}", avgGray);
                        // Binarizes the image using the average gray level as a threshold
                        for (int i = 0; i &lt; image.PixelCount; i++)
                        {
                            image[i] = (byte)(image[i] &gt; avgGray ? 255 : 0);
                        }
                        image.SaveToFile(@"C:\images\peppersBW.bmp");
                    }
                }
            }
            
            </code>
            </example>
        </member>
        <member name="T:BioLab.ImageProcessing.ImageBase">
             <summary>
             Represents a generic raster image.
             </summary>
            <example>
             The following code example performs the following actions:
            <list type="bullet"> 
            <item>
            <description> Reads an image from file.</description> 
            </item>
            <item>
            <description> Prints to screen image width and height.</description>
            </item>
            <item>
            <description> Copies a region of the image to a new image.</description>
            </item>
            <item>
            <description> Writes the new image to a new file.</description>
            </item>
            </list>
            <code>
             using System;
             using BioLab.ImageProcessing;
             
             namespace Examples
             {
                 class Program
                 {
                     static void Main()
                     {
                         ImageBase image = ImageBase.LoadFromFile(@"C:\Images\Peppers.bmp");
                         Console.WriteLine("Width={0}, Height={1}", image.Width, image.Height);
                         ImageBase subImage = image.GetSubImage(0, 0, 50, 40);
                         subImage.SaveToFile(@"C:\images\Peppers_crop.bmp");
                     }
                 }
             }
             </code>
             </example> 
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBase.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageBase"/> class.
            </summary>
            <param name="width">The width, in pixels, of the new image.</param>
            <param name="height">The height, in pixels, of the new image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBase.Contains(System.Int32,System.Int32)">
            <summary>
            Determines whether the pixel at the specified coordinates is contained in the image.
            </summary>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <returns>
            	<c>true</c> if the specified pixel is contained; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBase.Contains(BioLab.Math.Geometry.IntPoint2D)">
            <summary>
            Determines whether the specified pixel is contained in the image.
            </summary>
            <param name="location">The pixel location.</param>
            <returns>
            	<c>true</c> if the specified pixel location is contained; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBase.GetSubImage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:BioLab.ImageProcessing.ImageBase"/> containing a copy of the pixels of a rectangular region of the current image.
            </summary>
            <param name="x">The x coordinate of the top-left pixel.</param>
            <param name="y">The y coordinate of the top-left pixel.</param>
            <param name="subImageWidth">The width of the rectangle.</param>
            <param name="subImageHeight">The height of the rectangle.</param>
            <returns>The new <see cref="T:BioLab.ImageProcessing.ImageBase"/>.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBase.GetSubImage(System.Int32,System.Int32,BioLab.ImageProcessing.ImageBase)">
            <summary>
            Copies all the pixels contained in an rectangular region of the current image into a destination image.
            </summary>
            <param name="x">The x coordinate of the top-left pixel.</param>
            <param name="y">The y coordinate of the top-left pixel.</param>
            <param name="destinationSubImage">The <see cref="T:BioLab.ImageProcessing.ImageBase"/> in which pixels are to be copied.
            Width and height of this image determinate the size of the rectagular region which has to be copied.
            </param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBase.LoadFromFile(System.String)">
            <summary>
            Creates an <see cref="T:BioLab.ImageProcessing.ImageBase"/> from the specified file.
            </summary>
            <param name="path">A string that contains the name of the file from which to create the <see cref="T:BioLab.ImageProcessing.ImageBase"/>.</param>
            <returns>The <see cref="T:BioLab.ImageProcessing.ImageBase"/> this method creates.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBase.LoadFromStream(System.IO.Stream)">
            <summary>
            Creates an <see cref="T:BioLab.ImageProcessing.ImageBase"/> from the specified data stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the data for this <see cref="T:BioLab.ImageProcessing.ImageBase"/>.</param>
            <returns>The <see cref="T:BioLab.ImageProcessing.ImageBase"/> this method creates.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBase.SaveToFile(System.String)">
            <summary>
            Saves the current <see cref="T:BioLab.ImageProcessing.ImageBase"/> to a specified file.
            </summary>
            <param name="path">A string that contains the name of the file to which to save the current <see cref="T:BioLab.ImageProcessing.ImageBase"/>.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBase.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the current <see cref="T:BioLab.ImageProcessing.ImageBase"/> to a specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.ImageProcessing.ImageBase"/> will be saved.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBase.SetSubImage(System.Int32,System.Int32,BioLab.ImageProcessing.ImageBase)">
            <summary>
            Copies all the pixels of a given <see cref="T:BioLab.ImageProcessing.ImageBase"/> into the current image at a given position.
            </summary>
            <param name="x">The x coordinate of the position where the pixels are to be copied.</param>
            <param name="y">The y coordinate of the position where the pixels are to be copied.</param>
            <param name="subImage">The <see cref="T:BioLab.ImageProcessing.ImageBase"/> containing the pixels to be copied.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:BioLab.ImageProcessing.ImageBase"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:BioLab.ImageProcessing.ImageBase"/>.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBase.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:BioLab.ImageProcessing.ImageBase"/>.
            </summary>
            <returns>
            The <see cref="T:BioLab.ImageProcessing.ImageBase"/> this method creates.
            </returns>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageBase.Center">
            <summary>
            Gets the coordinates of the image center.
            </summary>
            <value>The coordinates, in pixels, of the center of the image.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageBase.Height">
            <summary>
            Gets the height, in pixels, of the image.
            </summary>
            <value>The height, in pixels, of the image.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageBase.PixelCount">
            <summary>
            Gets the number of pixels in the image.
            </summary>
            <value>The total number of pixels.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageBase.Width">
            <summary>
            Gets the width, in pixels, of the image.
            </summary>
            <value>The width, in pixels, of the image.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.IPixelIndexable`1">
            <summary>
            Defines indexers to get or set image pixels.
            </summary>
            <typeparam name="TPixel">The type of the pixel.</typeparam>
        </member>
        <member name="P:BioLab.ImageProcessing.IPixelIndexable`1.Item(System.Int32)">
            <summary>
            Gets or sets the value of the pixel at the specified linear index.
            </summary>
            <value>Value of the specified pixel</value>
        </member>
        <member name="P:BioLab.ImageProcessing.IPixelIndexable`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the value of the pixel at the specified coordinates.
            </summary>
            <value>Value of the specified pixel</value>
        </member>
        <member name="P:BioLab.ImageProcessing.IPixelIndexable`1.Item(BioLab.Math.Geometry.IntPoint2D)">
            <summary>
            Gets or sets the value of the pixel at the specified coordinates.
            </summary>
            <value>Value of the specified pixel</value>
        </member>
        <member name="M:BioLab.ImageProcessing.Image`1.#ctor(System.Int32,System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Image`1"/> class which has 
            all the pixels initialized with a given value.
            </summary>
            <param name="width">The width, in pixels, of the image.</param>
            <param name="height">The height, in pixels, of the image.</param>
            <param name="color">An initial value for all the pixels.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Image`1.#ctor(System.Int32,System.Int32,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Image`1"/> class that contains 
            pixels copied from the specified array.
            </summary>
            <param name="width">The width, in pixels, of the image.</param>
            <param name="height">The height, in pixels, of the image.</param>
            <param name="pixels">The array containing the pixel values.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Image`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Image`1"/> class which has the 
            default value (0) for all the pixels.
            </summary>
            <param name="width">The width, in pixels, of the image.</param>
            <param name="height">The height, in pixels, of the image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Image`1.#ctor(BioLab.ImageProcessing.Image{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Image`1"/> class with a copy of the pixels of the specified image.
            </summary>
            <param name="image">The image whose pixels are copied to the new image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Image`1.Clone">
            <summary>
            Creates a new image with the same pixels of this instance.
            </summary>
            <returns>
            A new image that is a copy of this instance.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Image`1.InternalClone">
            <summary>
            Creates an exact copy of this instance.
            </summary>
            <returns>
            The <see cref="T:BioLab.Common.Data"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Image`1.CopyPixels">
            <summary>
            Returns an array containing all the pixel values.
            </summary>
            <returns>The array containing all the pixel values.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Image`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the pixels of the image.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the pixels of the image.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Image`1.GetSubImage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:BioLab.ImageProcessing.ImageBase"/> containing a copy of the pixels of a rectangular region of the current image.
            </summary>
            <param name="x">The x coordinate of the top-left pixel.</param>
            <param name="y">The y coordinate of the top-left pixel.</param>
            <param name="subImageWidth">The width of the rectangle.</param>
            <param name="subImageHeight">The height of the rectangle.</param>
            <returns>
            The new <see cref="T:BioLab.ImageProcessing.ImageBase"/>.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Image`1.GetSubImage(System.Int32,System.Int32,BioLab.ImageProcessing.ImageBase)">
            <summary>
            Copies all the pixels contained into an rectangular region of the current image into a destination image.
            </summary>
            <param name="x">The x coordinate of the top-left pixel.</param>
            <param name="y">The y coordinate of the top-left pixel.</param>
            <param name="destinationSubImage">The <see cref="T:BioLab.ImageProcessing.ImageBase"/> in which the pixels are to be copied.
            Width and height of this image define the size of the rectagular region which has to be copied.
            </param>
        </member>
        <member name="M:BioLab.ImageProcessing.Image`1.SetSubImage(System.Int32,System.Int32,BioLab.ImageProcessing.ImageBase)">
            <summary>
            Copies all the pixels of a given <see cref="T:BioLab.ImageProcessing.ImageBase"/> into the current image at a given position.
            </summary>
            <param name="x">The x coordinate of the position where the pixels are to be copied.</param>
            <param name="y">The y coordinate of the position where the pixels are to be copied.</param>
            <param name="subImage">The <see cref="T:BioLab.ImageProcessing.ImageBase"/> to be copied.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Image`1.SetSubImage(System.Int32,System.Int32,BioLab.ImageProcessing.Image{`0},`0)">
            <summary>
            Copies all the non-trasparent pixels of a given <see cref="T:BioLab.ImageProcessing.ImageBase"/> into the current image at a given position.
            </summary>
            <param name="x">The x coordinate of the position where the pixels are to be copied.</param>
            <param name="y">The y coordinate of the position where the pixels are to be copied.</param>
            <param name="subImage">The <see cref="T:BioLab.ImageProcessing.ImageBase"/> to be copied.</param>
            <param name="transparentColor">The trasparent color.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Image`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the pixels of the image.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the pixels of the image.
            </returns>
        </member>
        <member name="P:BioLab.ImageProcessing.Image`1.PixelCount">
            <summary>
            Gets the number of pixels in the image.
            </summary>
            <value>The total number of pixels.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.Image`1.Item(System.Int32)">
            <summary>
            Gets or sets the value of the pixel at the specified linear index.
            </summary>
            <value>Value of the specified pixel</value>
        </member>
        <member name="P:BioLab.ImageProcessing.Image`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the value of the pixel at the specified coordinates.
            </summary>
            <value>Value of the specified pixel</value>
        </member>
        <member name="P:BioLab.ImageProcessing.Image`1.Item(BioLab.Math.Geometry.IntPoint2D)">
            <summary>
            Gets or sets the value of the pixel at the specified coordinates.
            </summary>
            <value>Value of the specified pixel</value>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.ConnectedComponentImage.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.ConnectedComponentImage"/> class, initializing all the pixels to a given value.
            </summary>
            <param name="width">The image width.</param>
            <param name="height">The image height.</param>
            <param name="value">The value for all the pixel image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.ConnectedComponentImage.#ctor(BioLab.ImageProcessing.Topology.ConnectedComponentImage)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.ConnectedComponentImage"/> class with a copy of the pixels of the specified image.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.ConnectedComponentImage.InternalClone">
            <summary>
            Creates an exact copy of this instance.
            </summary>
            <returns>
            The <see cref="T:BioLab.Common.Data"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.ConnectedComponentImage.Clone">
            <summary>
            Creates a new image with the same pixels of this instance.
            </summary>
            <returns>
            A new image that is a copy of this instance.
            </returns>
        </member>
        <member name="P:BioLab.ImageProcessing.Topology.ConnectedComponentImage.ComponentCount">
            <summary>
            Gets the number of connected components in the image.
            </summary>
            <value>The number of connected components.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.ConnectedComponentsLabeling">
            <summary>
            Finds connected components in a binary image.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.ConnectedComponentsLabeling.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Byte,BioLab.ImageProcessing.MetricType)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.ConnectedComponentsLabeling"/> class and allows to specify the parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="foreground">The foreground value.</param>
            <param name="metric">The metric to be used.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.ConnectedComponentsLabeling.#ctor(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.ConnectedComponentsLabeling"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.ConnectedComponentsLabeling.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.ConnectedComponentsLabeling"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.ConnectedComponentsLabeling.Run">
            <summary>
            Executes the image operation.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.Topology.ConnectedComponentsLabeling.Metric">
            <summary>
            Gets or sets the metric to be used in the algorithm.
            </summary>
            <value>The metric to be used.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.ThinningHilditch">
            <summary>
            Performs a thinning operation on a binary image. A thinning operation transforms foreground objects to lines. 
            It removes pixels so that an object without holes shrinks to a minimally connected stroke, and an object with holes shrinks to a 
            connected ring halfway between each hole and the outer boundary.
            This image operation implements the Hilditch's algorithm.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.ThinningHilditch.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.ThinningHilditch"/> class and allows to specify the parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="foreground">The foreground value.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.ThinningHilditch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.ThinningHilditch"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.ThinningHilditch.Run">
            <summary>
            Executes the algorithm.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.Thinning">
            <summary>
            Performs a thinning operation on a binary image. A thinning operation transforms foreground objects to lines. 
            It removes pixels so that an object without holes shrinks to a minimally connected stroke, and an object with holes shrinks to a 
            connected ring halfway between each hole and the outer boundary.
            This image operation implements the following algorithm: [T. Y. Zhang, C. Y. Suen, A fast parallel algorithm for thinning 
            digital patterns, Communications of the ACM , Volume 27 ,  Issue 3  (March 1984)].
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.Thinning.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.Thinning"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.Thinning.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.Thinning"/> class and allows to specify the parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="foreground">The foreground value.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.Thinning.Run">
            <summary>
            Executes the image operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.TopologyDifferenceImage">
            <summary>
            Calculates the difference between two binary images.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.TopologyDifferenceImage.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte},System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.TopologyDifferenceImage"/> class and allows to specify the parameters.
            </summary>
            <param name="inputImage1">The first image.</param>
            <param name="inputImage2">The second image.</param>
            <param name="foreground">The foreground value.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.TopologyDifferenceImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.TopologyDifferenceImage"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.TopologyDifferenceImage.Run">
            <summary>
            Executes the image operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.TopologyIntersection">
            <summary>
            Calculates the intersections between two binary images.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.TopologyIntersection.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte},System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.TopologyIntersection"/> class and allows to specify the parameters.
            </summary>
            <param name="inputImage1">The first image.</param>
            <param name="inputImage2">The second image.</param>
            <param name="foreground">The foreground value.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.TopologyIntersection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.TopologyIntersection"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.TopologyIntersection.Run">
            <summary>
            Executes the image operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Convolution`3">
            <summary>
            Represents a generic convolution operation between a generic single channel image and a generic filter.
            </summary>
            <typeparam name="TInputImagePixel">The pixel type of the input image.</typeparam>
            <typeparam name="TOutputImagePixel">The pixel type of the output image.</typeparam>
            <typeparam name="TFilter">The type of the elements of the convolution filter.</typeparam>
        </member>
        <member name="M:BioLab.ImageProcessing.Convolution`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Convolution`3"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Convolution`3.#ctor(BioLab.ImageProcessing.Image{`0},`2,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Convolution`3"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="filter">The convolution filter.</param>
            <param name="additionalBorder">The additional border.</param>
        </member>
        <member name="P:BioLab.ImageProcessing.Convolution`3.AdditionalBorder">
            <summary>
            Gets or sets the additional border.
            </summary>
            <value>The additional border.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.Convolution`3.Filter">
            <summary>
            Gets or sets the convolution filter.
            </summary>
            <value>The convolution filter.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.ByteToByteConvolution">
             <summary>
             Represents a convolution operation between an Image&lt;byte&gt; and a filter of integers that returns an
             Image&lt;byte&gt;.
             </summary>
            <example>
             This code example performs the following actions:
            <list type="bullet"> 
            <item>
            <description> Reads a gray image from file.</description>
            </item>
            <item>
            <description> Creates a smooth filter.</description>
            </item>
            <item>
            <description> Creates a new instance of the ByteToByteConvolution class.</description>
            </item>
            <item>
            <description> Executes the convolution operation.</description>
            </item>
            <item>
            <description> Saves the output image in a new file.</description>
            </item>
            </list>
            <code>
            
            using System;
            using BioLab.ImageProcessing;
            
            namespace Examples
            {
              class Program
              {
                static void Main()
                { 
                  Image&lt;byte&gt; inputImage =ImageUtilities.ToByteImage(ImageBase.LoadFromFile(@"C:\Images\Peppers.png"));
                  ConvolutionFilter&lt;int&gt; smoothFilter = new ConvolutionFilter&lt;int&gt;(new int[] { 0, 1, 0, 1, 4, 1, 0, 1, 0 }, 8);
                  ByteToByteConvolution convolution = new ByteToByteConvolution(inputImage, smoothFilter,0);
                  Image&lt;byte&gt; outputImage = convolution.Execute();
                  outputImage.SaveToFile(@"C:\Images\SmoothedPeppers.png");
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToByteConvolution.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.ConvolutionFilter{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ByteToByteConvolution"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="filter">The convolution filter.</param>
            <param name="additionalBorder">The additional border.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToByteConvolution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ByteToByteConvolution"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToByteConvolution.Run">
            <summary>
            Executes the convolution operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.ByteToIntConvolution">
             <summary>
             Represents a convolution operation between an Image&lt;byte&gt; and a filter of integer that returns an
             Image&lt;int&gt;.
             </summary>
            <example>
             The following code example performs the following actions:
            <list type="bullet"> 
            <item>
            <description> Reads a gray image from file.</description>
            </item>
            <item>
            <description> Creates a convolution filter.</description>
            </item>
            <item>
            <description> Creates a new instance of the ByteToIntConvolution class.</description>
            </item>
            <item>
            <description> Executes the convolution operation.</description>
            </item>
            <item>
            <description> Saves the output image in a new file.</description>
            </item>
            </list>
            <code>
            
            using System;
            using BioLab.ImageProcessing;
            
            namespace Examples
            {
              class Program
              {
                static void Main()
                {
                  Image&lt;byte&gt; inputImage = ImageUtilities.ToByteImage(ImageBase.LoadFromFile(@"C:\Images\Peppers.png"));
                  ConvolutionFilter&lt;int&gt; filter = new ConvolutionFilter&lt;int&gt;(new int[] { 0, -1, 0, -1, 4, -1, 0, -1, 0 }, 1);
                  ByteToIntConvolution convolution = new ByteToIntConvolution(inputImage, filter, 0);
                  Image&lt;int&gt; outputImage = convolution.Execute();
                  outputImage.SaveToFile(@"C:\Images\ConvPeppers.png");
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToIntConvolution.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.ConvolutionFilter{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ByteToIntConvolution"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="filter">The convolution filter.</param>
            <param name="additionalBorder">The additional border.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToIntConvolution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ByteToIntConvolution"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToIntConvolution.Run">
            <summary>
            Executes the convolution operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.ByteToDoubleConvolution">
             <summary>
             Represents a convolution operation between an Image&lt;byte&gt; and a filter of double that returns an
             Image&lt;double&gt;.
             </summary>
            <example>
            The following code example performs the following actions:
            <list type="bullet">
            <item>
            <description>The following code example performs the following actions:</description>
            </item>
            <item>
            <description>Reads a gray image from file.</description>
            </item>
            <item>
            <description>Creates a smooth filter.</description>
            </item>
            <item>
            <description>Creates a new instance of the ByteToDoubleConvolution class.</description>
            </item>
            <item>
            <description>Executes the convolution operation.</description>
            </item>
            <item>
            <description>Saves the output image in a new file.</description>
            </item>
            </list>
            <code>
            using System;
            using BioLab.ImageProcessing;
            
            namespace Examples
            {
                class Program
                {
                    static void Main()
                    {
                        Image&lt;byte&gt; inputImage = ImageUtilities.ToByteImage(ImageBase.LoadFromFile(@"C:\images\sampleImage.png"));
                        ConvolutionFilter&lt;double&gt; smoothFilter = new ConvolutionFilter&lt;double&gt;(new double[] { 0, 1.5, 0, 1.5, 10, 1.5, 0, 1.5, 0 }, 16);
                        ByteToDoubleConvolution convolution = new ByteToDoubleConvolution(inputImage, smoothFilter, 0);
                        Image&lt;double&gt; outputImage = convolution.Execute();
                        outputImage.SaveToFile(@"C:\images\result.png");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToDoubleConvolution.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.ConvolutionFilter{System.Double},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ByteToDoubleConvolution"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="filter">The convolution filter.</param>
            <param name="additionalBorder">The additional border.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToDoubleConvolution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ByteToDoubleConvolution"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToDoubleConvolution.Run">
            <summary>
            Executes the convolution operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.DoubleToDoubleConvolution">
            <summary>
            Represents a convolution operation between an Image&lt;double&gt; and a filter of double values that returns an
            Image&lt;double&gt;.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.DoubleToDoubleConvolution.#ctor(BioLab.ImageProcessing.Image{System.Double},BioLab.ImageProcessing.ConvolutionFilter{System.Double},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.DoubleToDoubleConvolution"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="filter">The convolution filter.</param>
            <param name="additionalBorder">The additional border.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.DoubleToDoubleConvolution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.DoubleToDoubleConvolution"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.DoubleToDoubleConvolution.Run">
            <summary>
            Executes the convolution operation
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.DoubleToDoubleSeparableConvolution">
            <summary>
            Represents a convolution operation between an Image&lt;double&gt; and a separable filter of int that returns an
            Image&lt;double&gt;.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.DoubleToDoubleSeparableConvolution.#ctor(BioLab.ImageProcessing.Image{System.Double},BioLab.ImageProcessing.SeparableConvolutionFilter{System.Double},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.DoubleToDoubleSeparableConvolution"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="filter">The separable filter.</param>
            <param name="additionalBorder">The additional border.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.DoubleToDoubleSeparableConvolution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.DoubleToDoubleSeparableConvolution"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.DoubleToDoubleSeparableConvolution.Run">
            <summary>
            Executes the convolution operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.ByteToIntSeparableConvolution">
            <summary>
            Represents a convolution operation between an Image&lt;byte&gt; and a separable filter of int that returns an
            Image&lt;int&gt;.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToIntSeparableConvolution.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.SeparableConvolutionFilter{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ByteToIntSeparableConvolution"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="filter">The separable filter.</param>
            <param name="additionalBorder">The additional border.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToIntSeparableConvolution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ByteToIntSeparableConvolution"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToIntSeparableConvolution.Run">
            <summary>
            Executes the convolution operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Sharpening">
             <summary>
             Represents a sharpening operation on an Image&lt;byte&gt; that returns an Image&lt;byte&gt;.
             </summary>
            <example>
            The following code example performs the following actions:
            <list type="bullet">
            <item>
            <description>Reads a Gray image from file.</description>
            </item>
            <item>
            <description>Creates a new istance of the Sharpening class settings to 0.5 the strength of the sharpening operation.</description>
            </item>
            <item>
            <description>Executes the sharpening operation.</description>
            </item>
            <item>
            <description>Saves the output image in a new file.</description>
            </item>
            </list>
            <code>
            using System;
            using BioLab.ImageProcessing;
            
            namespace Examples
            {
                class Program
                {
                    static void Main()
                    {
                        Image&lt;byte&gt; image = ImageBase.LoadFromFile(@"C:\images\original.jpg").ToByteImage();
                        Sharpening operation = new Sharpening(image, 0.5);
                        Image&lt;byte&gt; result = operation.Execute();
                        result.SaveToFile(@"C:\images\result.jpg");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:BioLab.ImageProcessing.Sharpening.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Sharpening"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="strength">The strength of the sharpening operation.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Sharpening.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Sharpening"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Sharpening.Run">
            <summary>
            Executes the sharpening operation.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.Sharpening.Strength">
            <summary>
            Gets or sets the strength of the sharpening operation.
            </summary>
            <value>The strength of the sharpening operation [0,1].</value>
        </member>
        <member name="T:BioLab.ImageProcessing.GradientCalculationMethod">
            <summary>
            Specifies a method to calculate a 2D gradient in an image.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.GradientCalculationMethod.Roberts">
            <summary>
            The Roberts' method, based on 2x2 convolution filters.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.GradientCalculationMethod.Prewitt">
            <summary>
            The Prewitt's method, based on 3x3 convolution filters.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.GradientCalculationMethod.Sobel">
            <summary>
            The Sobel's method, based on 3x3 convolution filters.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.GradientCalculationMethod.Ando5x5">
            <summary>
            The Sobel's method, based on 5x5 convolution filters.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.GradientCalculation">
             <summary>
             This algorithms produces separate measurements of the gradient component of an image in each orientation (X and Y). 
             These measurements can then be combined together to find the magnitude and the angle of the gradient at each pixel.
             </summary>
            <example>
            The following code example performs the following actions:
            <list type="bullet">
            <item>
            <description>This code example performs the following actions:</description>
            </item>
            <item>
            <description>Reads a gray image from file.</description>
            </item>
            <item>
            <description>Creates a new instance of the GradientCalculation class using Prewitt operator.</description>
            </item>
            <item>
            <description>Executes the GradientCalculation operation.</description>
            </item>
            <item>
            <description>Saves the gradient in X coordinate in a image of int.</description>
            </item>
            <item>
            <description>Saves the gradient in Y coordinate in a image of int.</description>
            </item>
            <item>
            <description>Saves the 2 images in 2 new file.</description>
            </item>
            </list>
            <code>
            using System;
            using BioLab.ImageProcessing;
            
            namespace Examples
            {
                class Program
                {
                    static void Main()
                    {
                        Image&lt;byte&gt; image = ImageBase.LoadFromFile(@"C:\images\original.jpg").ToByteImage();
                        GradientCalculation operation = new GradientCalculation(image, GradientCalculationMethod.Prewitt);
                        operation.Run();
                        Image&lt;int&gt; resultX = operation.GradientX;
                        Image&lt;int&gt; resultY = operation.GradientY;
                        resultX.SaveToFile(@"C:\images\resultX.jpg");
                        resultY.SaveToFile(@"C:\images\resultY.jpg");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:BioLab.ImageProcessing.GradientCalculation.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.GradientCalculationMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.GradientCalculation"/> class and allows to specify the input image and the calculation method.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="method">The gradient computation method.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.GradientCalculation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.GradientCalculation"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.GradientCalculation.CalculateAngles">
            <summary>
            Calculates the angle of the gradient, for each pixel.
            </summary>
            <returns>An image of double containing the angle of the gradient for each pixel, expressed in radians.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.GradientCalculation.CalculateByteAngles">
            <summary>
            Calculates the angle of the gradient, for each pixel.
            </summary>
            <returns>An image of <see cref="T:BioLab.Math.Geometry.ByteAngle"/> containing the angle of the gradient for each pixel.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.GradientCalculation.CalculateModuli">
            <summary>
            Calculates the modulus of the gradient, for each pixel
            </summary>
            <returns>An image of double containing the modulus of the gradient for each pixel.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.GradientCalculation.CalculateIntModuli">
            <summary>
            Calculates the modulus of the gradient, for each pixel
            </summary>
            <returns>An image of int containing the modulus of the gradient for each pixel.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.GradientCalculation.Run">
            <summary>
            Calculates the gradients components.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.GradientCalculation.GradientX">
            <summary>
            Gets or sets the horizontal component of the gradient.
            </summary>
            <value>An image of integers containing the measured horizontal component of the gradient for each pixel.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.GradientCalculation.GradientY">
            <summary>
            Gets or sets the vertical component of the gradient.
            </summary>
            <value>An image of integers containing the measured vertical component of the gradient for each pixel.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.GradientCalculation.InputImage">
            <summary>
            Gets or sets the input image.
            </summary>
            <value>The input image on which the gradient has to be calculated.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.GradientCalculation.Method">
            <summary>
            Gets or sets the gradient computation method.
            </summary>
            <value>The method used to calculate the gradient..</value>
        </member>
        <member name="T:BioLab.ImageProcessing.GradientCalculationDouble">
            <summary>
            This algorithm produces separate measurements of the gradient component of an image in each orientation (X and Y). 
            These measurements can then be combined together to find the magnitude and the angle of the gradient at each pixel.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.GradientCalculationDouble.#ctor(BioLab.ImageProcessing.Image{System.Double},BioLab.ImageProcessing.GradientCalculationMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.GradientCalculationDouble"/> class and allows to specify the input image and the calculation method.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="method">The gradient computation method.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.GradientCalculationDouble.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.GradientCalculationDouble"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.GradientCalculationDouble.CalculateAngles">
            <summary>
            Calculates the angle of the gradient, for each pixel.
            </summary>
            <returns>An image of double containing the angle of the gradient for each pixel, expressed in radians.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.GradientCalculationDouble.CalculateModuli">
            <summary>
            Calculates the modulus of the gradient, for each pixel
            </summary>
            <returns>An image of double containing the modulus of the gradient for each pixel.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.GradientCalculationDouble.Run">
            <summary>
            Calculates the gradients components.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.GradientCalculationDouble.GradientX">
            <summary>
            Gets or sets the horizontal component of the gradient.
            </summary>
            <value>An image of double containing the measured horizontal component of the gradient for each pixel.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.GradientCalculationDouble.GradientY">
            <summary>
            Gets or sets the vertical component of the gradient.
            </summary>
            <value>An image of double containing the measured vertical component of the gradient for each pixel.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.GradientCalculationDouble.InputImage">
            <summary>
            Gets or sets the input image.
            </summary>
            <value>The input image on which the gradient has to be calculated.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.GradientCalculationDouble.Method">
            <summary>
            Gets or sets the gradient computation method.
            </summary>
            <value>The method used to calculate the gradient..</value>
        </member>
        <member name="T:BioLab.ImageProcessing.EdgeExtraction">
             <summary>
             Represents a basic algorithm to extract the edges of an image. It simply
             produces an image with the modulus of the gradient of the input image for each pixel.
             </summary>
            <example>
            The following code example performs the following actions:
            <list type="bullet">
            <item>
            <description>This code example performs the following actions:</description>
            </item>
            <item>
            <description>Reads a gray image from file.</description>
            </item>
            <item>
            <description>Creates a new instance of the EdgeExtraction class using Prewitt operator.</description>
            </item>
            <item>
            <description>Executes the edge extraction operation.</description>
            </item>
            <item>
            <description>Saves the output image in a new file.</description>
            </item>
            </list>
            <code>
            using System;
            using BioLab.ImageProcessing;
            
            namespace Examples
            {
                class Program
                {
                    static void Main()
                    {
                        Image&lt;byte&gt; image = ImageBase.LoadFromFile(@"C:\images\original.jpg").ToByteImage();
                        EdgeExtraction operation = new EdgeExtraction(image, GradientCalculationMethod.Prewitt);
                        Image&lt;int&gt; result = operation.Execute();
                        result.SaveToFile(@"C:\images\result.jpg");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:BioLab.ImageProcessing.EdgeExtraction.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.GradientCalculationMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.EdgeExtraction"/> class and allows to specify the input image and the method
            used to calculate the gradient.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="method">The gradient computation method.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.EdgeExtraction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.EdgeExtraction"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.EdgeExtraction.Run">
            <summary>
            Executes the edge extraction.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.EdgeExtraction.Method">
            <summary>
            Gets or sets the gradient computation method.
            </summary>
            <value>The method used to calculate the gradient..</value>
        </member>
        <member name="T:BioLab.ImageProcessing.ConvolutionFilter`1">
            <summary>
            Represents a generic square mask to be used as a filter in a digital convolution operation.
            </summary>
            <typeparam name="T">The type of the elements in the mask.</typeparam>
        </member>
        <member name="M:BioLab.ImageProcessing.ConvolutionFilter`1.#ctor(System.Int32,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ConvolutionFilter`1"/> class and allows to specify the mask size and the denominator.
            The elements of the mask are initially set to zero.
            </summary>
            <param name="size">The size.</param>
            <param name="denominator">The denominator.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ConvolutionFilter`1.#ctor(`0[],`0)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ConvolutionFilter`1"/> class and allows to specify the denominator and
            the mask elements as a linear array.
            </summary>
            <param name="values">The values.</param>
            <param name="denominator">The denominator.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ConvolutionFilter`1.CalculateConvolutionValuesAndOffsets(System.Int32,System.Int32[]@)">
            <summary>
            Calculates an optimized array of values and offsets according to the width of the image which the filter has to be applied to.
            </summary>
            <param name="targetImageWidth">Width of the target image.</param>
            <param name="offsets">The linear offsets corresponding to the array of values returned.</param>
            <returns>The array of filter values: it contains all the non-zero elements of the filter.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ConvolutionFilter`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:BioLab.ImageProcessing.ConvolutionFilter`1.Denominator">
            <summary>
            Gets or sets the denominator to be used to normalize the result of the convolution with the mask.
            </summary>
            <value>The denominator.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ConvolutionFilter`1.Size">
            <summary>
            Gets the size of the mask.
            </summary>
            <value>The size of the mask.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ConvolutionFilter`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the mask element at the specified position.
            </summary>
            <value>The mask element.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ConvolutionFilter`1.Item(System.Int32)">
            <summary>
            Gets or sets the mask element at the specified linear index.
            </summary>
            <value>The mask element.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.SeparableConvolutionFilter`1">
            <summary>
            Represents a generic separable filter for a digital convolution operation.
            </summary>
            <typeparam name="T">The type of the elements in the filter.</typeparam>
        </member>
        <member name="M:BioLab.ImageProcessing.SeparableConvolutionFilter`1.#ctor(`0[],`0[],`0)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.SeparableConvolutionFilter`1"/> class and allows to specify the filter values and 
            the denominator.
            </summary>
            <param name="xValues">The values of the horizontal filter.</param>
            <param name="yValues">The values of the vertical filter.</param>
            <param name="denominator">The denominator.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.SeparableConvolutionFilter`1.CalculateConvolutionValuesAndOffsetsX(System.Int32[]@)">
            <summary>
            Calculates an optimized array of values and offsets which the horizontal filter has to be applied to.
            </summary>
            <param name="offsets">The linear offsets corresponding to the array of values returned.</param>
            <returns>The array of filter values: it contains all the non-zero elements of the horizontal filter.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.SeparableConvolutionFilter`1.CalculateConvolutionValuesAndOffsetsY(System.Int32,System.Int32[]@)">
            <summary>
            Calculates an optimized array of values and offsets according to the width of the image which the vertical filter has to be applied to.
            </summary>
            <param name="targetImageWidth">Width of the target image.</param>
            <param name="offsets">The linear offsets corresponding to the array of values returned.</param>
            <returns>The array of filter values: it contains all the non-zero elements of the vertial filter.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.SeparableConvolutionFilter`1.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:BioLab.ImageProcessing.SeparableConvolutionFilter`1.Denominator">
            <summary>
            Gets or sets the denominator to be used to normalize the result of the convolution with the mask.
            </summary>
            <value>The denominator.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.SeparableConvolutionFilter`1.Size">
            <summary>
            Gets the size of the filter.
            </summary>
            <value>The size of the filter.</value>
        </member>
        <member name="T:BioLab.GUI.DataViewers.FeatureVectorSetViewer">
            <summary>
            Represents a DataViewer for a FeatureVectorSet. It shows the first two features of all the feature vectors as points in a 2D space.
            </summary>
        </member>
        <member name="F:BioLab.GUI.DataViewers.FeatureVectorSetViewer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.FeatureVectorSetViewer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.FeatureVectorSetViewer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.FeatureVectorSetViewer.#ctor(BioLab.Common.FeatureVectorSet)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.DataViewers.FeatureVectorSetViewer"/> class and allows to specify the FeatureVectorSet.
            </summary>
            <param name="featureVectorSet">The FeatureVectorSet to be displayed.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.FeatureVectorSetViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.DataViewers.FeatureVectorSetViewer"/> class.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.FeatureVectorSetViewer.UpdateViewer">
            <summary>
            This medhod should be called each time the <see cref="P:BioLab.GUI.DataViewers.DataViewer.Data"/> content changes and the
            user interface needs to be updated accordingly.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.FeatureVectorSetViewer.CalculateScaleFactors">
            <summary>
            Calculates the scale factors according to the feature vectors and the related properties.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.FeatureVectorSetViewer.DoPaint(System.Drawing.Graphics)">
            <summary>
            Paints the content of the data viewer into the specified Graphics.
            </summary>
            <param name="graphics">The Graphics on which to paint the contents of the viewer.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.FeatureVectorSetViewer.DevicePointToFeatures(System.Drawing.Point)">
            <summary>
            Converts a point in device coordinates in a corresponding 2-dimensional FeatureVector.
            </summary>
            <param name="point">The point to be converted.</param>
            <returns>The FeatureVector corresponding to the input point.</returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.FeatureVectorSetViewer.FeaturesToDevicePoint(BioLab.Common.FeatureVector)">
            <summary>
            Convert a FeatureVector in a poiint in device coordinates, using the first two feature values.
            </summary>
            <param name="vector">The vector to be converted.</param>
            <returns>The point in device coordinates.</returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.FeatureVectorSetViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.FeatureVectorSetViewer.OnDataChanged">
            <summary>
            Raises the DataChanged event.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.FeatureVectorSetViewer.OnDataPasted">
            <summary>
            Raises the DataPasted event.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.FeatureVectorSetViewer.Copy">
            <summary>
            Copies the current content to the clipboard.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.FeatureVectorSetViewer.Paste">
            <summary>
            Pastes the clipboard content into the viewer.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.FeatureVectorSetViewer.DrawNormalDistributionsEllipses(System.Drawing.Graphics,BioLab.Math.Probability.NormalDistribution[])">
            <summary>
            Draws the ellipses corresponding to the given normal distributions.
            </summary>
            <param name="graphics">The Graphics on which to draw the ellipses.</param>
            <param name="distributions">The normal distributions.</param>
        </member>
        <member name="P:BioLab.GUI.DataViewers.FeatureVectorSetViewer.EqualScaleFactor">
            <summary>
            Se true, i due assi hanno la stessa unità di misura
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.FeatureVectorSetViewer.CartesianCoordinates">
            <summary>
            Gets or sets the cartesian coordinates system]
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.FeatureVectorSetViewer.FeatureVectorSet">
            <summary>
            Gets or sets the data as a BioLab.Common.FeatureVectorSet
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.FeatureVectorSetViewer.FixedLayout">
            <summary>
            Gets or sets a value indicating whether the scale of the two axes is fixed.
            When the layout is fixed, properties FixedLayoutX1, FixedLayoutX2, FixedLayoutY1, FixedLayoutY2 are used to
            calculate the scale factors.
            </summary>
            <value><c>true</c> if the layout is fixed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BioLab.GUI.DataViewers.FeatureVectorSetViewer.FixedLayoutX1">
            <summary>
            Gets or sets the leftmost coordinate of the horizontal axis: this property
            is used only then FixedLayout is true.
            </summary>
            <value>The value of the leftmost coordinate of the horizontal axis.</value>
        </member>
        <member name="P:BioLab.GUI.DataViewers.FeatureVectorSetViewer.FixedLayoutX2">
            <summary>
            Gets or sets the rightmost coordinate of the horizontal axis: this property
            is used only then FixedLayout is true.
            </summary>
            <value>The value of the rightmost coordinate of the horizontal axis.</value>
        </member>
        <member name="P:BioLab.GUI.DataViewers.FeatureVectorSetViewer.FixedLayoutY1">
            <summary>
            Gets or sets the bottommost coordinate of the horizontal axis: this property
            is used only then FixedLayout is true.
            </summary>
            <value>The value of the bottommost coordinate of the horizontal axis.</value>       
        </member>
        <member name="P:BioLab.GUI.DataViewers.FeatureVectorSetViewer.FixedLayoutY2">
            <summary>
            Gets or sets the topmost coordinate of the horizontal axis: this property
            is used only then FixedLayout is true.
            </summary>
            <value>The value of the topmost coordinate of the horizontal axis.</value>
        </member>
        <member name="P:BioLab.GUI.DataViewers.FeatureVectorSetViewer.ShowAxes">
            <summary>
            Gets or sets a value indicating whether the cartesian axes should be displayed.
            </summary>
            <value><c>true</c> if the axes are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BioLab.GUI.DataViewers.FeatureVectorSetViewer.ShowVectorDescriptions">
            <summary>
            Gets or sets a value indicating whether the description of each feature vector is displayed.
            </summary>
            <value><c>true</c> if vector descriptions are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BioLab.GUI.DataViewers.FeatureVectorSetViewer.ShowPoints">
            <summary>
            Gets or sets a value indicating whether the feature vector are displayed.
            </summary>
            <value><c>true</c> if vectors are displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BioLab.GUI.DataViewers.FeatureVectorSetViewer.CanCopy">
            <summary>
            True if the current content can be copied to the clipboard.
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.FeatureVectorSetViewer.CanPaste">
            <summary>
            True if the current clipboard content can be pasted into the viewer.
            </summary>
        </member>
        <member name="E:BioLab.GUI.DataViewers.FeatureVectorSetViewer.DataPasted">
            <summary>
            Occurs when a successful paste operation changed the data.
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.FeatureVectorSetViewer.EditModeEnabled">
            <summary>
            True if it is currently possible to enable the Edit Mode.
            </summary>
            <value></value>
        </member>
        <member name="P:BioLab.GUI.DataViewers.FeatureVectorSetViewer.EditMode">
            <summary>
            Gets or sets a value indicating whether the edit mode is enabled.
            </summary>
            <value>
            	<c>true</c> if the edit mode is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:BioLab.GUI.DataViewers.FeatureVectorSetViewer.DataChanged">
            <summary>
            Occurs when an edit operation changed any of the data.
            </summary>
        </member>
        <member name="T:BioLab.Math.LinearAlgebra.Vector">
            <summary>
            Class that represents a Vector
            </summary>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.#ctor(System.Int32)">
            <summary> Create a simple vector.</summary>
            <param name="size">The number of elements.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.#ctor(System.Int32,System.Double)">
            <summary> Create a vector initialized to a value.</summary>
            <param name="size">The number of elements.</param>
            <param name="value">Initial value.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.#ctor(System.Double[])">
            <summary> Create a vector from an array.</summary>
            <param name="source">The array.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.#ctor(System.IntPtr,System.Int32)">
            <summary> Create a vector from an unmanaged memory pointer.</summary>
            <param name="source">The unmanaged memory pointer.</param>
            <param name="size">The number of elements.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.isZero">
            <summary>
            Determines whether this instance is a zero vector.
            </summary>
            <returns>
            	<c>true</c> if this instance is a zero vector otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ComputeInfinityNorm">
            <returns>The infinity norm of this vector (the maximum absolute value of the vector).</returns>  
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ComputeL1Norm">
            <summary>Calculates the L1 norm of this vector (sum of absolute values).</summary>
            <returns>The L1 norm of this vector.</returns>        
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ComputeL2Norm">
            <summary>Calculates the L2 norm of this vector (squared root of the sum of the squared values).</summary>
            <returns>The L2 norm of this vector.</returns>        
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ComputeAbsoluteMaximum">
            <summary>Returns the value of the absolute maximum element.</summary>
            <returns>The value of the absolute maximum element.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ComputeAbsoluteMaximumIndex">
            <summary>Returns the index of the absolute maximum element.</summary>
            <returns>The index of absolute maximum element.</returns>        
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ComputeAbsoluteMinimum">
            <summary>Returns the value of the absolute minimum element.</summary>
            <returns>The value of the absolute minimum element.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ComputeAbsoluteMinimumIndex">
            <summary>Returns the index of the absolute minimum element.</summary>
            <returns>The index of absolute minimum element.</returns>        
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ComputeMaximum">
            <summary>Returns the value of maximum element.</summary>
            <returns>The value of maximum element.</returns>        
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ComputeMaximumIndex">
            <summary>Returns the index of the absolute maximum element.</summary>
            <returns>The index of absolute maximum element.</returns>          
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ComputeMinimum">
            <summary>Returns the value of the minimum element.</summary>
            <returns>The value of the minimum element.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ComputeMinimumIndex">
            <summary>Returns the index of the minimum element.</summary>
            <returns>The index of minimum element.</returns>  
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.Clear">
            <summary>Sets the each element to zero.</summary>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.CopyTo(BioLab.Math.LinearAlgebra.Vector)">
            <summary>Copies the values of this vector into the target vector.</summary>
            <param name="other">The vector to copy elements into.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ComputeDotProduct">
            <summary>Computes the dot product of this vector with itself.</summary>
            <returns>The dot product of this vector and itself.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ComputeDotProduct(BioLab.Math.LinearAlgebra.Vector)">
            <summary>Computes the dot product of this vector with another.</summary>
            <param name="other">The vector to compute the dot product with.</param>
            <returns>The dot product of this vector and other.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.SumElements">
            <summary>Computes the sum of the elements of this vector.</summary>
            <returns>The sum of the elements of this vector.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.SumAbsoluteElements">
            <summary>Computes the sum of the absolute value of the elements of this vector.</summary>
            <returns>The sum of the absolute value of the elements of this vector.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.Swap(BioLab.Math.LinearAlgebra.Vector)">
            <summary>Swaps the values of this vector with another vector.</summary>
            <param name="other">The vector to swap data with.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ToArray">
            <summary>Returns the data contained in the vector as an array.</summary>
            <returns>The data as an array.</returns>        
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.SetValues(System.Double[])">
            <summary>Set the values of this vector to the given values.</summary>
            <param name="values">The array containing the values to use.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.SetValues(BioLab.Math.LinearAlgebra.Vector)">
            <summary>Set the values of this vector to the given values.</summary>
            <param name="values">The Vector containing the values to use.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.Clone">
            <summary>Returns a deep-copy clone of the <b>Vector</b>.</summary>
            <returns>A deep-copy clone of the <b>Vector</b>.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.InternalClone">
            <summary>Returns a deep-copy clone of the <b>Vector</b>.</summary>
            <returns>A deep-copy clone of the <b>Vector</b>.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ToString">
            <summary>Returns a <seealso cref="T:System.String"/> representation of this vector.</summary>
            <returns>A string representation of this vector.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ToString(System.String)">
            <summary>Returns a <seealso cref="T:System.String"/> representation of this vector using the given format.</summary>
            <param name="format">The format to use.</param>
            <returns>A string representation of this vector.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ToString(System.IFormatProvider)">
            <summary>Returns a <seealso cref="T:System.String"/> representation of this vector using the given <seealso cref="T:System.IFormatProvider"/>.</summary>
            <param name="formatProvider">The format provider to use.</param>
            <returns>A string representation of this vector.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ToString(System.String,System.IFormatProvider)">
            <summary>A string representation of this vector.</summary>
            <param name="format">A format specification.</param>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <returns>The string representation of the value of <b>this</b> instance as specified by format and provider.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.Negate">
            <summary>Negates the values of this vector.</summary>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.Add(System.Double)">
            <summary>Adds a scalar to each element of the vector.</summary>
            <param name="scalar">The scalar to add.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.Add(BioLab.Math.LinearAlgebra.Vector)">
            <summary>Adds another vector to this vector.</summary>
            <param name="other">The vector to add to this one.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.Subtract(System.Double)">
            <summary>Subtracts a scalar from each element of the vector.</summary>
            <param name="scalar">The scalar to subtract.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.Subtract(BioLab.Math.LinearAlgebra.Vector)">
            <summary>Subtracts another vector from this vector.</summary>
            <param name="other">The vector to subtract from this one.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.Divide(System.Double)">
            <summary>Divides this vector by scalar.</summary>
            <param name="scalar">The scalar to divide this vector by.</param>
            <exception cref="T:System.DivideByZeroException">If the scalar is zero.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.Multiply(System.Double)">
            <summary>Multiplies this vector by scalar.</summary>
            <param name="scalar">The scalar to multiply this vector with.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.Multiply(BioLab.Math.LinearAlgebra.Vector)">
            <summary>Multiplies this vector column with another vector row and returns the resulting matrix.</summary>
            <param name="rightSide">The vector to multiply the vector with.</param>
            <exception cref="T:System.ArgumentNullException">If leftSide is <b>null</b>.</exception> 
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.GetSubVector(System.Int32,System.Int32)">
            <summary>
            Gets the sub vector.
            </summary>
            <param name="startIndex">The start index (from 0 to n-1).</param>
            <param name="endIndex">The end index (from 0 to n-1).</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.op_Equality(BioLab.Math.LinearAlgebra.Vector,BioLab.Math.LinearAlgebra.Vector)">
            <summary>
            Determines whether the elements of the specified vectors are equal.
            </summary>
            <param name="vector1">The first vector to compare.</param>
            <param name="vector2">The secont vector to compare.</param>
            <returns>
            true to indicate the two vectors are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.op_Inequality(BioLab.Math.LinearAlgebra.Vector,BioLab.Math.LinearAlgebra.Vector)">
            <summary>
            Determines whether the elements of the specified vectors are not equal.
            </summary>
            <param name="vector1">The first vector to compare.</param>
            <param name="vector2">The secont vector to compare.</param>
            <returns>
            true to indicate the two vectors are not equal; otherwise, false.
            </returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.Equals(System.Object)">
            <summary>Compares two vectors for equality.</summary>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.Equals(BioLab.Math.LinearAlgebra.Vector)">
            <summary>Compares two vectors for equality by checking that corresponding vector entries are exactly equal.</summary>
            <returns>True if the two Vectors are equal, false otherwise.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.GetHashCode">
            <summary>Serves as a hash function for a particular type.</summary>
            <returns>A hash code for the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.SaveToStream(System.IO.Stream)">
            <summary>Saves the current <see cref="T:BioLab.Math.LinearAlgebra.Vector"/> to a specified <see cref="T:System.IO.Stream"/>.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.Math.LinearAlgebra.Vector"/> will be saved.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.LoadFromFile(System.String)">
            <summary>Creates a <see cref="T:BioLab.Math.LinearAlgebra.Vector"/> from the specified file.</summary>
            <param name="path">A string that contains the name of the file from which to create the <see cref="T:BioLab.Math.LinearAlgebra.Vector"/>.</param>
            <returns>
            The <see cref="T:BioLab.Math.LinearAlgebra.Vector"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.LoadFromStream(System.IO.Stream)">
            <summary>Creates a <see cref="T:BioLab.Math.LinearAlgebra.Vector"/> from the specified data stream.</summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> that contains the data for this <see cref="T:BioLab.Math.LinearAlgebra.Vector"/>.
            </param>
            <returns>
            The <see cref="T:BioLab.Math.LinearAlgebra.Vector"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ComputeSquareEuclideanDistance(BioLab.Math.LinearAlgebra.Vector,BioLab.Math.LinearAlgebra.Vector)">
            <summary>
            Calculates the square Euclidean distance, between two <see cref="T:BioLab.Math.LinearAlgebra.Vector"/>.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The square Euclidean distance between the two <see cref="T:BioLab.Math.LinearAlgebra.Vector"/>.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.ComputeEuclideanDistance(BioLab.Math.LinearAlgebra.Vector,BioLab.Math.LinearAlgebra.Vector)">
            <summary>
            Calculates the Euclidean distance between the two <see cref="T:BioLab.Math.LinearAlgebra.Vector"/>.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <returns>The Euclidean distance between the two <see cref="T:BioLab.Math.LinearAlgebra.Vector"/>.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.op_UnaryPlus(BioLab.Math.LinearAlgebra.Vector)">
            <summary>Returns a <b>Vector</b> containing the same values of rightSide.</summary>
            <remarks>This method is included for completeness.</remarks>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <b>null</b>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.op_Addition(BioLab.Math.LinearAlgebra.Vector,BioLab.Math.LinearAlgebra.Vector)">
            <summary>Adds two <b>Vectors</b> together and returns the results.</summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">One of the vectors to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <b>null</b>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.op_Addition(BioLab.Math.LinearAlgebra.Vector,System.Double)">
            <summary>Add a scalar to a <b>Vector</b> and return the Vector result.</summary>
            <param name="leftSide">The vector.</param>
            <param name="scalar">The scalar to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is null.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.op_Addition(System.Double,BioLab.Math.LinearAlgebra.Vector)">
            <summary>Add a scalar to a <b>Vector</b> and return the Vector result.</summary>
            <param name="scalar">The vector.</param>
            <param name="rightSide">The scalar to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <b>null</b>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.op_UnaryNegation(BioLab.Math.LinearAlgebra.Vector)">
            <summary>Negates each element of the vector.</summary>
            <param name="rightSide">The vector to negate.</param>
            <returns>A vector containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <b>null</b>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.op_Subtraction(BioLab.Math.LinearAlgebra.Vector,BioLab.Math.LinearAlgebra.Vector)">
            <summary>Subtracts two vectors and returns the results.</summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <b>null</b>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.op_Subtraction(BioLab.Math.LinearAlgebra.Vector,System.Double)">
            <summary>Subtracts a scalar to a vector and return the result.</summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="scalar">The scalar.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <b>null</b>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.op_Division(BioLab.Math.LinearAlgebra.Vector,System.Double)">
            <summary>Divides a <b>Vector</b> by a constant and returns the result.</summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="scalar">The constant to divide the vector by.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <b>null</b>.</exception>
            <exception cref="T:System.DivideByZeroException">If <paramref name="scalar"/> is zero.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.op_Multiply(System.Double,BioLab.Math.LinearAlgebra.Vector)">
            <summary>Multiplies a <b>Vector</b> by a constant and returns the result.</summary>
            <param name="scalar">The scalar.</param>
            <param name="rightSide">The vector.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <b>null</b>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.op_Multiply(BioLab.Math.LinearAlgebra.Vector,System.Double)">
            <summary>Multiplies a <b>Vector</b> by a constant and returns the result.</summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="scalar">The constant to multiply the vector by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <b>null</b>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Vector.op_Multiply(BioLab.Math.LinearAlgebra.Vector,BioLab.Math.LinearAlgebra.Vector)">
            <summary>Multiples two <b>Vectors</b>. The first vector is treated as column vector and the second as row vector.</summary>
            <param name="leftSide">One of the vectors to multiply.</param>
            <param name="rightSide">One of the vectors to multiply.</param>
            <returns>The Matrix result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <b>null</b>.</exception>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.Vector.Item(System.Int32)">
            <summary>
            Set or get an element of the vector.
            </summary>
            <param name="index">The index of the element.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the index is outside the 
            the dimensions of the vector.</exception>
            <returns>A specific element in the vector.</returns>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.Vector.Count">
            <summary>
            The number of elements in this vector.
            </summary>
            <returns>The number of elements.</returns>
        </member>
        <member name="T:BioLab.ImageProcessing.NamespaceDoc">
            <summary>
            Provides digital image processing functionalities.
            </summary>
        </member>
        <member name="F:BioLab.GUI.UserControls.DefaultAlgorithmInputOuputControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.UserControls.DefaultAlgorithmInputOuputControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.UserControls.DefaultAlgorithmInputOuputControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BioLab.GUI.Common.WaitCursor">
            <summary>
            Utility class to display the wait cursor during time-consuming operations.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Common.WaitCursor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.Common.WaitCursor"/> class: the wait cursor is shown.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Common.WaitCursor.Dispose">
            <summary>
            Returns to the previous cursor.
            </summary>
        </member>
        <member name="T:BioLab.Math.Probability.ProbabilityDistribution">
            <summary>
            Generic Probability Distribution
            </summary>
        </member>
        <member name="M:BioLab.Math.Probability.ProbabilityDistribution.CalculateDensity(BioLab.Math.LinearAlgebra.Vector)">
            <summary>
            Calculates the probability density of an input vector.
            </summary>
            <param name="x">The input vector.</param>
            <returns>
            The value of the probability density in x.
            </returns>
        </member>
        <member name="M:BioLab.Math.Probability.ProbabilityDistribution.CalculateDensity(BioLab.Common.FeatureVector)">
            <summary>
            Calculates the probability density of an input vector.
            </summary>
            <param name="vector">The input vector.</param>
            <returns>
            The corresponding value of the probability density.
            </returns>
        </member>
        <member name="T:BioLab.Math.Probability.NormalDistribution">
            <summary>
            Represents a Normal Distribution
            </summary>
        </member>
        <member name="M:BioLab.Math.Probability.NormalDistribution.CalculateDensity(BioLab.Math.LinearAlgebra.Vector)">
            <summary>
            Compute the probability density
            </summary>
        </member>
        <member name="M:BioLab.Math.Probability.NormalDistribution.PreCalculateData">
            <summary>
            To call if mean or covariance are modified
            </summary>
        </member>
        <member name="M:BioLab.Math.Probability.NormalDistribution.InternalClone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:BioLab.Math.Probability.NormalDistribution.CalculateKullbackLeiblerDivergence(BioLab.Math.Probability.NormalDistribution,BioLab.Math.Probability.NormalDistribution)">
            <summary>
            Calculates the kullback leibler divergence.
            </summary>
            <param name="aNormDist">A normal distribution.</param>
            <param name="bNormDist">A normal distribution.</param>
            <returns></returns>
        </member>
        <member name="M:BioLab.Math.Probability.NormalDistribution.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the current <see cref="T:BioLab.Common.Data"/> to a specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.Common.Data"/> will be saved.</param>
        </member>
        <member name="M:BioLab.Math.Probability.NormalDistribution.LoadFromStream(System.IO.Stream)">
            <summary>
            Creates a <see cref="T:BioLab.Math.Probability.NormalDistribution"/> from the specified data stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the data for this <see cref="T:BioLab.Math.Probability.NormalDistribution"/>.
            </param>
            <returns>
            The <see cref="T:BioLab.Math.Probability.NormalDistribution"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.Math.Probability.NormalDistribution.LoadFromFile(System.String)">
            <summary>
            Creates a <see cref="T:BioLab.Math.Probability.NormalDistribution"/> from the specified file.
            </summary>
            <param name="fileName">A string that contains the name of the file from which to create the <see cref="T:BioLab.Math.Probability.NormalDistribution"/>.</param>
            <returns>
            The <see cref="T:BioLab.Math.Probability.NormalDistribution"/> this method creates.
            </returns>
        </member>
        <member name="P:BioLab.Math.Probability.NormalDistribution.Mean">
            <summary>
            Mean vector
            </summary>
        </member>
        <member name="P:BioLab.Math.Probability.NormalDistribution.Covariance">
            <summary>
            Covariance matrix
            </summary>
        </member>
        <member name="P:BioLab.Math.Probability.NormalDistribution.Invalid">
            <summary>
            True if the covariance matrix became singular
            </summary>
            <value><c>true</c> if the distribution is invalid; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BioLab.Math.Probability.NormalMixtureDistribution">
            <summary>
            Mixture of normal distributions
            </summary>
        </member>
        <member name="F:BioLab.Math.Probability.NormalMixtureDistribution.Alfa">
            <summary>
            Mixing coefficients
            </summary>
        </member>
        <member name="F:BioLab.Math.Probability.NormalMixtureDistribution.Theta">
            <summary>
            Normal distributions involved
            </summary>
        </member>
        <member name="M:BioLab.Math.Probability.NormalMixtureDistribution.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Probability.NormalMixtureDistribution"/> class.
            </summary>
            <param name="count">Number of distributions involved.</param>
        </member>
        <member name="M:BioLab.Math.Probability.NormalMixtureDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Probability.NormalMixtureDistribution"/> class.
            </summary>
        </member>
        <member name="M:BioLab.Math.Probability.NormalMixtureDistribution.CalculateDensity(BioLab.Math.LinearAlgebra.Vector)">
            <summary>
            Calculates the probability density of an input vector.
            </summary>
            <param name="x">The input vector.</param>
            <returns>
            The value of the probability density in x.
            </returns>
        </member>
        <member name="M:BioLab.Math.Probability.NormalMixtureDistribution.InternalClone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:BioLab.Math.Probability.NormalMixtureDistribution.Merge(System.Int32,System.Int32)">
            <summary>
            Merges two normal distributions of the mixture into a single distribution.
            </summary>
            <param name="i">The index of the first distribution to be merged.</param>
            <param name="j">The index of the second distribution to be merged.</param>
            <returns>A new instance where the two distribution have been merged.</returns>
        </member>
        <member name="M:BioLab.Math.Probability.NormalMixtureDistribution.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the current <see cref="T:BioLab.Math.Probability.NormalMixtureDistribution"/> to a specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.Math.Probability.NormalMixtureDistribution"/> will be saved.</param>
        </member>
        <member name="M:BioLab.Math.Probability.NormalMixtureDistribution.LoadFromStream(System.IO.Stream)">
            <summary>
            Creates a <see cref="T:BioLab.Math.Probability.NormalMixtureDistribution"/> from the specified data stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the data for this <see cref="T:BioLab.Math.Probability.NormalMixtureDistribution"/>.
            </param>
            <returns>
            The <see cref="T:BioLab.Math.Probability.NormalMixtureDistribution"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.Math.Probability.NormalMixtureDistribution.LoadFromFile(System.String)">
            <summary>
            Creates a <see cref="T:BioLab.Math.Probability.NormalMixtureDistribution"/> from the specified file.
            </summary>
            <param name="fileName">A string that contains the name of the file from which to create the <see cref="T:BioLab.Math.Probability.NormalMixtureDistribution"/>.</param>
            <returns>
            The <see cref="T:BioLab.Math.Probability.NormalMixtureDistribution"/> this method creates.
            </returns>
        </member>
        <member name="P:BioLab.Math.Probability.NormalMixtureDistribution.Count">
            <summary>
            Gets the number of distributions.
            </summary>
            <value>The number of distributions.</value>
        </member>
        <member name="T:BioLab.PatternRecognition.Localization.HoughCircleDetectionMethods">
            <summary>
            Specifies which kind of circles should be detected by a <see cref="T:BioLab.PatternRecognition.Localization.HoughCircleDetector"/>.
            </summary>
        </member>
        <member name="F:BioLab.PatternRecognition.Localization.HoughCircleDetectionMethods.DarkerCircles">
            <summary>
            Detects circles darker than the background.
            </summary>
        </member>
        <member name="F:BioLab.PatternRecognition.Localization.HoughCircleDetectionMethods.LighterCircles">
            <summary>
            Detects circles lighter than the background.
            </summary>
        </member>
        <member name="F:BioLab.PatternRecognition.Localization.HoughCircleDetectionMethods.Both">
            <summary>
            Detect both darker and lighter circles.
            </summary>
        </member>
        <member name="T:BioLab.PatternRecognition.Localization.HoughCircleDetector">
            <summary>
            Performs a Hough transform to detect circles in a grayscale image.
            The <see cref="M:HoughCircleDetector.Result"/> property stores a score for each pixel: the higher the score, the more likely 
            exists a circle centered on that pixel.
            </summary>
        </member>
        <member name="M:BioLab.PatternRecognition.Localization.HoughCircleDetector.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.PatternRecognition.Localization.HoughCircleDetector"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="minRadius">The minimum radius of the circles.</param>
            <param name="maxRadius">The maximum radius of the circles.</param>
        </member>
        <member name="M:BioLab.PatternRecognition.Localization.HoughCircleDetector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.PatternRecognition.Localization.HoughCircleDetector"/> class.
            </summary>
        </member>
        <member name="M:BioLab.PatternRecognition.Localization.HoughCircleDetector.Run">
            <summary>
            Executes the Hough transform.
            </summary>
        </member>
        <member name="P:BioLab.PatternRecognition.Localization.HoughCircleDetector.MinRadius">
            <summary>
            Gets or sets the minimum radius of the circles to be detected.
            </summary>
            <value>The minimum radius, in pixels.</value>
        </member>
        <member name="P:BioLab.PatternRecognition.Localization.HoughCircleDetector.MaxRadius">
            <summary>
            Gets or sets the maximum radius of the circles to be detected.
            </summary>
            <value>The maximum radius, in pixels.</value>
        </member>
        <member name="P:BioLab.PatternRecognition.Localization.HoughCircleDetector.MinModulus">
            <summary>
            Gets or sets the minimum value for a gradient modulus to vote in the transform.
            </summary>
            <value>The minimum modulus for a gradient to be considered.</value>
        </member>
        <member name="P:BioLab.PatternRecognition.Localization.HoughCircleDetector.DetectionMethod">
            <summary>
            Gets or sets the circle detection method.
            </summary>
            <value>The detection method.</value>
        </member>
        <member name="P:BioLab.PatternRecognition.Localization.HoughCircleDetector.GradientCalculationMethod">
            <summary>
            Gets or sets the gradient calculation method.
            </summary>
            <value>The gradient calculation method.</value>
        </member>
        <member name="P:BioLab.PatternRecognition.Localization.HoughCircleDetector.OrientationTolerance">
            <summary>
            Gets or sets the gradient orientation tolerance, in radians.
            </summary>
            <value>The orientation tolerance.</value>
        </member>
        <member name="P:BioLab.PatternRecognition.Localization.HoughCircleDetector.GradientModuli">
            <summary>
            Gets the modulus of the gradient for each pixel.
            </summary>
            <value>The gradient moduli.</value>
        </member>
        <member name="T:BioLab.PatternRecognition.Localization.HoughLineParameters">
            <summary>
            Represents the structure of the parameters ro and theta of the matrix A and the corresponding value
            </summary>
        </member>
        <member name="M:BioLab.PatternRecognition.Localization.HoughLineParameters.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Represents the constructor of the class HoughLineParameters
            </summary>
            <param name="value">The corresponding value of the matrix A in position theta ro.</param>
            <param name="theta">The corresponding value of theta.</param>
            <param name="ro">The corresponding value of ro.</param>
        </member>
        <member name="M:BioLab.PatternRecognition.Localization.HoughLineParameters.CompareTo(BioLab.PatternRecognition.Localization.HoughLineParameters)">
            <summary>
            it is the method for sorting the values of the matrix A to obtain the best lines
            </summary>
        </member>
        <member name="P:BioLab.PatternRecognition.Localization.HoughLineParameters.Value">
            <value>The corresponding value of the matrix A in position theta ro.</value>
        </member>
        <member name="P:BioLab.PatternRecognition.Localization.HoughLineParameters.Ro">
            <value>The corresponding value of ro.</value>
        </member>
        <member name="P:BioLab.PatternRecognition.Localization.HoughLineParameters.Theta">
            <value>The corresponding value of theta.</value>
        </member>
        <member name="T:BioLab.PatternRecognition.Localization.HoughLinesDetector">
            <summary>
            Performs a Hough transform to detect lines in a grayscale image.
            </summary>
        </member>
        <member name="M:BioLab.PatternRecognition.Localization.HoughLinesDetector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.PatternRecognition.Localization.HoughLinesDetector"/> class.
            </summary>
        </member>
        <member name="M:BioLab.PatternRecognition.Localization.HoughLinesDetector.#ctor(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.PatternRecognition.Localization.HoughLinesDetector"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.PatternRecognition.Localization.HoughLinesDetector.Run">
            <summary>
            Executes the Hough transform.
            </summary>
        </member>
        <member name="P:BioLab.PatternRecognition.Localization.HoughLinesDetector.NumberOfLines">
            <summary>
            Indicates the number of line to detect.
            </summary>
            <value>The number of line to detect</value>
        </member>
        <member name="T:BioLab.ImageProcessing.GaussianFilter">
            <summary>
            Provides static method to create 1-D Gaussian convolution masks.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.GaussianFilter.Create(System.Double,System.Int32)">
            <summary>
            Creates a Gaussian mask with the specified sigma.
            </summary>
            <param name="sigma">The sigma value.</param>
            <param name="size">The size of the mask.</param>
            <returns>The mask stored as an array of double values.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.GaussianFilter.Create(System.Double,System.Int32,System.Int32@)">
            <summary>
            Creates an integer Gaussian mask with the specified sigma.
            </summary>
            <param name="sigma">The sigma value.</param>
            <param name="size">The size of the mask.</param>
            <param name="denominator">The denominator that can be used to normalize the result after convolving with the mask.</param>
            <returns>
            The mask stored as an array of integer values.
            </returns>
        </member>
        <member name="F:BioLab.GUI.UserControls.HistogramThresholdSelector.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.UserControls.HistogramThresholdSelector.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.UserControls.HistogramThresholdSelector.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:BioLab.GUI.DataViewers.MultipleDataViewer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.MultipleDataViewer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.MultipleDataViewer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:BioLab.GUI.DataViewers.ComplexImageViewer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ComplexImageViewer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ComplexImageViewer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BioLab.Math.Constants">
            <summary>
            Provides common mathematical constants.
            </summary>
        </member>
        <member name="F:BioLab.Math.Constants.DoublePI">
            <summary>
            Represents 2*π.
            </summary>
        </member>
        <member name="F:BioLab.Math.Constants.PI">
            <summary>
            Represents π.
            </summary>
        </member>
        <member name="F:BioLab.Math.Constants.HalfPI">
            <summary>
            Represents π/2.
            </summary>
        </member>
        <member name="F:BioLab.Math.Constants.QuarterPI">
            <summary>
            Represents π/4.
            </summary>
        </member>
        <member name="F:BioLab.Math.Constants.ThreeQuarterPI">
            <summary>
            Represents 3*π/4.
            </summary>
        </member>
        <member name="F:BioLab.Math.Constants.Sqrt2">
            <summary>
            Represents the square root of 2.
            </summary>
        </member>
        <member name="T:BioLab.Classification.Supervised.NamespaceDoc">
            <summary>
            Provides supervised classifiers.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.ImageFormats.FormatConverter">
            <summary>
            Provides static methods to read and convert image file formats.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageFormats.FormatConverter.AddFormatProvider(BioLab.ImageProcessing.ImageFormats.IImageFormatProvider)">
            <summary>
            Adds a custom bitmap format provider
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageFormats.FormatConverter.BitmapToImage(System.Drawing.Bitmap)">
            <summary>
            Converts a <see cref="T:System.Drawing.Bitmap"/> to an appropriate class derived from <see cref="T:BioLab.ImageProcessing.ImageBase"/>.
            </summary>
            <param name="bitmap">The <see cref="T:System.Drawing.Bitmap"/> to be converted.</param>
            <returns>A <see cref="T:BioLab.ImageProcessing.ImageBase"/> containing the pixel values in the input Bitmap.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageFormats.FormatConverter.ConvertImageFromClipboard">
            <summary>
            Copies the content of the clipboard to a new image.
            </summary>
            <returns>null if the clipboard does not contain an image or cannot be accessed; otherwise the image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageFormats.FormatConverter.ImageToBitmap(BioLab.ImageProcessing.ImageBase)">
            <summary>
            Converts a <see cref="T:BioLab.ImageProcessing.ImageBase"/> to a <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <param name="image">The input image.</param>
            <returns>An instance of the <see cref="T:System.Drawing.Bitmap"/> class.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageFormats.FormatConverter.LoadFromFile(System.String)">
            <summary>
            Creates an image from the specified file.
            </summary>
            <param name="path">A string that contains the name of the file from which to create the image.</param>
            <returns>
            The <see cref="T:BioLab.ImageProcessing.ImageBase"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageFormats.FormatConverter.LoadFromStream(System.IO.Stream)">
            <summary>
            Creates an image from the specified data stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the data for the image.
            </param>
            <returns>
            The <see cref="T:BioLab.ImageProcessing.ImageBase"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageFormats.FormatConverter.LoadFromStream(System.IO.Stream,System.String)">
            <summary>
            Creates an image from the specified data stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the data for the image.
            </param>
            <param name="fileExtension">The extension (e.g. ".bmp") which is used to guess the image file format.</param>
            <returns>
            The <see cref="T:BioLab.ImageProcessing.ImageBase"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageFormats.FormatConverter.RemoveFormatProvider(BioLab.ImageProcessing.ImageFormats.IImageFormatProvider)">
            <summary>
            Removes a custom bitmap format provider
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageFormats.FormatConverter.SaveToFile(BioLab.ImageProcessing.ImageBase,System.String)">
            <summary>
            Saves a given image to a file. The file format (e.g. bmp or png) used to save the file
            is chosen according to the extension specified in the file path.
            </summary>
            <param name="image">The image to be saved.</param>
            <param name="path">The path of the output file.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageFormats.FormatConverter.SaveToFile(System.Drawing.Bitmap,System.String)">
            <summary>
            Saves a given Bitmap to a file. The file format (e.g. bmp or png) used to save the file
            is chosen according to the extension specified in the file path.
            </summary>
            <param name="bitmap">The Bitmap to be saved.</param>
            <param name="path">The path of the output file.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageFormats.FormatConverter.SaveToStream(BioLab.ImageProcessing.ImageBase,System.IO.Stream)">
            <summary>
            Saves a given image to a specified Stream using the default file format.
            </summary>
            <param name="image">The image to be saved.</param>
            <param name="stream">The stream where the image data will be saved.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageFormats.FormatConverter.SaveToStream(BioLab.ImageProcessing.ImageBase,System.IO.Stream,System.String)">
            <summary>
            Saves a given image to a specified Stream using the file format corresponding to a specified file extension.
            </summary>
            <param name="image">The image to be saved.</param>
            <param name="stream">The stream where the image data will be saved.</param>
            <param name="fileExtension">The file extension according to which the file format is selected.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageFormats.FormatConverter.ToClipboard(BioLab.ImageProcessing.ImageBase)">
            <summary>
            Copies the contents of a given image to the system clipboard.
            </summary>
            <param name="image">The image to be copied.</param>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageFormats.FormatConverter.CheckForGrayScaleImages">
            <summary>
            Gets or sets a value indicating whether when loading an image, the pixels shall be checked to detect if it is a grayscale image.
            </summary>
            <value>
            	<c>true</c> if, when loading an image, the pixels are checked to detect if it is a grayscale image; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:BioLab.ImageProcessing.ImageFormats.IImageFormatProvider">
            <summary>
            Interface to extend FormatConverter by allowing new image formats to be read/written
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageFormats.IImageFormatProvider.LoadImageFromStream(System.IO.Stream)">
            <summary>
            Reads an image from a stream
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageFormats.IImageFormatProvider.LoadBitmapFromStream(System.IO.Stream)">
            <summary>
            Reads a bitmap from a stream
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageFormats.IImageFormatProvider.SaveToStream(BioLab.ImageProcessing.ImageBase,System.IO.Stream)">
            <summary>
            Writes an image to a stream
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageFormats.IImageFormatProvider.SaveToStream(System.Drawing.Bitmap,System.IO.Stream)">
            <summary>
            Writes a bitmap to a stream
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageFormats.IImageFormatProvider.FileExtension">
            <summary>
            Gets the file extension (lowercase) of this bitmap file format (the extension should start with a dot)
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.ImageFormats.RawImageType">
            <summary>
            Specifies a streaming format for raw images.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.ImageFormats.RawImageType.Grayscale">
            <summary>
            Grayscale image, 8 bits per pixel.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.ImageFormats.RawImageType.RgbPlanar">
            <summary>
            RGB image, 8 bits per pixel with 3 plans.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.ImageFormats.RawImageType.RgbInterleaved">
            <summary>
            RGB image, 24 bits per pixel.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.ImageFormats.RawImageType.BgrPlanar">
            <summary>
            BGR image, 8 bits per pixel with 3 plans.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.ImageFormats.RawImageType.BgrInterleaved">
            <summary>
            BGR image, 24 bits per pixel.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.ImageFormats.RawImageFormat">
            <summary>
            Provides static methods and properties to add raw format support to the library.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageFormats.RawImageFormat.EnableRawImageSupport">
            <summary>
            Enables the raw image support in the library.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageFormats.RawImageFormat.FileExtension">
            <summary>
            Gets the file extension associated to the raw file format.
            </summary>
            <value>The file extension.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageFormats.RawImageFormat.ImageHeight">
            <summary>
            Gets or sets the expected height of the next raw image to be loaded.
            </summary>
            <value>The height of the next image to be loaded.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageFormats.RawImageFormat.ImageWidth">
            <summary>
            Gets or sets the expected width of the next raw image to be loaded.
            </summary>
            <value>The width of the next image to be loaded.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageFormats.RawImageFormat.RawImageType">
            <summary>
            Gets or sets the streaming format of the raw images.
            </summary>
            <value>The streaming format of the raw images.</value>
        </member>
        <member name="T:BioLab.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:BioLab.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:BioLab.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:BioLab.Math.Functions">
            <summary>
            Utility Functions
            </summary>
        </member>
        <member name="M:BioLab.Math.Functions.Sigmoid(System.Double,System.Double,System.Double)">
            <summary>
            Sigmoid  function s(x,s,d)=1/(1+e^(-s*(x-d)))
            </summary>
            <param name="x">The value.</param>
            <param name="s">The steepness factor.</param>
            <param name="d">The center value.</param>
            <returns>The sigmoid value in x.</returns>
        </member>
        <member name="M:BioLab.Math.Functions.DoubleSigmoid(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Double Sigmoid Function
            </summary>
            <param name="x">The value.</param>
            <param name="s1">The steepness factor of the first sigmoid function.</param>
            <param name="s2">The steepness factor of the second sigmoid function.</param>
            <param name="d">The center value.</param>
            <returns>The double sigmoid value in x.</returns>
        </member>
        <member name="M:BioLab.Math.Functions.Zipf(System.Int32,System.Double,System.Int32)">
            <summary>
            Zipf function f(r,z,n)=(1/(r^z))/Sum(j=1->n)[1/(j^z)]
            </summary>
            <param name="rank">The rank.</param>
            <param name="z">The value of the exponent characterizing the distribution.</param>
            <param name="n">The number of elements.</param>
            <returns></returns>
        </member>
        <member name="M:BioLab.Math.Functions.Gaussian(System.Double,System.Double,System.Double)">
            <summary>
            Gaussian function f(a,d2,var)=a*e^(-0.5*(d2/var)) 
            </summary>
            <param name="a">The height of the Gaussian peak.</param>
            <param name="d2">The (x-Mean)^2 where Mean is the position of the center of the peak.</param>
            <param name="var">The variance.</param>
        </member>
        <member name="M:BioLab.Math.Functions.Gaussian(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gaussian function f(a,x,Mean,var)=a*e^(-0.5*((x-Mean)^2/var))
            </summary>
            <param name="a">The height of the Gaussian peak.</param>
            <param name="x">The value.</param>
            <param name="mean">The position of the center of the peak.</param>
            <param name="var">The variance.</param>
            <returns></returns>
        </member>
        <member name="M:BioLab.Math.Functions.GaussianCumulativeDistributionFunction(System.Double,System.Double,System.Double)">
            <summary>
            Gaussian Cumulative Distribution function
            </summary>
            <param name="x">The value.</param>
            <param name="mean">The mean of the normal distribution.</param>
            <param name="standDev">The standard deviation of the normal distribution.</param>
            <returns></returns>
        </member>
        <member name="M:BioLab.Math.Functions.GaussianCumulativeIntervalDistributionFunction(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gaussian Cumulative Distribution funtion
            </summary>
            <param name="min">is the lower bound of the interval</param>
            <param name="max">is the upper bound of the interval</param>
            <param name="mean">is the mean of the normal distribution</param>
            <param name="standDev">is the standard deviation of the normal distribution</param>
            <returns></returns>
        </member>
        <member name="M:BioLab.Math.Functions.PopCount(System.Int32)">
            <summary>
            Calculates the number of one bits in an integer.
            </summary>
            <param name="value">The value</param>
            <returns>The number of one bits in the input value.</returns>
        </member>
        <member name="T:BioLab.ImageProcessing.ImageFormats.NamespaceDoc">
            <summary>
            Provides image format conversion functionalities.
            </summary>
        </member>
        <member name="T:BioLab.GUI.Forms.NamespaceDoc">
            <summary>
            Provides user interface forms.
            </summary>
        </member>
        <member name="T:BioLab.Common.AlgorithmProgressChangedEventArgs">
            <summary>
            This class provides information about algorithm progress.
            </summary>
        </member>
        <member name="M:BioLab.Common.AlgorithmProgressChangedEventArgs.#ctor(System.Double,System.String)">
            <summary>
            Creates an istance of this class in order to provide algorithm progress information.
            </summary>
            <param name="progressPercentage">The percentage of the progress, from 0.0 to 1.0.</param>
            <param name="currentStatusDescription">A description of the progress status.</param>
        </member>
        <member name="P:BioLab.Common.AlgorithmProgressChangedEventArgs.AbortAlgorithm">
            <summary>
            Gets or sets a value indicating whether the algorithm should be aborted.
            </summary>
            <value><c>true</c> if [abort operation]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BioLab.Common.AlgorithmProgressChangedEventArgs.CurrentStatusDescription">
            <summary>
            Gets or sets the current algorithm status description.
            </summary>
            <value>The current status description.</value>
        </member>
        <member name="P:BioLab.Common.AlgorithmProgressChangedEventArgs.ProgressPercentage">
            <summary>
            Gets or sets the progress percentage.
            </summary>
            <value>The progress percentage in the range [0.0,1.0].</value>
        </member>
        <member name="T:BioLab.Common.AlgorithmIntermediateResultEventArgs">
            <summary>
            This class rapresents an intermediate result processed during the algorithm.
            </summary>
        </member>
        <member name="M:BioLab.Common.AlgorithmIntermediateResultEventArgs.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Common.AlgorithmIntermediateResultEventArgs"/> class.
            </summary>
            <param name="intermediateResult">The intermediate result: the content of this object should be not modified once the event has been raised.</param>
            <param name="description">A description of the intermediate result.</param>
        </member>
        <member name="M:BioLab.Common.AlgorithmIntermediateResultEventArgs.#ctor(System.Object,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Common.AlgorithmIntermediateResultEventArgs"/> class.
            </summary>
            <param name="intermediateResult">The intermediate result: the content of this object should be not modified once the event has been raised.</param>
            <param name="description">A description of the intermediate result.</param>
            <param name="iteration">The iteration number.</param>
        </member>
        <member name="P:BioLab.Common.AlgorithmIntermediateResultEventArgs.Description">
            <summary>
            Gets or sets the description of the intermediate result.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:BioLab.Common.AlgorithmIntermediateResultEventArgs.IntermediateResult">
            <summary>
            Gets or sets the intermediate result.
            </summary>
            <value>The intermediate result.</value>
        </member>
        <member name="P:BioLab.Common.AlgorithmIntermediateResultEventArgs.Iteration">
            <summary>
            Gets or sets the iteration number for this intermediate result.
            If the algorithm is not iterative, this propery should be zero.
            </summary>
        </member>
        <member name="T:BioLab.Common.AlgorithmInfoAttribute">
            <summary>
            This attribute is applied to algorithm classes only, and is used for introspection
            to automatically detect available algorithms inside the library.
            </summary>
        </member>
        <member name="M:BioLab.Common.AlgorithmInfoAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Common.AlgorithmInfoAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:BioLab.Common.AlgorithmInfoAttribute.Description">
            <summary>
            Gets or sets a brief description of the algorithm.
            </summary>
        </member>
        <member name="P:BioLab.Common.AlgorithmInfoAttribute.Name">
            <summary>
            Gets or sets the name of the algorithm.
            </summary>
        </member>
        <member name="P:BioLab.Common.AlgorithmInfoAttribute.Reference">
            <summary>
            Gets or sets the reference of a scientific publication describing the algorithm.
            </summary>
            <value>The reference (citation) of the scientific publication.</value>
        </member>
        <member name="P:BioLab.Common.AlgorithmInfoAttribute.Category">
            <summary>
            Gets or sets the category the algorithm belongs to.
            </summary>
            <value>The category of the algorithm.</value>
        </member>
        <member name="T:BioLab.Common.AlgorithmInputAttribute">
            <summary>
            This attribute is applied to algorithm properties only, and is used for introspection
            to automatically detect and handle algorithm inputs.
            </summary>
        </member>
        <member name="T:BioLab.Common.AlgorithmOutputAttribute">
            <summary>
            This attribute is applied to algorithm properties only, and is used for introspection
            to automatically detect and handle algorithm outputs.
            </summary>
        </member>
        <member name="T:BioLab.Common.AlgorithmParameterAttribute">
            <summary>
            This attribute is applied to algorithm properties only, and is used for introspection
            to automatically detect and manage algorithm parameters.
            </summary>
        </member>
        <member name="T:BioLab.Common.AlgorithmAbortedException">
            <summary>
            The exception that is thrown when an algorithm is aborted by the user.
            </summary>
        </member>
        <member name="M:BioLab.Common.AlgorithmAbortedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Common.AlgorithmAbortedException"/> class.
            </summary>
        </member>
        <member name="M:BioLab.Common.AlgorithmAbortedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Common.AlgorithmAbortedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:BioLab.Common.AlgorithmAbortedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Common.AlgorithmAbortedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:BioLab.Common.AlgorithmAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Common.AlgorithmAbortedException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:BioLab.Classification.Supervised.BayesClassifier">
            <summary>
            Represents a classifier based on the Bayes Classification Rule 
            </summary>
        </member>
        <member name="T:BioLab.Classification.Supervised.Classifier">
            <summary>
            Represents a generic classifier that classify a vector with one of the possible classes
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.Classifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.Classifier"/> class.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.Classifier.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.Classifier"/> class.
            </summary>
            <param name="classCount">The number of classes.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.Classifier.Classify(BioLab.Common.FeatureVector)">
            <summary>
            Classifies a feature vector.
            </summary>
            <param name="vector">The vector to be classified.</param>
            <returns>
            [0..classesCount-1] or -1 (unknown class)
            </returns>
        </member>
        <member name="M:BioLab.Classification.Supervised.Classifier.Classify(BioLab.Common.FeatureVector,System.Double[]@)">
            <summary>
            Classifies a feature vector and provides the confidence of each class.
            </summary>
            <param name="vector">The vector to be classified.</param>
            <param name="confidence">Confidence value for each class (the higher the confidence, the more likely the class)</param>
            <returns>[0..classesCount-1] or -1 (unknown class)</returns>
        </member>
        <member name="M:BioLab.Classification.Supervised.Classifier.Classify(BioLab.Common.FeatureVectorSet)">
            <summary>
            Classifies a whole vector set.
            </summary>
        </member>
        <member name="P:BioLab.Classification.Supervised.Classifier.ClassCount">
            <summary>
            The number of classes learned by this classfier.
            </summary>
        </member>
        <member name="P:BioLab.Classification.Supervised.Classifier.HasConfidence">
            <summary>
            true if the classifier returns confidence information.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.BayesClassifier.#ctor(BioLab.Classification.DensityEstimation.IProbabilityDensity[],System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.BayesClassifier"/> class.
            </summary>
            <param name="classConditionalDensities">The class conditional density for each class.</param>
            <param name="priorProbabilities">The prior probabilitie for each class.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.BayesClassifier.#ctor(BioLab.Classification.DensityEstimation.IProbabilityDensity[])">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.BayesClassifier"/> class. The class conditional
            densities are given by the user. The priors are computed as fractions of examples of training 
            set belonging to a given class. 
            </summary>
            <param name="classConditionalDensities">The class conditional densities.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.BayesClassifier.Classify(BioLab.Common.FeatureVector)">
            <summary>
            Classifies a feature vector.
            </summary>
            <param name="vector">The vector to be classified.</param>
            <returns>
            [0..classesCount-1] or -1 (unknown class)
            </returns>
        </member>
        <member name="M:BioLab.Classification.Supervised.BayesClassifier.Classify(BioLab.Common.FeatureVector,System.Double[]@)">
            <summary>
            Classifies the specified vector.
            </summary>
            <param name="vector">The vector.</param>
            <param name="confidence">The confidence of classification.</param>
            <returns></returns>
        </member>
        <member name="M:BioLab.Classification.Supervised.BayesClassifier.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the current <see cref="T:BioLab.Common.Data"/> to a specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.Common.Data"/> will be saved.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.BayesClassifier.LoadFromStream(System.IO.Stream)">
            <summary>
            Creates a <see cref="T:BioLab.Classification.Supervised.BayesClassifier"/> from the specified data stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the data for this <see cref="T:BioLab.Classification.Supervised.BayesClassifier"/>.
            </param>
            <returns>
            The <see cref="T:BioLab.Classification.Supervised.BayesClassifier"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.Classification.Supervised.BayesClassifier.LoadFromFile(System.String)">
            <summary>
            Creates a <see cref="T:BioLab.Classification.Supervised.BayesClassifier"/> from the specified file.
            </summary>
            <param name="path">A string that contains the name of the file from which to create the <see cref="T:BioLab.Classification.Supervised.BayesClassifier"/>.</param>
            <returns>
            The <see cref="T:BioLab.Classification.Supervised.BayesClassifier"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.Classification.Supervised.BayesClassifier.InternalClone">
            <summary>
            Creates an exact copy of this instance.
            </summary>
            <returns>
            The <see cref="T:BioLab.Common.Data"/> this method creates.
            </returns>
        </member>
        <member name="P:BioLab.Classification.Supervised.BayesClassifier.HasConfidence">
            <summary>
            True if the classifier returns confidence information.
            </summary>
        </member>
        <member name="T:BioLab.Classification.Supervised.BayesClassifierBuilder`1">
            <summary>
            Builder of Bayes Classifier. 
            </summary>
            <typeparam name="T">A Density Estimator</typeparam>
        </member>
        <member name="T:BioLab.Classification.Supervised.ClassifierBuilder`1">
            <summary>
            Represents an algorithm that build a generic classifier.
            </summary>
            <typeparam name="T">The type of the classifier.</typeparam>
        </member>
        <member name="M:BioLab.Classification.Supervised.ClassifierBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.ClassifierBuilder`1"/> class.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.ClassifierBuilder`1.#ctor(BioLab.Common.FeatureVectorSet)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.ClassifierBuilder`1"/> class.
            </summary>
            <param name="trainingSet">The training set.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.ClassifierBuilder`1.Train">
            <summary>
            Trains the classifier and return it. The training set is assumed setted.
            </summary>
            <returns>A trained classifier.</returns>
        </member>
        <member name="M:BioLab.Classification.Supervised.ClassifierBuilder`1.Train(BioLab.Common.FeatureVectorSet)">
            <summary>
            Trains the classifier over a specified training set.
            </summary>
            <param name="trainingSet">The training set.</param>
            <returns>A trained classifier.</returns>
        </member>
        <member name="P:BioLab.Classification.Supervised.ClassifierBuilder`1.TrainingSet">
            <summary>
            Gets or sets the training set.
            </summary>
            <value>The training set.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.ClassifierBuilder`1.Classifier">
            <summary>
            Gets or sets the classifier.
            </summary>
            <value>The classifier.</value>
        </member>
        <member name="M:BioLab.Classification.Supervised.BayesClassifierBuilder`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.BayesClassifierBuilder`1"/> class.
            </summary>
            <param name="densityEstimator">The density estimator.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.BayesClassifierBuilder`1.#ctor(BioLab.Common.FeatureVectorSet,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.BayesClassifierBuilder`1"/> class.
            </summary>
            <param name="trainingSet">The training set.</param>
            <param name="densityEstimator">The density estimator.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.BayesClassifierBuilder`1.Run">
            <summary>
            Get the Densitiy Estimator and build a Bayes Classifier ready for the classification
            computing the class conditional densities and the priors.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.BayesClassifierBuilder`1.CalculatePriorProbabilities">
            <summary>
            Calculates the prior probabilities.
            </summary>
            <returns>An array of double containing the priors for each class.</returns>
        </member>
        <member name="P:BioLab.Classification.Supervised.BayesClassifierBuilder`1.DensityEstimator">
            <summary>
            Gets or sets the density estimator.
            </summary>
            <value>The density estimator.</value>
        </member>
        <member name="T:BioLab.Math.LinearAlgebra.LUDecomposition">
            <summary>
            LU decomposition is a matrix decomposition which writes a matrix as the 
            product of a lower triangular matrix and an upper triangular matrix. 
            The product sometimes includes a permutation matrix as well. This decomposition 
            is used in numerical analysis to solve systems of linear equations or calculate 
            the determinant.
            </summary>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.LUDecomposition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.LinearAlgebra.LUDecomposition"/> class.
            </summary>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.LUDecomposition.#ctor(BioLab.Math.LinearAlgebra.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.LinearAlgebra.LUDecomposition"/> class.
            </summary>
            <param name="a">The matrix to be decomposed.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.LUDecomposition.Run">
            <summary>
            Executes the decomposition.
            </summary>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.LUDecomposition.A">
            <summary>Gets or sets the input matrix.</summary>
            <value>The matrix to decompose.</value>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.LUDecomposition.L">
            <summary>Gets the lower triangular factor.</summary>
            <value>The lower triangular factor.</value>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.LUDecomposition.U">
            <summary>Gets the upper triangular factor.</summary>
            <value>The upper triangular factor.</value>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.LUDecomposition.LU">
            <summary>
            Gets or sets the LU.
            </summary>
            <value>The LU.</value>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.LUDecomposition.Pivot">
            <summary>
            Gets or sets the pivot.
            </summary>
            <value>The pivot.</value>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.LUDecomposition.IsNonsingular">
            <summary>Gets a value indicating whether this instance is non singular.</summary>
            <value>
            	<c>true</c> if this instance is non singular; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.LUDecomposition.Determinant">
            <summary>Computes the determinant.</summary>
            <value>The determinant.</value>
        </member>
        <member name="T:BioLab.Math.LinearAlgebra.LinearEquationSolver">
            <summary>
            Solves a linear equation system using the LU decomposition.
            </summary>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.LinearEquationSolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.LinearAlgebra.LinearEquationSolver"/> class.
            </summary>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.LinearEquationSolver.#ctor(BioLab.Math.LinearAlgebra.Matrix,BioLab.Math.LinearAlgebra.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.LinearAlgebra.LinearEquationSolver"/> class.
            </summary>
            <param name="A">The matrix A.</param>
            <param name="B">The matrix B.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.LinearEquationSolver.Solve">
            <summary>
            Solves the linear equation and returnS the result (X).
            </summary>
            <returns></returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.LinearEquationSolver.Run">
            <summary>
            Executes the algorithm.
            </summary>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.LinearEquationSolver.A">
            <summary>
            Gets or sets the input matrix A.
            </summary>
            <value>The matrix A.</value>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.LinearEquationSolver.B">
            <summary>
            Gets or sets the input matrix B.
            </summary>
            <value>The matrix B.</value>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.LinearEquationSolver.X">
            <summary>
            Gets the result matrix X.
            </summary>
            <value>The result matrix X.</value>
        </member>
        <member name="T:BioLab.Math.BioLabMathConfiguration">
            <summary>
            Allows to configure some global parameters of math-related classes of the library.
            </summary>
        </member>
        <member name="P:BioLab.Math.BioLabMathConfiguration.UseNativeLibrary">
            <summary>
            If true, an unmanaged dll is used for increasing the speed of some algorithms.
            </summary>
        </member>
        <member name="F:BioLab.GUI.UserControls.ImageCorrelationOuputViewer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.UserControls.ImageCorrelationOuputViewer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.UserControls.ImageCorrelationOuputViewer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:BioLab.GUI.Forms.InputImageSizeForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.InputImageSizeForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.Forms.InputImageSizeForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BioLab.GUI.UserControls.FileListControl">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:BioLab.GUI.UserControls.FileListControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.UserControls.FileListControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.UserControls.FileListControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:BioLab.GUI.UserControls.FileListControl.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.UserControls.FileListControl"/> class.
            </summary>
            <param name="folderPath">The folder path.</param>
            <param name="fileFilter">The file filter.</param>
        </member>
        <member name="M:BioLab.GUI.UserControls.FileListControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.UserControls.FileListControl"/> class.
            </summary>
        </member>
        <member name="M:BioLab.GUI.UserControls.FileListControl.SetFolderAndSelectedFileName(System.String,System.String)">
            <summary>
            Allows to specify both the current folder and the file name to select.
            </summary>
            <param name="folderPath">The new current path.</param>
            <param name="fileName">The file name (note: it should not include the folder path).</param>
        </member>
        <member name="M:BioLab.GUI.UserControls.FileListControl.SetFolderAndFileNames(System.String,System.String[])">
            <summary>
            Allows to specify both the current folder and the file names to be shown in the list.
            </summary>
            <param name="folderPath">The new current path.</param>
            <param name="fileNames">The file names (note: they should not include the folder path).</param>
        </member>
        <member name="M:BioLab.GUI.UserControls.FileListControl.OnErrorOccurred(BioLab.GUI.UserControls.ErrorOccurredEventArgs)">
            <summary>
            Raises the ErrorOccurred event
            </summary>
        </member>
        <member name="M:BioLab.GUI.UserControls.FileListControl.OnSelectedFileNameChanged(System.EventArgs)">
            <summary>
            Raises the SelectedFileNameChanged event
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BioLab.GUI.UserControls.FileListControl.SetFileNames(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Replaces the file list with the specified collection of names.
            </summary>
            <param name="fileNames">The file names to be displayed in the list.</param>
        </member>
        <member name="M:BioLab.GUI.UserControls.FileListControl.SelectNextFile">
            <summary>
            Selects the next file in the list.
            </summary>
            <returns>false if no file is currently selected or the end of the list is reached.</returns>
        </member>
        <member name="M:BioLab.GUI.UserControls.FileListControl.SelectFirstFile">
            <summary>
            Selects the first file in the list.
            </summary>
        </member>
        <member name="P:BioLab.GUI.UserControls.FileListControl.SelectedFileName">
            <summary>
            Gets the file selected in the list (null if no file is selected).
            </summary>
        </member>
        <member name="P:BioLab.GUI.UserControls.FileListControl.FileCount">
            <summary>
            Gets the current number of files in the list.
            </summary>
        </member>
        <member name="P:BioLab.GUI.UserControls.FileListControl.FileFilter">
            <summary>
            Gets or sets search string to match against the file names in FolderPath
            </summary>
        </member>
        <member name="P:BioLab.GUI.UserControls.FileListControl.FolderPath">
            <summary>
            Gets or sets the current folder
            </summary>
        </member>
        <member name="E:BioLab.GUI.UserControls.FileListControl.ErrorOccurred">
            <summary>
            Occurs when an exception is thrown during the file list loading.
            </summary>
        </member>
        <member name="E:BioLab.GUI.UserControls.FileListControl.SelectedFileNameChanged">
            <summary>
            Occurs when the SelectedFileName property changes
            </summary>        
        </member>
        <member name="T:BioLab.Math.Complex">
            <summary>Complex double type.</summary>
            <remarks>See <see cref="T:BioLab.Math.ComplexMath">ComplexMath</see> for complex math functions.</remarks>
        </member>
        <member name="M:BioLab.Math.Complex.#ctor(System.Double)">
            <summary>Constructor for complex double precision number type</summary>
            <param name="real">Real value of complex number expressed as <b>double</b>.</param>
        </member>
        <member name="M:BioLab.Math.Complex.#ctor(System.Double,System.Double)">
            <summary>Constructor for complex double precision number type</summary>
            <param name="real">Real value of complex number expressed as <b>double</b>.</param>
            <param name="imaginary">Imaginary part of complex number expressed as <b>double</b>.</param>
        </member>
        <member name="M:BioLab.Math.Complex.#ctor(System.String)">
            <summary>Created a <b>Complex</b> from the given string. The string can be in the
            following formats: <b>n</b>, <b>ni</b>, <b>n +/- ni</b>, <b>n,n</b>, <b>n,ni</b>,
            <b>(n,n)</b>, or <b>(n,ni)</b>, where n is a real number.</summary>
            <param name="value">The string to create the <b>Complex</b> from.</param>
            <exception cref="T:System.FormatException">if the n, is not a number.</exception>
            <exception cref="T:System.ArgumentNullException">if s, is <b>null</b>.</exception>
        </member>
        <member name="M:BioLab.Math.Complex.#ctor(System.String,System.IFormatProvider)">
            <summary>Created a <b>Complex</b> from the given string. The string can be in the
            following formats: <b>n</b>, <b>ni</b>, <b>n +/- ni</b>, <b>n,n</b>, <b>n,ni</b>,
            <b>(n,n)</b>, or <b>(n,ni)</b>, where n is a real number.</summary>
            <param name="value">The string to create the <b>Complex</b> from.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <exception cref="T:System.FormatException">if the n, is not a number.</exception>
            <exception cref="T:System.ArgumentNullException">if s, is <b>null</b>.</exception>
        </member>
        <member name="M:BioLab.Math.Complex.op_Implicit(System.Double)~BioLab.Math.Complex">
            <summary>Implicit conversion from double type</summary>
        </member>
        <member name="M:BioLab.Math.Complex.ToComplex(System.Double)">
            <summary>Convert double type to Complex</summary>
            <param name="value"><b>double</b> variable as real to</param>
        </member>
        <member name="M:BioLab.Math.Complex.GetHashCode">
            <summary>Return the Hashcode for the <b>Complex</b></summary>
            <returns>The Hashcode representation of <b>Complex</b></returns>
        </member>
        <member name="M:BioLab.Math.Complex.Equals(BioLab.Math.Complex)">
            <summary>Check if <b>Complex</b> variable is the same as another <b>Complex</b></summary>
            <param name="obj"><b>obj</b> to compare present <b>Complex</b> to.</param>
            <returns>Returns true if the two objects are the same object, or the the Real and Imaginary 
            components of both are equal, false otherwise</returns>
        </member>
        <member name="M:BioLab.Math.Complex.Equals(System.Object)">
            <summary>Check if <b>Complex</b> variable is the same as another object</summary>
            <param name="obj"><b>obj</b> to compare present <b>Complex</b> to.</param>
            <returns>Returns true if the two objects are the same object, or the the Real and Imaginary 
            components of both are equal, false otherwise</returns>
        </member>
        <member name="M:BioLab.Math.Complex.op_Equality(BioLab.Math.Complex,BioLab.Math.Complex)">
            <summary>Equal operator to compare two <b>Complex</b> variables</summary>
            <remarks>Returns false if the two variables are not equal using Equals function</remarks>
        </member>
        <member name="M:BioLab.Math.Complex.op_Inequality(BioLab.Math.Complex,BioLab.Math.Complex)">
            <summary>Not Equal operator to compare two <b>Complex</b> variables</summary>
            <remarks>Returns false if the two variables are equal using Equals function</remarks>
        </member>
        <member name="M:BioLab.Math.Complex.op_UnaryPlus(BioLab.Math.Complex)">
            <summary>Positive Operator</summary>
        </member>
        <member name="M:BioLab.Math.Complex.Plus(BioLab.Math.Complex)">
            <summary>Positive Operator</summary>
        </member>
        <member name="M:BioLab.Math.Complex.op_Addition(BioLab.Math.Complex,BioLab.Math.Complex)">
            <summary>Addition Operator</summary>
        </member>
        <member name="M:BioLab.Math.Complex.Add(BioLab.Math.Complex,BioLab.Math.Complex)">
            <summary>Addition Operator</summary>
        </member>
        <member name="M:BioLab.Math.Complex.op_UnaryNegation(BioLab.Math.Complex)">
            <summary>Negate Operator</summary>
        </member>
        <member name="M:BioLab.Math.Complex.Negate(BioLab.Math.Complex)">
            <summary>Negate Operator</summary>
        </member>
        <member name="M:BioLab.Math.Complex.op_Subtraction(BioLab.Math.Complex,BioLab.Math.Complex)">
            <summary>Subtraction Operator</summary>
        </member>
        <member name="M:BioLab.Math.Complex.Subtract(BioLab.Math.Complex,BioLab.Math.Complex)">
            <summary>Subtraction Operator</summary>
        </member>
        <member name="M:BioLab.Math.Complex.op_Multiply(BioLab.Math.Complex,BioLab.Math.Complex)">
            <summary>Multiplication Operator</summary>
        </member>
        <member name="M:BioLab.Math.Complex.Multiply(BioLab.Math.Complex,BioLab.Math.Complex)">
            <summary>Multiplication Operator</summary>
        </member>
        <member name="M:BioLab.Math.Complex.op_Division(BioLab.Math.Complex,BioLab.Math.Complex)">
            <summary>Division Operator</summary>
        </member>
        <member name="M:BioLab.Math.Complex.Divide(BioLab.Math.Complex,BioLab.Math.Complex)">
            <summary>Division Operator</summary>
        </member>
        <member name="M:BioLab.Math.Complex.IsNaN">
            <summary>Tests whether the the complex number is not a number.</summary>
            <returns>True if either the real or imaginary components are NaN, false otherwise.</returns>
        </member>
        <member name="M:BioLab.Math.Complex.IsInfinity">
            <summary>Tests whether the the complex number is infinite.</summary>
            <returns>True if either the real or imaginary components are infinite, false otherwise.</returns>
        </member>
        <member name="M:BioLab.Math.Complex.ToString">
            <summary>A string representation of this <b>Complex</b>.</summary>
            <returns>The string representation of the value of <b>this</b> instance.</returns>
        </member>
        <member name="M:BioLab.Math.Complex.ToString(System.String)">
            <summary>A string representation of this <b>Complex</b>.</summary>
            <param name="format">A format specification.</param>
            <returns>The string representation of the value of <b>this</b> instance as specified by format.</returns>
        </member>
        <member name="M:BioLab.Math.Complex.ToString(System.IFormatProvider)">
            <summary>A string representation of this <b>Complex</b>.</summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <returns>The string representation of the value of <b>this</b> instance as specified by provider.</returns>
        </member>
        <member name="M:BioLab.Math.Complex.ToString(System.String,System.IFormatProvider)">
            <summary>A string representation of this <b>Complex</b>.</summary>
            <param name="format">A format specification.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <returns>The string representation of the value of <b>this</b> instance as specified by format and provider.</returns>
            <exception cref="T:System.FormatException">if the n, is not a number.</exception>
            <exception cref="T:System.ArgumentNullException">if s, is <b>null</b>.</exception>		
        </member>
        <member name="M:BioLab.Math.Complex.Parse(System.String)">
             <summary>Creates a <b>Complex</b> based on a string. The string can be in the
            following formats: <b>n</b>, <b>ni</b>, <b>n +/- ni</b>, <b>n,n</b>, <b>n,ni</b>,
            <b>(n,n)</b>, or <b>(n,ni)</b>, where n is a real number.</summary>
             <param name="value">the string to parse.</param>
             <returns>a <b>Complex</b> containing the value of the string.</returns>
        </member>
        <member name="M:BioLab.Math.Complex.Parse(System.String,System.IFormatProvider)">
             <summary>Creates a <b>Complex</b> based on a string. The string can be in the
            following formats: <b>n</b>, <b>ni</b>, <b>n +/- ni</b>, <b>n,n</b>, <b>n,ni</b>,
            <b>(n,n)</b>, or <b>(n,ni)</b>, where n is a real number.</summary>
             <param name="value">the string to parse.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
             <returns>a <b>Complex</b> containing the value of the string.</returns>
        </member>
        <member name="P:BioLab.Math.Complex.One">
            <summary>Constant value of one.</summary>
        </member>
        <member name="P:BioLab.Math.Complex.Zero">
            <summary>Constant value of zero.</summary>
        </member>
        <member name="P:BioLab.Math.Complex.NaN">
            <summary>Constant value of NaN.</summary>
        </member>
        <member name="P:BioLab.Math.Complex.Infinity">
            <summary>Constant value of Infinity.</summary>
        </member>
        <member name="P:BioLab.Math.Complex.I">
            <summary>Constant value for I.</summary>
        </member>
        <member name="P:BioLab.Math.Complex.Real">
            <summary>Property to access Real component</summary>
        </member>
        <member name="P:BioLab.Math.Complex.Imaginary">
            <summary>Property to access Imaginary component</summary>
        </member>
        <member name="P:BioLab.Math.Complex.Conjugate">
            <summary>
            Returns the conjugate of the <b>Complex</b>.
            </summary>
        </member>
        <member name="P:BioLab.Math.Complex.Absolute">
            <summary>
            Returns the Absolute of the <b>Complex</b>.
            </summary>
        </member>
        <member name="F:BioLab.GUI.UserControls.IntermediateResultControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.UserControls.IntermediateResultControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.UserControls.IntermediateResultControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BioLab.GUI.DataViewers.NamespaceDoc">
            <summary>
            Provides user controls for viewing and editing various data types.
            </summary>
        </member>
        <member name="T:BioLab.GUI.DataViewers.ZoomRectangleSelectedEventArgs">
            <summary>
            Provides data for the IZommableViewer.ZoomRectangleSelected event
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.ZoomRectangleSelectedEventArgs.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the class with the RectangleWorldUnits set to the given value
            </summary>
        </member>
        <member name="P:BioLab.GUI.DataViewers.ZoomRectangleSelectedEventArgs.RectangleWorldUnits">
            <summary>
            The selected rectangle in the original units
            </summary>
        </member>
        <member name="T:BioLab.GUI.DataViewers.MouseButtonTool">
            <summary>
            Specifies the operation associated to a mouse button in a DataViewer.
            </summary>
        </member>
        <member name="F:BioLab.GUI.DataViewers.MouseButtonTool.None">
            <summary>
            No operation.
            </summary>
        </member>
        <member name="F:BioLab.GUI.DataViewers.MouseButtonTool.Panning">
            <summary>
            The user can press the button and move the mouse to pan the view.
            </summary>
        </member>
        <member name="F:BioLab.GUI.DataViewers.MouseButtonTool.ZoomInRectangle">
            <summary>
            The user can press the button and move the mouse to select a rectangle and zoom into it when the button is released.
            </summary>
        </member>
        <member name="T:BioLab.GUI.DataViewers.DataViewerBuilder">
            <summary>
            Provides static methods to create an appropriate DataViewer for a given object.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DataViewerBuilder.CreateDataViewer(System.Object)">
            <summary>
            Creates a DataViewer for the given object.
            </summary>
            <param name="data">The object to be viewed in the DataViewer.</param>
            <returns>The DataViewer with the input object assigned to its Data property.</returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DataViewerBuilder.CreateDataViewer(System.Type)">
            <summary>
            Creates a DataViewer for a given object type.
            </summary>
            <param name="dataType">The object type.</param>
            <returns>The DataViewer.</returns>
        </member>
        <member name="T:BioLab.GUI.DataViewers.DefaultDataViewerAttribute">
            <summary>
            Specifies the default DataViewer for a given class.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DefaultDataViewerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.DataViewers.DefaultDataViewerAttribute"/> class.
            </summary>
            <param name="dataViewer">The data viewer.</param>
        </member>
        <member name="P:BioLab.GUI.DataViewers.DefaultDataViewerAttribute.DataViewer">
            <summary>
            Gets or sets the type of the default DataViewer.
            </summary>
            <value>The type of the default DataViewer.</value>
        </member>
        <member name="T:BioLab.GUI.DataViewers.LabelColors">
            <summary>
            Proides an ordered set of colors, which can be used, for instance, to highlight different objects or classes.
            </summary>
        </member>
        <member name="F:BioLab.GUI.DataViewers.LabelColors.Colors">
            <summary>
            An array of colors.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.LabelColors.GetSafeColor(System.Int32)">
            <summary>
            Gets a color corresponding to a given index. The same color may be returned for different indices in case one of the indices is greater than the
            number of available colors.
            </summary>
            <param name="index">The index of the color.</param>
            <returns>A color corresponding to the given index.</returns>
        </member>
        <member name="P:BioLab.GUI.DataViewers.LabelColors.Pens">
            <summary>
            Gets Pens corresponding to the colors.
            </summary>
            <value>The array of Pens.</value>
        </member>
        <member name="P:BioLab.GUI.DataViewers.LabelColors.Brushes">
            <summary>
            Gets solid Brushes corresponding to the colors.
            </summary>
            <value>The array of Brushes.</value>
        </member>
        <member name="T:BioLab.Math.Probability.NamespaceDoc">
            <summary>
            Provides classes and interfaces for probability distributions.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.GaborFilter">
            <summary>
            Provides static methods to create Gabor filters at a specified frequency and orientation.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.GaborFilter.Create(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Boolean,System.Double)">
            <summary>
            Creates a Gabor filter as a <see cref="T:BioLab.ImageProcessing.ConvolutionFilter`1"/>.
            </summary>
            <param name="frequency">The filter frequency.</param>
            <param name="orientation">The filter orientation, in radians.</param>
            <param name="filterSize">The size of the filter mask, in pixels.</param>
            <param name="aspectRatio">The aspect ratio of the filter.</param>
            <param name="strength">The strength of the filter: 1 is the maximum strength.</param>
            <param name="removeDC">if set to <c>true</c> the DC component is removed from the filter values.</param>
            <param name="peakCount">The number of effective peaks in the Gaussian envelope.</param>
            <returns>The new filter.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.GaborFilter.Create(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Boolean,System.Double,System.Double,System.Int32)">
            <summary>
            Creates a Gabor filter as a <see cref="T:BioLab.ImageProcessing.ConvolutionFilter`1"/>.
            </summary>
            <param name="frequency">The filter frequency.</param>
            <param name="orientation">The filter orientation, in radians.</param>
            <param name="filterSize">The size of the filter mask, in pixels.</param>
            <param name="aspectRatio">The aspect ratio of the filter.</param>
            <param name="strength">The strength of the filter: 1 is the maximum strength.</param>
            <param name="removeDC">if set to <c>true</c> the DC component is removed from the filter values.</param>
            <param name="multiplier">The multiplier used to convert and approximate the floating point values to integer values.</param>
            <param name="peakCount">The number of effective peaks in the Gaussian envelope.</param>
            <param name="threshold">The threshold used to aproximate floating point values to zero (smaller values are considered as zero).</param>
            <returns>The new filter.</returns>
        </member>
        <member name="T:BioLab.GUI.UserControls.NamespaceDoc">
            <summary>
            Provides various user controls.
            </summary>
        </member>
        <member name="T:BioLab.DimensionalityReduction.NamespaceDoc">
            <summary>
            Provides dimensionality-reduction techniques.
            </summary>
        </member>
        <member name="T:BioLab.PatternRecognition.Localization.CorrelationMeasure">
            <summary>
            Specifies the correlation measured for an <see cref="T:BioLab.PatternRecognition.Localization.ImageCorrelation"/>.
            </summary>    
        </member>
        <member name="F:BioLab.PatternRecognition.Localization.CorrelationMeasure.Ssd">
            <summary>
            Sum of Squared Distances
            </summary>
        </member>
        <member name="F:BioLab.PatternRecognition.Localization.CorrelationMeasure.Nssd">
            <summary>
            Normalized Sum of Squared Distances
            </summary>
        </member>
        <member name="F:BioLab.PatternRecognition.Localization.CorrelationMeasure.Znssd">
            <summary>
            Zero-mean Normalized Sum of Squared Distances
            </summary>
        </member>
        <member name="F:BioLab.PatternRecognition.Localization.CorrelationMeasure.CC">
            <summary>
            Cross Correlation
            </summary>
        </member>
        <member name="F:BioLab.PatternRecognition.Localization.CorrelationMeasure.Ncc">
            <summary>
            Normalized Cross Correlation
            </summary>
        </member>
        <member name="F:BioLab.PatternRecognition.Localization.CorrelationMeasure.Zncc">
            <summary>
            Zero-mean Normalized Cross Correlation
            </summary>
        </member>
        <member name="T:BioLab.PatternRecognition.Localization.ImageCorrelation">
            <summary>
            Calculates the correlation of a template with a grayscale image.
            </summary>
        </member>
        <member name="M:BioLab.PatternRecognition.Localization.ImageCorrelation.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte},BioLab.PatternRecognition.Localization.CorrelationMeasure)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.PatternRecognition.Localization.ImageCorrelation"/> class and allows to specify the parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="template">The template.</param>
            <param name="correlationMeasure">The correlation measure.</param>
        </member>
        <member name="M:BioLab.PatternRecognition.Localization.ImageCorrelation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.PatternRecognition.Localization.ImageCorrelation"/> class.
            </summary>
        </member>
        <member name="M:BioLab.PatternRecognition.Localization.ImageCorrelation.Run">
            <summary>
            Executes the image operation.
            </summary>
        </member>
        <member name="P:BioLab.PatternRecognition.Localization.ImageCorrelation.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>A grayscale image containing the template.</value>
        </member>
        <member name="P:BioLab.PatternRecognition.Localization.ImageCorrelation.CorrelationMeasure">
            <summary>
            Gets or sets the correlation measure.
            </summary>
            <value>The correlation measure.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.MetricType">
            <summary>
            Metric types between pixel coordinates.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.MetricType.CityBlock">
            <summary>
            City-block metric, also known as D4 metric.
            According to this metric, a pixel has unitary distance from another if the former lies on the North or the East 
            or the South or the West of the latter.
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.MetricType.Chessboard">
            <summary>
            Chessboard metric, also known as D8 metric.
            According to this metric, one pixel has unitary distance from another if the former is on the North or the Northeast 
            or the East or the Southeast or the South or the Southwest or the West or the Northwest of the latter.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.RgbPixel`1">
            <summary>
            Represents a generic RGB pixel.
            </summary>
            <typeparam name="T">The type of the RGB pixel.</typeparam>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbPixel`1.#ctor(`0,`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.RgbPixel`1"/> struct as a new RGB pixel.
            </summary>
            <param name="red">The red channel value of the RGB pixel.</param>
            <param name="green">The green channel value of the RGB pixel.</param>
            <param name="blue">The blue channel value of the RGB pixel.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbPixel`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.RgbPixel`1"/> struct as a new RGB pixel.
            </summary>
            <param name="value">The value of the three channels of the RGB pixel.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbPixel`1.Equals(System.Object)">
            <summary>
            Specifies whether this <see cref="T:BioLab.ImageProcessing.RgbPixel`1"/> contains the same RGB values as the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
                <c>true</c> if <paramref name="obj"/> and this instance contains the same RGV values; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbPixel`1.op_Equality(BioLab.ImageProcessing.RgbPixel{`0},BioLab.ImageProcessing.RgbPixel{`0})">
            <summary>
            Compares two <see cref="T:BioLab.ImageProcessing.RgbPixel`1"/> objects. 
            The result specifies whether the RGB channels values of the two pixels are equal.
            </summary>
            <param name="pixel1">A <see cref="T:BioLab.ImageProcessing.RgbPixel`1"/> to compare.</param>
            <param name="pixel2">A <see cref="T:BioLab.ImageProcessing.RgbPixel`1"/> to compare.</param>
            <returns>
                <c>true</c> if the RGB channels values of the two pixels are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbPixel`1.op_Inequality(BioLab.ImageProcessing.RgbPixel{`0},BioLab.ImageProcessing.RgbPixel{`0})">
            <summary>
            Compares two <see cref="T:BioLab.ImageProcessing.RgbPixel`1"/> objects. 
            The result specifies whether the RGB channels values of the two pixels are unequals.
            </summary>
            <param name="pixel1">A <see cref="T:BioLab.ImageProcessing.RgbPixel`1"/> to compare.</param>
            <param name="pixel2">A <see cref="T:BioLab.ImageProcessing.RgbPixel`1"/> to compare.</param>
            <returns>
                <c>true</c> if one or more of the three RGB channels values of the two pixels differ; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbPixel`1.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:BioLab.ImageProcessing.RgbPixel`1"/>.
            </summary>
            <returns>32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbPixel`1.Equals(BioLab.ImageProcessing.RgbPixel{`0})">
            <summary>
            Indicates whether the current pixel is equal to another one.
            </summary>
            <param name="other">A pixel to compare with.</param>
            <returns>
            true if the current pixel is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:BioLab.ImageProcessing.RgbPixel`1.Red">
            <summary>
            Gets or sets the red channel value of the RGB pixel.
            </summary>
            <value>The red channel value of the RGB pixel.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.RgbPixel`1.Green">
            <summary>
            Gets or sets the green channel value of the RGB pixel.
            </summary>
            <value>The green channel value of the RGB pixel.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.RgbPixel`1.Blue">
            <summary>
            Gets or sets the blue channel value of the RGB pixel.
            </summary>
            <value>The blue channel value of the RGB pixel.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.MultipleChannelImage`1">
            <summary>
            Represents a generic image in which every pixel is formed by mutiple channels.
            Each channel is represented by an instance of the <see cref="T:BioLab.ImageProcessing.Image`1"/> class.
            </summary>
            <typeparam name="T">The type of the pixels in each channel of the image.</typeparam>
        </member>
        <member name="M:BioLab.ImageProcessing.MultipleChannelImage`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/> class which has the 
            default value (0) for all the values of channels of the pixels.
            </summary>
            <param name="width">The width, in pixels, of the image.</param>
            <param name="height">The height, in pixels, of the image.</param>
            <param name="channelCount">The number of channels of the image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.MultipleChannelImage`1.#ctor(System.Int32,System.Int32,`0[][])">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/> class copying 
            the pixels of the various channels from the arrays passed as parameters.
            </summary>
            <param name="width">The width, in pixels, of the image.</param>
            <param name="height">The height, in pixels, of the image.</param>
            <param name="channelPixels">An array of pixel values for each channel.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.MultipleChannelImage`1.#ctor(BioLab.ImageProcessing.MultipleChannelImage{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/> class
            creating a copy of the channels of an existing <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/> instance.
            </summary>
            <param name="image">The image which has to be copied.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.MultipleChannelImage`1.#ctor(BioLab.ImageProcessing.Image{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/> class copying 
            the array of <see cref="T:BioLab.ImageProcessing.Image`1"/> passed as parameter.
            </summary>
            <param name="channels">An array of <see cref="T:BioLab.ImageProcessing.Image`1"/> representing the channels of the new image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.MultipleChannelImage`1.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/>.
            </summary>
            <returns>
            The <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/> this method creates, cast as an object.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.MultipleChannelImage`1.InternalClone">
            <summary>
            Creates an exact copy of this instance.
            </summary>
            <returns>
            The <see cref="T:BioLab.Common.Data"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.MultipleChannelImage`1.GetChannel(System.Int32)">
            <summary>
            Returns the channel specified by the index.
            </summary>
            <param name="index">The index of the channel.</param>
            <returns>A reference to the channel.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.MultipleChannelImage`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the channels of the <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/>.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the channels of the <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/>.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.MultipleChannelImage`1.GetSubImage(System.Int32,System.Int32,BioLab.ImageProcessing.ImageBase)">
            <summary>
            Copies all the pixels contained into an rectangular region of the current image into a destination image.
            </summary>
            <param name="x">The x coordinate of the top-left pixel.</param>
            <param name="y">The y coordinate of the top-left pixel.</param>
            <param name="destinationSubImage">The <see cref="T:BioLab.ImageProcessing.ImageBase"/> in which pixels are to be copied.
            Width and height of this image determinate the size of the rectagular region which has to be copied.
            </param>
        </member>
        <member name="M:BioLab.ImageProcessing.MultipleChannelImage`1.GetSubImage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:BioLab.ImageProcessing.ImageBase"/> containing a copy of the pixels of a rectangular region of the current image.
            </summary>
            <param name="x">The x coordinate of the top-left pixel.</param>
            <param name="y">The y coordinate of the top-left pixel.</param>
            <param name="subImageWidth">The width of the rectangle.</param>
            <param name="subImageHeight">The height of the rectangle.</param>
            <returns>The new <see cref="T:BioLab.ImageProcessing.ImageBase"/>.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.MultipleChannelImage`1.SetSubImage(System.Int32,System.Int32,BioLab.ImageProcessing.ImageBase)">
            <summary>
            Copies all the pixels of a given <see cref="T:BioLab.ImageProcessing.ImageBase"/> into the current image at a given position.
            </summary>
            <param name="x">The x coordinate of the position where the pixels are to be copied.</param>
            <param name="y">The y coordinate of the position where the pixels are to be copied.</param>
            <param name="subImage">The <see cref="T:BioLab.ImageProcessing.ImageBase"/> to be copied.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.MultipleChannelImage`1.CreateNew(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/>.
            </summary>
            <param name="width">The width, in pixels, of the image.</param>
            <param name="height">The height, in pixels, of the image.</param>
            <returns>The <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/> this method creates.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.MultipleChannelImage`1.CreateNew(BioLab.ImageProcessing.Image{`0}[])">
            <summary>
            Creates a new <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/>.
            </summary>
            <param name="imageChannels">An array of <see cref="T:BioLab.ImageProcessing.Image`1"/> representing the channels of the new image.</param>
            <returns>The <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/> this method creates.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.MultipleChannelImage`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the channels of the <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/>.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the channels of the <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/>.
            </returns>
        </member>
        <member name="T:BioLab.ImageProcessing.RgbImage`1">
             <summary>
             Represents a generic RGB image.
             </summary>
            <example>
             The following code example performs the following actions:
            <list type="bullet"> 
            <item>
            <description> Reads an RGB image from file.</description>
            </item>
            <item>
            <description> Prints to screen image width and height.</description>
            </item>
            <item>
            <description> Saves each channel as an image in a new file.</description>
            </item>
            </list>
            <code>
            
            using System;
            using BioLab.ImageProcessing;
            
            namespace Examples
            {
                class Program
                {
                    static void Main()
                    {
                        RgbImage&lt;byte&gt; image = (RgbImage&lt;byte&gt;)ImageBase.LoadFromFile(@"C:\Images\objects.png");
                        Console.WriteLine("Width={0}, Height={1}", image.Width, image.Height);
                        image.RedChannel.SaveToFile(@"C:\Images\objects_red.png");
                        image.GreenChannel.SaveToFile(@"C:\Images\objects_green.png");
                        image.BlueChannel.SaveToFile(@"C:\Images\objects_blue.png");
                    }
                }
            }
            </code>
            </example>
             <typeparam name="T">The type of the RGB pixels on the image.</typeparam>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbImage`1.#ctor(BioLab.ImageProcessing.Image{`0},BioLab.ImageProcessing.Image{`0},BioLab.ImageProcessing.Image{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.RgbImage`1"/> class
            copying the pixel values of the three channels from three <see cref="T:BioLab.ImageProcessing.Image`1"/> instances.
            </summary>
            <param name="red">The red channel of the RGB image.</param>
            <param name="green">The green channel of the RGB image.</param>
            <param name="blue">The blue green channel fo the RGB image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbImage`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.RgbImage`1"/> class which has the 
            default value (0) for all the pixels of the three channels.
            </summary>
            <param name="width">The width, in pixels, of the new image.</param>
            <param name="height">The height, in pixels, of the new image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbImage`1.#ctor(BioLab.ImageProcessing.RgbImage{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.RgbImage`1"/> class
            creating a copy of an existing <see cref="T:BioLab.ImageProcessing.RgbImage`1"/> instance.
            </summary>
            <param name="image">The image which has to be copied.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbImage`1.CreateNew(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/>.
            </summary>
            <param name="width">The width, in pixels, of the image.</param>
            <param name="height">The height, in pixels, of the image.</param>
            <returns>
            The <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbImage`1.CreateNew(BioLab.ImageProcessing.Image{`0}[])">
            <summary>
            Creates a new <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/>.
            </summary>
            <param name="imageChannels">An array of <see cref="T:BioLab.ImageProcessing.Image`1"/> representing the channels of the new image.</param>
            <returns>
            The <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/> this method creates.
            </returns>
        </member>
        <member name="P:BioLab.ImageProcessing.RgbImage`1.BlueChannel">
            <summary>
            Gets the blue channel of this <see cref="T:BioLab.ImageProcessing.RgbImage`1"/>.
            </summary>
            <value>The blue channel of this image.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.RgbImage`1.GreenChannel">
            <summary>
            Gets the green channel of this <see cref="T:BioLab.ImageProcessing.RgbImage`1"/>.
            </summary>
            <value>The green channel of this image.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.RgbImage`1.RedChannel">
            <summary>
            Gets the red channel of this <see cref="T:BioLab.ImageProcessing.RgbImage`1"/>.
            </summary>
            <value>The red channel of this image.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.RgbImage`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:BioLab.ImageProcessing.RgbPixel`1"/> at the specified index.
            </summary>
            <value>The value of the specified pixel.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.RgbImage`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the value of the pixel at the specified coordinates.
            </summary>
            <value>The value of the specified pixel</value>
        </member>
        <member name="P:BioLab.ImageProcessing.RgbImage`1.Item(BioLab.Math.Geometry.IntPoint2D)">
            <summary>
            Gets or sets the value of the pixel at the specified coordinates.
            </summary>
            <value>Value of the specified pixel</value>
        </member>
        <member name="T:BioLab.ImageProcessing.HslImage`1">
            <summary>
            Represents a generic HSL image.
            </summary>
            <typeparam name="T">The type of the HSL pixels on the image.</typeparam>
        </member>
        <member name="M:BioLab.ImageProcessing.HslImage`1.#ctor(BioLab.ImageProcessing.Image{`0},BioLab.ImageProcessing.Image{`0},BioLab.ImageProcessing.Image{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.HslImage`1"/> class
            copying the pixel values of the three channels from three <see cref="T:BioLab.ImageProcessing.Image`1"/> instances.
            </summary>
            <param name="hue">The hue channel of the HSL image.</param>
            <param name="saturation">The saturation channel of the HSL image.</param>
            <param name="luminosity">The luminosity channel of the HSL image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.HslImage`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.HslImage`1"/> class which has the 
            default value (0) for all the pixels of each channel.
            </summary>
            <param name="width">The width, in pixels, of the image.</param>
            <param name="height">The height, in pixels, of the image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.HslImage`1.#ctor(BioLab.ImageProcessing.RgbImage{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.HslImage`1"/> class
            using an <see cref="T:BioLab.ImageProcessing.RgbPixel`1"/> instance.
            </summary>
            <param name="image">The <see cref="T:BioLab.ImageProcessing.RgbPixel`1"/> used to create the new instance.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.HslImage`1.CreateNew(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/>.
            </summary>
            <param name="width">The width, in pixels, of the image.</param>
            <param name="height">The height, in pixels, of the image.</param>
            <returns>
            The <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.HslImage`1.CreateNew(BioLab.ImageProcessing.Image{`0}[])">
            <summary>
            Creates a new <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/>.
            </summary>
            <param name="imageChannels">An array of <see cref="T:BioLab.ImageProcessing.Image`1"/> representing the channels of the new image.</param>
            <returns>
            The <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/> this method creates.
            </returns>
        </member>
        <member name="P:BioLab.ImageProcessing.HslImage`1.HueChannel">
            <summary>
            Gets the hue channel of this <see cref="T:BioLab.ImageProcessing.HslImage`1"/>
            </summary>
            <value>The hue channel of this image.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.HslImage`1.LightnessChannel">
            <summary>
            Gets the lightness channel of this <see cref="T:BioLab.ImageProcessing.HslImage`1"/>
            </summary>
            <value>The lightness channel of this image.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.HslImage`1.SaturationChannel">
            <summary>
            Gets the saturation channel of this <see cref="T:BioLab.ImageProcessing.HslImage`1"/>
            </summary>
            <value>The saturation channel of this image.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.ComplexImage">
            <summary>
            Represents an image where each pixel is a complex number.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ComplexImage.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ComplexImage"/> class.
            </summary>
            <param name="width">The width, in pixels, of the new image.</param>
            <param name="height">The height, in pixels, of the new image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ComplexImage.#ctor(System.Int32,System.Int32,System.Double[],System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ComplexImage"/> class.
            </summary>
            <param name="width">The width, in pixels, of the new image.</param>
            <param name="height">The height, in pixels, of the new image.</param>
            <param name="re">An array containing the real part of each pixel value.</param>
            <param name="im">An array containing the imaginary part of each pixel value.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ComplexImage.#ctor(BioLab.ImageProcessing.Image{System.Double},BioLab.ImageProcessing.Image{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ComplexImage"/> class.
            </summary>
            <param name="re">An image containing the real part of each pixel value.</param>
            <param name="im">An image containing the imaginary part of each pixel value.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ComplexImage.CreateNew(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/>.
            </summary>
            <param name="width">The width, in pixels, of the image.</param>
            <param name="height">The height, in pixels, of the image.</param>
            <returns>
            The <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ComplexImage.CreateNew(BioLab.ImageProcessing.Image{System.Double}[])">
            <summary>
            Creates a new <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/>.
            </summary>
            <param name="imageChannels">An array of <see cref="T:BioLab.ImageProcessing.Image`1"/> representing the channels of the new image.</param>
            <returns>
            The <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ComplexImage.CalculateSpectrum(System.Boolean)">
            <summary>
            Calculates the magnitude of each pixel value.
            </summary>
            <param name="logarithmic">if set to <c>true</c> a logarithmic function is applied to each resulting value.</param>
            <returns>An <see cref="T:BioLab.ImageProcessing.Image`1"/> containing the magnitude of each complex value.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ComplexImage.CalculatePhase">
            <summary>
            Calculates the phase of each pixel value.
            </summary>
            <returns>An <see cref="T:BioLab.ImageProcessing.Image`1"/> containing the phase, in radians, of each value.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ComplexImage.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/>.
            </summary>
            <returns>
            The <see cref="T:BioLab.ImageProcessing.MultipleChannelImage`1"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ComplexImage.InternalClone">
            <summary>
            Creates an exact copy of this instance.
            </summary>
            <returns>
            The <see cref="T:BioLab.Common.Data"/> this method creates.
            </returns>
        </member>
        <member name="P:BioLab.ImageProcessing.ComplexImage.Real">
            <summary>
            Gets the image containing the real part of each pixel value.
            </summary>
            <value>The real.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ComplexImage.Imaginary">
            <summary>
            Gets the image containing the Imaginary part of each pixel value.
            </summary>
            <value>The imaginary.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ComplexImage.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:BioLab.Math.Complex"/> at the specified index.
            </summary>
            <value>The pixel value.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ComplexImage.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the <see cref="T:BioLab.Math.Complex"/> with the specified row.
            </summary>
            <value>The pixel value.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ComplexImage.Item(BioLab.Math.Geometry.IntPoint2D)">
            <summary>
            Gets or sets the <see cref="T:BioLab.Math.Complex"/> with the specified location.
            </summary>
            <value>The pixel value.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.ImageExtensions">
            <summary>
            Provides a set of static methods for converting images to and from other data types.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageExtensions.ToMatrix(BioLab.ImageProcessing.Image{System.Double})">
            <summary>
            Creates a <see cref="T:BioLab.Math.LinearAlgebra.Matrix"/> from a <see cref="T:BioLab.ImageProcessing.Image`1"/>.
            </summary>
            <param name="image">A <see cref="T:BioLab.ImageProcessing.ImageExtensions"/> to create the <see cref="T:BioLab.Math.LinearAlgebra.Matrix"/> from.</param>
            <returns>
            A <see cref="T:BioLab.Math.LinearAlgebra.Matrix"/> created from the input <see cref="T:BioLab.ImageProcessing.Image`1"/>.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageExtensions.ToMatrix(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Creates a <see cref="T:BioLab.Math.LinearAlgebra.Matrix"/> from a <see cref="T:BioLab.ImageProcessing.Image`1"/>.
            </summary>
            <param name="image">A <see cref="T:BioLab.ImageProcessing.ImageExtensions"/> to create the <see cref="T:BioLab.Math.LinearAlgebra.Matrix"/> from.</param>
            <returns>
            A <see cref="T:BioLab.Math.LinearAlgebra.Matrix"/> created from the input <see cref="T:BioLab.ImageProcessing.Image`1"/>.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageExtensions.ToMatrix(BioLab.ImageProcessing.Image{System.Int32})">
            <summary>
            Creates a <see cref="T:BioLab.Math.LinearAlgebra.Matrix"/> from a <see cref="T:BioLab.ImageProcessing.Image`1"/>.
            </summary>
            <param name="image">A <see cref="T:BioLab.ImageProcessing.ImageExtensions"/> to create the <see cref="T:BioLab.Math.LinearAlgebra.Matrix"/> from.</param>
            <returns>
            A <see cref="T:BioLab.Math.LinearAlgebra.Matrix"/> created from the input <see cref="T:BioLab.ImageProcessing.Image`1"/>.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageExtensions.ToImage(BioLab.Math.LinearAlgebra.Matrix)">
            <summary>
            Creates a <see cref="T:BioLab.ImageProcessing.Image`1"/> from a <see cref="T:BioLab.Math.LinearAlgebra.Matrix"/>.
            </summary>
            <param name="matrix">A <see cref="T:BioLab.ImageProcessing.ImageExtensions"/> to create the <see cref="T:BioLab.ImageProcessing.Image`1"/> from.</param>
            <returns>
            A <see cref="T:BioLab.ImageProcessing.Image`1"/> created from the input <see cref="T:BioLab.Math.LinearAlgebra.Matrix"/>.
            </returns>
        </member>
        <member name="T:BioLab.GUI.Forms.ExceptionMessageBox">
            <summary>
            Displays a message box that shows the details of a given Exception.
            </summary>
        </member>
        <member name="F:BioLab.GUI.Forms.ExceptionMessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.ExceptionMessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.Forms.ExceptionMessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.ExceptionMessageBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.Forms.ExceptionMessageBox"/> class.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.ExceptionMessageBox.Show(System.Exception,System.String,System.String)">
            <summary>
            Displays the message box.
            </summary>
            <param name="ex">The exception whose details have to be shown.</param>
            <param name="title">The message box title.</param>
            <param name="message">A message to be displayed in the message box.</param>
            <returns>A <see cref="T:System.Windows.Forms.DialogResult"/> value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:BioLab.GUI.Forms.ExceptionMessageBox.Show(System.Exception,System.String)">
            <summary>
            Displays the message box.
            </summary>
            <param name="ex">The exception whose details have to be shown.</param>
            <param name="message">A message to be displayed in the message box.</param>
            <returns>
            A <see cref="T:System.Windows.Forms.DialogResult"/> value that specifies which message box button is clicked by the user.
            </returns>
        </member>
        <member name="T:BioLab.Classification.Unsupervised.Clusterizer">
            <summary>
            Represents a generic clustering algorithm.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.Clusterizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Unsupervised.Clusterizer"/> class.
            </summary>
            <remarks>Note that the input parameters must be initialized before running the algorithm.</remarks>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.Clusterizer.#ctor(BioLab.Common.FeatureVectorSet)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Unsupervised.Clusterizer"/> class and allows to specify the set of vectors.
            </summary>
            <param name="vectorSet">The vector set to be clusterized.</param>
        </member>
        <member name="P:BioLab.Classification.Unsupervised.Clusterizer.VectorSet">
            <summary>
            Gets or sets the set of vectors to be clusterized. The algorithm, at the end of
            its execution, will assign each vector to a given cluster (setting its Class property).
            </summary>
            <value>The set of vectors to be clusterized.</value>
        </member>
        <member name="T:BioLab.Classification.Unsupervised.IterativeClusterizer">
            <summary>
            Represents a generic iterative clustering algorithm.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.IterativeClusterizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Unsupervised.IterativeClusterizer"/> class.
            </summary>
            <remarks>Note that the input parameters must be initialized before running the algorithm.</remarks>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.IterativeClusterizer.#ctor(BioLab.Common.FeatureVectorSet)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Unsupervised.IterativeClusterizer"/> class and allows to specify the vector set.
            </summary>
            <param name="vectorSet">The set of vectors to be clusterized.</param>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.IterativeClusterizer.Initialize">
            <summary>
            This method is called before the first iteration, to initialize the data structures and other internal parameters of the algorithm.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.IterativeClusterizer.ExecuteIteration">
            <summary>
            Executes one iteration of the algorithm.
            </summary>
            <returns>true if the algorithm converged, false otherwise.</returns>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.IterativeClusterizer.Run">
            <summary>
            Executes the algorithm until it converges or the maximum number of iterations is reached.
            </summary>
            <remarks>Throws an <see cref="T:BioLab.Common.AlgorithmAbortedException"/> if the processing is aborted by the user.</remarks>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.IterativeClusterizer.OnProgressChanged">
            <summary>
            Raises the ProgressChanged event.
            </summary>
            <returns>false if the algorithm should be aborted, true otherwise.</returns>
        </member>
        <member name="P:BioLab.Classification.Unsupervised.IterativeClusterizer.CurrentIteration">
            <summary>
            Gets or sets the current iteration number.
            </summary>
            <value>The current iteration number.</value>
        </member>
        <member name="P:BioLab.Classification.Unsupervised.IterativeClusterizer.MaxIterations">
            <summary>
            Gets or sets the maximum number of iterations.
            </summary>
            <value>The maximum number of iterations.</value>
        </member>
        <member name="T:BioLab.Classification.Unsupervised.KMeanClustering">
            <summary>
            Represents a k-Means clustering algorithm.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.KMeanClustering.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Unsupervised.KMeanClustering"/> class.
            </summary>
            <remarks>Note that the input parameters must be initialized before running the algorithm.</remarks>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.KMeanClustering.#ctor(BioLab.Common.FeatureVectorSet,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Unsupervised.KMeanClustering"/> class and allows to specify the vector set and the number of clusters.
            </summary>
            <param name="vectorSet">The set of vectors to be clusterized.</param>
            <param name="clusterCount">The number of clusters to be created.</param>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.KMeanClustering.Initialize">
            <summary>
            This method is called before the first iteration, to initialize the data structures and other internal parameters of the algorithm.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.KMeanClustering.ExecuteIteration">
            <summary>
            Executes one iteration of the algorithm.
            </summary>
            <returns>
            true if the algorithm converged, false otherwise.
            </returns>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.KMeanClustering.GetCentroid(System.Int32)">
            <summary>
            Gets the current centroid of a given cluster.
            </summary>
            <param name="clusterIndex">Index of the cluster.</param>
            <returns>The <see cref="T:BioLab.Common.FeatureVector"/> corresponding to the centroid.</returns>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.KMeanClustering.AssignVectorsToCentroids">
            <summary>
            Riassegna i vettori ai cluster in base alla minima distanza dai centri
            </summary>
            <returns>true se almeno un vettore è stato assegnato a un diverso cluster</returns>
        </member>
        <member name="P:BioLab.Classification.Unsupervised.KMeanClustering.ClusterCount">
            <summary>
            Gets or sets the number of clusters to be created by the algorithm.
            </summary>
            <value>The number of clusters.</value>
        </member>
        <member name="F:BioLab.Classification.Unsupervised.EMClusteringImplementationBase.Θ">
            <summary>
            La mixture di distribuzioni multinormali
            Pubblica per semplificare la visualizzazione e altri utilizzi
            </summary>
        </member>
        <member name="T:BioLab.Classification.Unsupervised.EMClustering">
            <summary>
            Represents an Expectation-Maximization (EM) clustering algorithm.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.EMClustering.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Unsupervised.EMClustering"/> class.
            </summary>
            <remarks>Note that the input parameters must be initialized before running the algorithm.</remarks>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.EMClustering.#ctor(BioLab.Common.FeatureVectorSet,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Unsupervised.EMClustering"/> class and allows to specify the vector set and the number of clusters.
            </summary>
            <param name="vectorSet">The set of vectors to be clusterized.</param>
            <param name="clusterCount">The number of clusters.</param>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.EMClustering.ExecuteIteration">
            <summary>
            Executes one iteration of the algorithm.
            </summary>
            <returns>
            true if the algorithm converged, false otherwise.
            </returns>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.EMClustering.Initialize">
            <summary>
            This method is called before the first iteration, to initialize the data structures and other internal parameters of the algorithm.
            </summary>
        </member>
        <member name="P:BioLab.Classification.Unsupervised.EMClustering.ClusterCount">
            <summary>
            Gets or sets the number of clusters to be created by the algorithm.
            </summary>
            <value>The number of clusters.</value>
        </member>
        <member name="P:BioLab.Classification.Unsupervised.EMClustering.NormalMixture">
            <summary>
            Gets the normal mixture distribution as estimated by the algorithm at the current iteration.
            </summary>
            <value>The current normal mixture distribution.</value>
        </member>
        <member name="T:BioLab.Classification.Unsupervised.AemClusteringMmdl">
            <summary>
            An implementation of the Agglomerative Expectation-Maximization (AEM) clustering algorithm proposed
            in [Figueiredo, M.A.T., Leitao, J.M.N., Jain, A.K.: On Fitting Mixture Models, in E. Hancock and M. Pellilo(Editors), 
            Energy Minimization Methods in Computer Vision and Pattern Recognition, 54-69, Springer Verlag, 1999].
            </summary>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.AemClusteringMmdl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Unsupervised.AemClusteringMmdl"/> class.
            </summary>
            <remarks>Note that the input parameters must be initialized before running the algorithm.</remarks>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.AemClusteringMmdl.#ctor(BioLab.Common.FeatureVectorSet,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Unsupervised.AemClusteringMmdl"/> class and allows to specify the vector set and the parameters.
            </summary>
            <param name="vectorSet">The set of vectors to be clusterized.</param>
            <param name="minClusterCount">The minimum number of clusters.</param>
            <param name="maxClusterCount">The maximum number of clusters.</param>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.AemClusteringMmdl.Initialize">
            <summary>
            This method is called before the first iteration, to initialize the data structures and other internal parameters of the algorithm.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.AemClusteringMmdl.ExecuteIteration">
            <summary>
            Executes one iteration of the algorithm.
            </summary>
            <returns>
            true if the algorithm converged, false otherwise.
            </returns>
        </member>
        <member name="M:BioLab.Classification.Unsupervised.AemClusteringMmdl.OnProgressChanged">
            <summary>
            Raises the ProgressChanged event.
            </summary>
            <returns>
            false if the algorithm should be aborted, true otherwise.
            </returns>
        </member>
        <member name="P:BioLab.Classification.Unsupervised.AemClusteringMmdl.NormalMixture">
            <summary>
            Gets the normal mixture distribution as estimated by the algorithm at the current iteration.
            </summary>
            <value>The current normal mixture distribution.</value>
        </member>
        <member name="P:BioLab.Classification.Unsupervised.AemClusteringMmdl.LastClusteringCost">
            <summary>
            Gets the last clustering cost.
            </summary>
            <value>The last clustering cost.</value>
        </member>
        <member name="P:BioLab.Classification.Unsupervised.AemClusteringMmdl.MinClusterCount">
            <summary>
            Gets or sets the minimum number of clusters.
            </summary>
            <value>The minimum number of clusters.</value>
        </member>
        <member name="P:BioLab.Classification.Unsupervised.AemClusteringMmdl.MaxClusterCount">
            <summary>
            Gets or sets the maximum number of clusters.
            </summary>
            <value>The maximum number of clusters.</value>        
        </member>
        <member name="T:BioLab.Math.NamespaceDoc">
            <summary>
            Provides various mathematical classes, including common mathematical functions and algorithms.
            </summary>
        </member>
        <member name="T:BioLab.Math.ComplexMath">
            <summary>Provides trigonometric, logarithmic, and other common mathematical functions for complex types</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Absolute(BioLab.Math.Complex)">
            <summary>Return the absolute value of a complex type calculated as the Euclidean norm</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Argument(BioLab.Math.Complex)">
            <summary>Calculate the complex argument of a complex type.  Also commonly referred to as the phase.</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Conjugate(BioLab.Math.Complex)">
            <summary>Return the complex conjugate of a complex type</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Cos(BioLab.Math.Complex)">
            <summary>Return the complex cosine of a complex type</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Cosh(BioLab.Math.Complex)">
            <summary>Return the complex hyperbolic cosine of a complex type</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Exp(BioLab.Math.Complex)">
            <summary>Return the complex exponential of a complex type</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Pow(BioLab.Math.Complex,BioLab.Math.Complex)">
            <summary>Raise 'leftSide' to the power of 'rightSide'</summary>
            <param name="leftSide"><b>Complex</b> value as base</param>
            <param name="rightSide"><b>Complex</b> value as exponent</param>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Log1p(System.Double)">
            <summary>
            Return an approximation to Log(1 + x)
            </summary>
            <param name="x">The real parameter</param>
            <returns>The value of Log(1+x)</returns>
        </member>
        <member name="M:BioLab.Math.ComplexMath.LogAbs(BioLab.Math.Complex)">
            <summary>
            Return the value of Log(Abs(z)).
            </summary>
            <param name="value">The complex number.</param>
            <returns>The calculated value.</returns>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Log(BioLab.Math.Complex)">
            <summary>Return the complex logarithm of a complex type</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Max(BioLab.Math.Complex,BioLab.Math.Complex)">
            <summary>Given two complex types return the one with the maximum norm</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Norm(BioLab.Math.Complex)">
            <summary>Return the Euclidean norm of a complex type</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Polar(BioLab.Math.Complex)">
            <summary>Return the polar representation of a complex type</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Sin(BioLab.Math.Complex)">
            <summary>Returns the sine of a complex type</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Sinh(BioLab.Math.Complex)">
            <summary>Returns the hyperbolic sine of a complex type</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Sqrt(BioLab.Math.Complex)">
            <summary>Returns the square root of a complex type</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Tan(BioLab.Math.Complex)">
            <summary>Returns the tangent of a complex type</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Tanh(BioLab.Math.Complex)">
            <summary>Returns the hyperbolic tangent of a complex type</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Asin(BioLab.Math.Complex)">
            <summary>Returns the inverse sine of a complex type.</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Acos(BioLab.Math.Complex)">
            <summary>Returns the inverse cosine of a complex type.</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Atan(BioLab.Math.Complex)">
            <summary>Returns the inverse tangent of a complex type.</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Asinh(BioLab.Math.Complex)">
            <summary>Returns the inverse hyperbolic sine of a complex type</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Acosh(BioLab.Math.Complex)">
            <summary>Returns the inverse hyperbolic cosine of a complex type</summary>
        </member>
        <member name="M:BioLab.Math.ComplexMath.Atanh(BioLab.Math.Complex)">
            <summary>Returns the inverse hyperbolic tangent of a complex type</summary>
        </member>
        <member name="F:BioLab.GUI.UserControls.ImageBinarizationParameterControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.UserControls.ImageBinarizationParameterControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.UserControls.ImageBinarizationParameterControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BioLab.GUI.Forms.ImageEditorForm">
            <summary>
            Represents a form that allows the user to modify an image.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.ImageEditorForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.Forms.ImageEditorForm"/> class.
            </summary>
        </member>
        <member name="F:BioLab.GUI.Forms.ImageEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.ImageEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.Forms.ImageEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:BioLab.GUI.Forms.ImageEditorForm.Image">
            <summary>
            Gets or sets the image to be edited.
            </summary>
            <value>The image to be edited.</value>
        </member>
        <member name="T:BioLab.GUI.Forms.SelectFromListForm">
            <summary>
            Represents a simple Dialog box that let the user choose one item from a list of strings.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.SelectFromListForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.Forms.SelectFromListForm"/> class.
            </summary>
        </member>
        <member name="F:BioLab.GUI.Forms.SelectFromListForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.Forms.SelectFromListForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.Forms.SelectFromListForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:BioLab.GUI.Forms.SelectFromListForm.SelectedIndex">
            <summary>
            Gets the index of the item selected from the list.
            </summary>
            <value>The index of the selected item.</value>
        </member>
        <member name="P:BioLab.GUI.Forms.SelectFromListForm.Items">
            <summary>
            Gets access to the items in the list.
            </summary>
            <value>The items in the list.</value>
        </member>
        <member name="T:BioLab.Classification.Supervised.ClassificationStatistics">
            <summary>
            Represents useful classifier statistics for a subsequent analysis.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.ClassificationStatistics.CalculateClassificationError(BioLab.Classification.Supervised.Classifier,BioLab.Common.FeatureVectorSet)">
            <summary>
            Calculates the classification error of a classifier on a test set.
            </summary>
            <remarks>All the vectors in the test set must have a class index.</remarks>
            <returns>The error percentage [0..1].</returns>
        </member>
        <member name="T:BioLab.Classification.Supervised.NNClassifier">
            <summary>
            Represents a Nearest Neighbour classifier. It involves a training set of many examples. 
            A new example is classified with the class of the nearest element in the training set.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.NNClassifier.#ctor(BioLab.Common.FeatureVectorSet)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.NNClassifier"/> class. 
            The distance measure is assumed be Euclidean.
            </summary>
            <param name="trainingSet">The training set.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.NNClassifier.#ctor(BioLab.Common.FeatureVectorSet,BioLab.Common.FeatureDistance)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.NNClassifier"/> class.
            </summary>
            <param name="trainingSet">The training set.</param>
            <param name="distance">The distance measure.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.NNClassifier.Classify(BioLab.Common.FeatureVector)">
            <summary>
            Classifies a feature vector according to class of the minimum distance pattern in 
            the training set.
            </summary>
            <param name="vector">The vector to be classified.</param>
            <returns>
            [0..classesCount-1] or -1 (unknown class)
            </returns>
        </member>
        <member name="M:BioLab.Classification.Supervised.NNClassifier.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the current <see cref="T:BioLab.Common.Data"/> to a specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.Common.Data"/> will be saved.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.NNClassifier.InternalClone">
            <summary>
            Creates an exact copy of this instance.
            </summary>
            <returns>
            The <see cref="T:BioLab.Common.Data"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.Classification.Supervised.NNClassifier.LoadFromFile(System.String)">
            <summary>
            Creates a <see cref="T:BioLab.Classification.Supervised.NNClassifier"/> from the specified file.
            </summary>
            <param name="filePath">A string that contains the name of the file from which to create the <see cref="T:BioLab.Classification.Supervised.NNClassifier"/>.</param>
            <returns>
            The <see cref="T:BioLab.Classification.Supervised.NNClassifier"/> this method creates.
            </returns>
        </member>
        <member name="P:BioLab.Classification.Supervised.NNClassifier.TrainingSet">
            <summary>
            Gets the training set.
            </summary>
            <value>The training set.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.NNClassifier.Distance">
            <summary>
            Gets the distance measure.
            </summary>
            <value>The distance.</value>
        </member>
        <member name="T:BioLab.Classification.Supervised.NNClassifierBuilder">
            <summary>
            Builder for a Nearest Neighbour classifier
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.NNClassifierBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.NNClassifierBuilder"/> class.
            The default distance measure is Euclidean.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.NNClassifierBuilder.#ctor(BioLab.Common.FeatureVectorSet)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.NNClassifierBuilder"/> class.
            The default distance measure is Euclidean.
            </summary>
            <param name="trainingSet">The training set.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.NNClassifierBuilder.#ctor(BioLab.Common.FeatureVectorSet,BioLab.Common.FeatureDistance)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.NNClassifierBuilder"/> class.
            </summary>
            <param name="trainingSet">The training set.</param>
            <param name="distance">The distance measure.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.NNClassifierBuilder.Run">
            <summary>
            Executes the Training of the Nearest Neighbour classifier and return the classifier.
            The NN Trainng concerns the storage of the entire training set in memory.
            </summary> 
        </member>
        <member name="P:BioLab.Classification.Supervised.NNClassifierBuilder.Distance">
            <summary>
            Gets or sets the distance type.
            </summary>
            <value>The distance.</value>
        </member>
        <member name="T:BioLab.Classification.Supervised.KnnClassifier">
            <summary>
            Represents a K Nearest Neighbour classifier. It involves a training set of many examples.
            Given a new example, the k closest pattern are selected. Each pattern vote for its class.
            The new example is classified with the most voted class.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.KnnClassifier.#ctor(BioLab.Common.FeatureVectorSet,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.KnnClassifier"/> class.
            The distance measure is assumed Euclidean.
            </summary>
            <param name="trainingSet">The training set.</param>
            <param name="k">The number of neighbours that partecipate to the vote.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.KnnClassifier.#ctor(BioLab.Common.FeatureVectorSet,System.Int32,BioLab.Common.FeatureDistance)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.KnnClassifier"/> class.
            </summary>
            <param name="trainingSet">The training set.</param>
            <param name="k">The number of neighbours that partecipate to the vote.</param>
            <param name="distance">The distance.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.KnnClassifier.Classify(BioLab.Common.FeatureVector)">
            <summary>
            Classifies a feature vector.
            </summary>
            <param name="vector">The vector to be classified.</param>
            <returns>
            [0..classesCount-1] or -1 (unknown class)
            </returns>
        </member>
        <member name="M:BioLab.Classification.Supervised.KnnClassifier.Classify(BioLab.Common.FeatureVector,System.Double[]@)">
            <summary>
            Classifies the specified vector.
            </summary>
            <param name="vector">The vector to classify.</param>
            <param name="confidence">The confidence.</param>
            <returns>An integer that represents the class of the vector.</returns>
        </member>
        <member name="M:BioLab.Classification.Supervised.KnnClassifier.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the current <see cref="T:BioLab.Common.Data"/> to a specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.Common.Data"/> will be saved.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.KnnClassifier.InternalClone">
            <summary>
            Creates an exact copy of this instance.
            </summary>
            <returns>
            The <see cref="T:BioLab.Common.Data"/> this method creates.
            </returns>
        </member>
        <member name="P:BioLab.Classification.Supervised.KnnClassifier.TrainingSet">
            <summary>
            Gets the training set.
            </summary>
            <value>The training set.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.KnnClassifier.Distance">
            <summary>
            Gets the distance measure.
            </summary>
            <value>The distance.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.KnnClassifier.K">
            <summary>
            Gets or sets the K parameter.
            </summary>
        </member>
        <member name="P:BioLab.Classification.Supervised.KnnClassifier.HasConfidence">
            <summary>
            true if the classifier returns confidence information.
            </summary>
        </member>
        <member name="T:BioLab.Classification.Supervised.KnnClassifierBuilder">
            <summary>
            Builder for a K Nearest Neighbour classifier
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.KnnClassifierBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.KnnClassifierBuilder"/> class.
            The default distance measure is Euclidean.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.KnnClassifierBuilder.#ctor(BioLab.Common.FeatureVectorSet,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.KnnClassifierBuilder"/> class.
            The default distance measure is Euclidean.
            </summary>
            <param name="trainingSet">The training set.</param>
            <param name="k">The number of neighbours that partecipate to the vote.</param>
            <param name="makeCopy">True if the training set must be cloned.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.KnnClassifierBuilder.#ctor(BioLab.Common.FeatureVectorSet,System.Int32,BioLab.Common.FeatureDistance,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.KnnClassifierBuilder"/> class.
            </summary>
            <param name="trainingSet">The training set.</param>
            <param name="k">The number of neighbours that partecipate to the vote.</param>
            <param name="distance">The distance measure.</param>
            <param name="makeCopy">True if the training set must be cloned.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.KnnClassifierBuilder.Run">
            <summary>
            Executes the Training of the K Nearest Neighbour classifier and return the classifier.
            The KNN Trainng concerns the storage of the entire training set in memory.
            </summary>
        </member>
        <member name="P:BioLab.Classification.Supervised.KnnClassifierBuilder.Distance">
            <summary>
            Gets or sets the distance.
            </summary>
            <value>The distance measure.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.KnnClassifierBuilder.K">
            <summary>
            Gets or sets the K parameter.
            The number of neighbours that partecipate to the vote.
            </summary>
        </member>
        <member name="T:BioLab.Classification.Supervised.SvmType">
            <summary>
            SVM problem type.
            see LIBSVM library for more details:
            http://www.csie.ntu.edu.tw/~cjlin/libsvm/
            </summary>
        </member>
        <member name="F:BioLab.Classification.Supervised.SvmType.CSvc">
            <summary>
            Support Vector Classification
            </summary>
        </member>
        <member name="F:BioLab.Classification.Supervised.SvmType.NuSvc">
            <summary>
            nu-Support Vector Classification
            </summary>
        </member>
        <member name="F:BioLab.Classification.Supervised.SvmType.OneClass">
            <summary>
            one-class SVM (distribution estimation)
            </summary>
        </member>
        <member name="F:BioLab.Classification.Supervised.SvmType.EpsilonSvr">
            <summary>
            Support Vector Regression
            </summary>
        </member>
        <member name="F:BioLab.Classification.Supervised.SvmType.NuSvr">
            <summary>
            nu-Support Vector Regression
            </summary>
        </member>
        <member name="T:BioLab.Classification.Supervised.KernelType">
            <summary>
            Kernel Types
            </summary>
        </member>
        <member name="F:BioLab.Classification.Supervised.KernelType.Linear">
            <summary>
            Linear kernel
            </summary>
        </member>
        <member name="F:BioLab.Classification.Supervised.KernelType.Polynomial">
            <summary>
            Polynomial kernel
            </summary>
        </member>
        <member name="F:BioLab.Classification.Supervised.KernelType.RadialBasisFunction">
            <summary>
            Radial Basis Function Kernel
            </summary>
        </member>
        <member name="F:BioLab.Classification.Supervised.KernelType.Sigmoid">
            <summary>
            Sigmoidal kernel
            </summary>
        </member>
        <member name="T:BioLab.Classification.Supervised.SvmWrapper">
            <summary>
            Wrapper for the extern LIBSVM library
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.SvmWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.SvmWrapper"/> class.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.SvmWrapper.Finalize">
            <summary>
            Implement Distructor for a Dispose call
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.SvmWrapper.Train(System.Double[],System.Double[])">
            <summary>
            Train the SVM 
            </summary>
            <param name="classes">Target vector. Contains the class of each training pattern.</param>
            <param name="allData">Training set without classes.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.SvmWrapper.Classify(System.Double[])">
            <summary>
            Classifies the specified vectoy with the model generated in training phase.
            </summary>
            <param name="vect">The vector to classify</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.SvmWrapper.ComputeProbabilities(System.Double[],System.Int32)">
            <summary>
            Estimates probabilities for each class. 
            </summary>
            <param name="vect">The vector on which estimates membering probabilities.</param>
            <param name="nclasses">The number of classes involved.</param> 
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmWrapper.SvmType">
            <summary>
            Gets or sets the type of the SVM.
            </summary>
            <value>The type of the SVM.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmWrapper.KernelType">
            <summary>
            Gets or sets the type of the kernel.
            </summary>
            <value>The type of the kernel.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmWrapper.Degree">
            <summary>
            Gets or sets the degree in kernel function.
            Default is 3.
            </summary>
            <value>The degree.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmWrapper.Gamma">
            <summary>
            Gets or sets the gamma in kernel function.
            Default is 1/k.
            </summary>
            <value>The gamma.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmWrapper.Coef0">
            <summary>
            Gets or sets the coef0 in kernel function.
            Default is 0.
            </summary>
            <value>The coef0.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmWrapper.Nu">
            <summary>
            Gets or sets the nu parameter 
            of nu-SVC, one-class SVM, and nu-SVR.
            Default is 0.5.
            </summary>
            <value>The nu.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmWrapper.CacheSize">
            <summary>
            Gets or sets the cache memory size in MB.
            Default is 100.
            </summary>
            <value>The size of the cache.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmWrapper.Cost">
            <summary>
            Gets or sets the cost parameter C.
            Default is 1.
            </summary>
            <value>The cost.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmWrapper.EpsilonTolerance">
            <summary>
            Gets or sets the epsilon tolerance of termination criterion 
            Default is 0.001.
            </summary>
            <value>The epsilon tolerance.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmWrapper.EpsilonInLossFunction">
            <summary>
            Gets or sets the epsilon in loss function of epsilon-SVR.
            Default is 0.1.
            </summary>
            <value>The epsilon in loss function.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmWrapper.Shrinking">
            <summary>
            Gets or sets whether to use the shrinking heuristics
            Default is 1.
            </summary>
            <value><c>true</c> if shrinking; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BioLab.Classification.Supervised.SvmClassifier">
            <summary>
            Represents an SVM classifier
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.SvmClassifier.#ctor(BioLab.Classification.Supervised.SvmWrapper,System.Double[],System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.SvmClassifier"/> class.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.SvmClassifier.Classify(BioLab.Common.FeatureVector)">
            <summary>
            Classifies a feature vector.
            </summary>
            <param name="vector">The vector to be classified.</param>
            <returns>
            [0..classesCount-1] or -1 (unknown class)
            </returns>
        </member>
        <member name="M:BioLab.Classification.Supervised.SvmClassifier.Predict(BioLab.Common.FeatureVector)">
            <summary>
            Make prediction for a feature vector (Regression Case).
            </summary>
            <param name="vector">The vector.</param>
            <returns>
            A real value.
            </returns>
        </member>
        <member name="M:BioLab.Classification.Supervised.SvmClassifier.ComputeProbabilities(BioLab.Common.FeatureVector,System.Int32)">
            <summary>
            Estimates membering probabilities of the vector in each class.
            </summary>
            <param name="vector">The vector on which estimates probabilities.</param>
            <param name="numberOfClasses">The number of classes involved.</param>
            <returns>
            A double precision array with a probability value for each class.
            </returns>
        </member>
        <member name="M:BioLab.Classification.Supervised.SvmClassifier.ScaleFeature(System.Double,System.Int32)">
            <summary>
            Scales th kth feature of a vector.
            </summary>
            <param name="v">A feature vector.</param>
            <param name="k">The index of the feature to scale.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.SvmClassifier.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the current <see cref="T:BioLab.Common.Data"/> to a specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.Common.Data"/> will be saved.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.SvmClassifier.InternalClone">
            <summary>
            Creates an exact copy of this instance.
            </summary>
            <returns>
            The <see cref="T:BioLab.Common.Data"/> this method creates.
            </returns>
        </member>
        <member name="T:BioLab.Classification.Supervised.SvmClassifierBuilder">
            <summary>
            Builder for an SVM classifier
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.SvmClassifierBuilder.#ctor(BioLab.Common.FeatureVectorSet)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.SvmClassifierBuilder"/> class.
            </summary>
            <param name="trainingSet">The training set.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.SvmClassifierBuilder.Run">
            <summary>
            Trains a SVM classifier.
            </summary>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmClassifierBuilder.SvmType">
            <summary>
            Gets or sets the type of the SVM.
            </summary>
            <value>The type of the SVM.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmClassifierBuilder.KernelType">
            <summary>
            Gets or sets the type of the kernel.
            </summary>
            <value>The type of the kernel.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmClassifierBuilder.Degree">
            <summary>
            Gets or sets the degree in kernel function.
            Default is 3.
            </summary>
            <value>The degree.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmClassifierBuilder.Gamma">
            <summary>
            Gets or sets the gamma in kernel function.
            Default is 1/k.
            </summary>
            <value>The gamma.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmClassifierBuilder.Coef0">
            <summary>
            Gets or sets the coef0 in kernel function.
            Default is 0.
            </summary>
            <value>The coef0.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmClassifierBuilder.Nu">
            <summary>
            Gets or sets the nu parameter 
            of nu-SVC, one-class SVM, and nu-SVR.
            Default is 0.5.
            </summary>
            <value>The nu.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmClassifierBuilder.CacheSize">
            <summary>
            Gets or sets the cache memory size in MB.
            Default is 100.
            </summary>
            <value>The size of the cache.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmClassifierBuilder.Cost">
            <summary>
            Gets or sets the cost parameter C.
            Default is 1.
            </summary>
            <value>The cost.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmClassifierBuilder.EpsilonTolerance">
            <summary>
            Gets or sets the epsilon tolerance of termination criterion 
            Default is 0.001.
            </summary>
            <value>The epsilon tolerance.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmClassifierBuilder.EpsilonInLossFunction">
            <summary>
            Gets or sets the epsilon in loss function of epsilon-SVR.
            Default is 0.1.
            </summary>
            <value>The epsilon in loss function.</value>
        </member>
        <member name="P:BioLab.Classification.Supervised.SvmClassifierBuilder.Shrinking">
            <summary>
            Gets or sets whether to use the shrinking heuristics
            Default is 1.
            </summary>
            <value><c>true</c> if shrinking; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:BioLab.Math.LinearAlgebra.Matrix">
            <summary>
            Class that represents a Matrix structure
            </summary>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.#ctor(System.Int32)">
            <summary>Constructs a squared empty matrix of the given order.</summary>
            <param name="order">Order of the squared matrix.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>Constructs an empty matrix of the given size.</summary>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>Constructs a squared matrix of the given size and assigns a given value to all diagonal elements and 0 to the rest.</summary>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
            <remarks>The matrix must be squared so rows must be equal to columns.</remarks>
            <param name="diagonalValue">Value to assign to the diagonal elements.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.#ctor(System.Double[])">
            <summary>Constructs a squared matrix of size equal to the input array size and assigns the diagonal elements and 0 to the rest.</summary>
            <param name="diagonal">Double precision array to assign to the diagonal elements.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.#ctor(BioLab.Math.LinearAlgebra.Vector)">
            <summary>Constructs a squared matrix of size equal to the input vector size and assigns the diagonal elements and 0 to the rest.</summary>
            <param name="diagonal">Vector to assign to the diagonal elements.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.#ctor(System.Double[][],System.Boolean)">
            <summary>Constructs a matrix from the given array.</summary>
            <param name="source">The array the matrix gets constructed from.</param>
            <param name="makeCopy">True if the bidimensional array data must be copied.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.#ctor(System.Double[0:,0:])">
            <summary>Constructs a matrix from the given array.</summary>
            <param name="source">The array the matrix gets constructed from.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.#ctor(System.Int32,System.Int32,System.Double[])">
            <summary>
            Constructs a matrix from the given linear array.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="source">The array the matrix gets constructed from.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.#ctor(System.Int32,System.Int32,System.IntPtr,System.Boolean)">
            <summary>
            Constructs a matrix from an unmanaged memory pointer to a linear array.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="source">The memory pointer the matrix gets constructed from.</param>
            <param name="rowWise">True if the data is laid row-wise, false if it is column-wise.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.Clear">
            <summary>Sets all values to zero.</summary>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.CopyTo(BioLab.Math.LinearAlgebra.Matrix)">
            <summary>Copies the elements of this matrix to the given matrix.</summary>
            <param name="target">The matrix to copy values into.</param>
            <exception cref="T:System.ArgumentNullException">If target is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">If the size is not the same.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.SetAll(System.Double)">
            <summary>
            Set all elements to a given value.
            </summary>
            <param name="value">The value to assign at each element of the matrix.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.InternalClone">
            <summary>Returns a clone of the <b>Matrix</b>.</summary>
            <returns>A copy of the <b>Matrix</b>.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.Clone">
            <summary>Returns a clone of the <b>Matrix</b>.</summary>
            <returns>A copy of the <b>Matrix</b>.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.Transpose">
            <summary>Returns the transposed <b>Matrix</b>.</summary>
            <returns>The transposed <b>Matrix</b>.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.ComputeFrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix. The squared root of the sum of the 
            absolute squares of its elements.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.ComputeNorm1">
            <summary>Returns the One Norm for the matrix.</summary>
            <returns>The maximum column sum.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.ComputeInfinityNorm">
            <summary>Returns the Infinity Norm for the matrix.</summary>
            <returns>The maximum row sum.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.ComputeTrace">
            <summary>The trace of a squared matrix.</summary>
            <exception cref="T:System.ArgumentException">If the matrix is not squared.</exception>
            <returns>Return the trace of a squared matrix. The sum of diagonal elements.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.Add(BioLab.Math.LinearAlgebra.Matrix)">
            <summary>Matrix addition.</summary>
            <param name="matrix">The <b>Matrix</b> to add.</param>
            <exception cref="T:System.ArgumentNullException">If AdditiveMatrix is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">If the size is not the same.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.Add(System.Double)">
            <summary>Matrix scalar addition.</summary>
            <param name="scalar">The scalar to add.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.Subtract(BioLab.Math.LinearAlgebra.Matrix)">
            <summary>Matrix subtraction.</summary>
            <param name="matrix">The <b>Matrix</b> to subtract.</param>
            <exception cref="T:System.ArgumentNullException">If B is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">If the size is not the same.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.Subtract(System.Double)">
            <summary>Matrix scalar subtraction.</summary>
            <param name="scalar">The scalar to subtract.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.Multiply(System.Double)">
            <summary>Matrix-scalar multiplication (Operation: matrix*scalar).</summary>
            <param name="scalar">The double precision scalar.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.Multiply(BioLab.Math.LinearAlgebra.Matrix)">
            <summary>Matrix-matrix multiplication (Operation: matrix*matrix).</summary>
            <param name="matrix">The <b>Matrix</b> with size nxt.</param>
            <exception cref="T:System.ArgumentException">If the number of columns of A and rows of B are not equal.</exception>
            <returns>The <b>Matrix</b> result = A*B with size mxt (only possible if the A size is mxn and B size is nxt).</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.Multiply(BioLab.Math.LinearAlgebra.Vector)">
            <summary>Multiplies this matrix by a vector and returns the result (Operation: matrix*vector).</summary>
            <param name="rightSide">The vector to multiply with.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If rightSide is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <c>this.Columns != rightSide.Size</c>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.LeftMultiply(BioLab.Math.LinearAlgebra.Vector)">
            <summary>Multiplies left this matrix by a row vector and returns the result. (Operation: vector*matrix).</summary>
            <param name="leftSide">The row vector to multiply with.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If leftSide is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">If <strong>this.Rows != leftSide.Size</strong>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.Divide(System.Double)">
            <summary>Divides each element of the matrix by a scalar overwriting the values of this matrix.</summary>
            <param name="scalar">The scalar to divide by.</param>
            <exception cref="T:System.DivideByZeroException">If the scalar is zero.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.Pow(System.Int32)">
            <summary>Matrix to the given power</summary>
            <param name="exponent">The exponent.</param>
            <returns>Returns the Matrix to the specified power </returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.DotPow(System.Int32)">
            <summary>
            Gets a Matrix with each element at a given power.
            </summary>
            <param name="p">The power.</param>
            <returns></returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.Negate">
            <summary>Negate the matrix.</summary>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.GetUpperTriangular">
            <summary>Gets the upper triangular.</summary>
            <returns> A new matrix of the same size with the upper triangular of the original matrix and zero to the rest.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.GetLowerTriangular">
            <summary>Gets the lower triangular.</summary>
            <returns> A new matrix of the same size with the lower triangular of the original matrix and zero to the rest.</returns>        
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.GetSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a matrix that contains the values from the requested sub-matrix.</summary>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="rowCount">The number of rows to copy. Must be positive.</param>
            <param name="columnIndex">The column to start copying from.</param>
            <param name="columnCount">The number of columns to copy. Must be positive.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If: <list><item><paramref name="rowIndex"/> is
            is negative, or greater than or equal to the number of rows.</item>
            <item><paramref name="columnIndex"/> is is negative, or greater than or equal to the number 
            of columns.</item>
            <item><c>(columnIndex + columnLength) &gt;= Columns</c></item>
            <item><c>(rowIndex + rowLength) &gt;= Rows</c></item></list></exception>        
            <exception cref="T:System.ArgumentException">If <paramref name="rowCount"/> or <paramref name="columnCount"/>
            is not positive.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.GetSubMatrix(System.Int32,System.Int32,System.Int32[])">
            <summary>Returns a sub matrix extracted from the current matrix.</summary>
            <param name="startRow">Startial row index</param>
            <param name="endRow">End row index</param>
            <param name="columnIndexes">Array of row indices</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.GetSubMatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>Returns a sub matrix extracted from the current matrix.</summary>
            <param name="rowIndexes">Array of row indices</param>
            <param name="startColumn">Start column index</param>
            <param name="endColumn">End column index</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.GetColumn(System.Int32)">
            <summary> Copies a column into a new <see cref="T:BioLab.Math.LinearAlgebra.Vector"/>.</summary>
            <param name="index">The column to copy.</param>
            <returns>A <see cref="T:BioLab.Math.LinearAlgebra.Vector"/> containing the copied elements.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is negative,
            or greater than or equal to the number of columns.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.GetSubColumn(System.Int32,System.Int32,System.Int32)">
            <summary> Copies the requested column elements into a new <see cref="T:BioLab.Math.LinearAlgebra.Vector"/>.</summary>
            <param name="columnIndex">The column to copy elements from.</param>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="count">The number of elements to copy.</param>
            <returns>A <see cref="T:BioLab.Math.LinearAlgebra.Vector"/> containing the requested elements.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If:
            <list><item><paramref name="columnIndex"/> is negative,
            or greater than or equal to the number of columns.</item>
            <item><paramref name="rowIndex"/> is negative,
            or greater than or equal to the number of rows.</item>
            <item><c>(rowIndex + length) &gt;= Rows.</c></item></list>
            </exception>        
            <exception cref="T:System.ArgumentException">If <paramref name="count"/> is not positive.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.GetRow(System.Int32)">
            <summary> Copies a row into a new <see cref="T:BioLab.Math.LinearAlgebra.Vector"/>.</summary>
            <param name="index">The row to copy.</param>
            <returns>A <see cref="T:BioLab.Math.LinearAlgebra.Vector"/> containing the copied elements.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is negative,
            or greater than or equal to the number of columns.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.GetSubRow(System.Int32,System.Int32,System.Int32)">
            <summary>Copies the requested range of row elements into a new <see cref="T:BioLab.Math.LinearAlgebra.Vector"/>.</summary>
            <param name="rowIndex">The row to copy elements from.</param>
            <param name="columnIndex">The column to start copying from.</param>
            <param name="count">The number of elements to copy.</param>
            <returns>A <see cref="T:BioLab.Math.LinearAlgebra.Vector"/> containing the requested elements.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If:
            <list><item><paramref name="rowIndex"/> is negative,
            or greater than or equal to the number of rows.</item>
            <item><paramref name="columnIndex"/> is negative,
            or greater than or equal to the number of columns.</item>
            <item><c>(columnIndex + length) &gt;= Columns.</c></item></list></exception>        
            <exception cref="T:System.ArgumentException">If <paramref name="count"/> is not positive.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.SetColumn(System.Int32,BioLab.Math.LinearAlgebra.Vector)">
            <summary>Copies the values of the given <see cref="T:BioLab.Math.LinearAlgebra.Vector"/> to the specified column.</summary>
            <param name="index">The column to copy the values to.</param>
            <param name="source">The vector to copy the values from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>        
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is less than zero,
            or greater than or equal to the number of columns.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="source"/> does not
            equal the number of rows of this <strong>Matrix</strong>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.SetColumn(System.Int32,System.Double[])">
            <summary>
            Copies the values of the given array to the specified column.
            </summary>
            <param name="index">The column to copy the values to.</param>
            <param name="source">The array to copy the values from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>        
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is less than zero,
            or greater than or equal to the number of columns.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="source"/> does not
            equal the number of rows of this <strong>Matrix</strong>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.SetRow(System.Int32,BioLab.Math.LinearAlgebra.Vector)">
            <summary>Copies the values of the given <see cref="T:BioLab.Math.LinearAlgebra.Vector"/> to the specified row.</summary>
            <param name="index">The row to copy the values to.</param>
            <param name="source">The vector to copy the values from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>            
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is less than zero,
            or greater than or equal to the number of rows.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="source"/> does not
            equal the number of columns of this <strong>Matrix</strong>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.SetRow(System.Int32,System.Double[])">
            <summary>
            Copies the values of the given array to the specified row.
            </summary>
            <param name="index">The row to copy the values to.</param>
            <param name="source">The array to copy the values from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>  
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is less than zero,
            or greater than or equal to the number of rows.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="source"/> does not
            equal the number of columns of this <strong>Matrix</strong>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.GetDiagonal">
            <summary>Returns the elements of the diagonal in a <see cref="T:BioLab.Math.LinearAlgebra.Vector"/>.</summary>
            <returns>The elements of the diagonal.</returns>
            <remarks>For non-square matrices, the method returns Min(Rows, Columns) elements where
            i == j (i is the the row index, and j is the column index).</remarks>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.SetDiagonal(BioLab.Math.LinearAlgebra.Vector)">
            <summary>Copies the values of the given <see cref="T:BioLab.Math.LinearAlgebra.Vector"/> to the diagonal.</summary>
            <param name="source">The vector to copy the values from. The length of the vector should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="source"/> is <see langword="null"/>.</exception>   
            <exception cref="T:System.ArgumentException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.SetDiagonal(System.Double[])">
            <summary>
            Copies the values of the given array to the diagonal.
            </summary>
            <param name="source">The array to copy the values from. The length of the array should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="source"/> is <see langword="null"/>.</exception>        
            <exception cref="T:System.ArgumentException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.InsertColumn(System.Int32,BioLab.Math.LinearAlgebra.Vector)">
            <summary>Creates a new matrix and inserts the given column at the given index.</summary>
            <param name="columnIndex">The index of where to insert the column starting to 0.</param>
            <param name="column">The column to insert.</param>
            <returns>A new matrix with the inserted column.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="column "/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="columnIndex"/> is &lt; zero or &gt; the number of columns.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="column"/> != the number of rows.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.InsertRow(System.Int32,BioLab.Math.LinearAlgebra.Vector)">
            <summary>Creates a new matrix and inserts the given row at the given index.</summary>
            <param name="rowIndex">The index of where to insert the row.</param>
            <param name="row">The row to insert.</param>
            <returns>A new matrix with the inserted column.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="row"/> is <see langword="null"/>. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowIndex"/> is &lt; zero or &gt; the number of rows.</exception>
            <exception cref="T:System.ArgumentException">If the size of <paramref name="row"/> != the number of columns.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.ToArray">
            <summary>Returns this matrix as a multidimensional array.</summary>
            <returns>A multidimensional containing the values of this matrix.</returns>        
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.ToJaggedArray">
            <summary>Returns this matrix as a multidimensional array.</summary>
            <returns>A multidimensional containing the values of this matrix.</returns>        
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.ToJaggedArray(System.Boolean)">
            <summary>Returns this matrix as a multidimensional array.</summary>
            <returns>A multidimensional containing the values of this matrix.</returns>        
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.ToColumnWiseArray">
            <summary>Returns the matrix's elements as an array with the data laid out column-wise.</summary>
            <example><pre>
            1, 2, 3
            4, 5, 6  will be returned as  1, 4, 7, 2, 5, 8, 3, 6, 9
            7, 8, 9
            </pre></example>
            <returns>An array containing the matrix's elements.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.ToRowWiseArray">
            <summary>Returns the matrix's elements as an array with the data laid row-wise.</summary>
            <example><pre>
            1, 2, 3
            4, 5, 6  will be returned as  1, 2, 3, 4, 5, 6, 7, 8, 9
            7, 8, 9
            </pre></example>
            <returns>An array containing the matrix's elements.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.Equals(System.Object)">
            <summary>Compares two matrices for equality by checking that corresponding matrix entries are exactly equal.</summary>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.Equals(BioLab.Math.LinearAlgebra.Matrix)">
            <summary>Compares two matrices for equality by checking that corresponding matrix entries are exactly equal.</summary>
            <returns>True if the two Matrix are equal, false otherwise.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.ComputeDeterminant">
            <summary>Computes the determinant of this matrix.</summary>
            <returns>The determinant of this matrix.</returns>
            <exception cref="T:System.ArgumentException">If the matrix is not square.</exception>
            <remarks>The determinant is calculated using LU decomposition.</remarks>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.ComputeInverse">
            <summary>Returns the inverseof this matrix. The inverse is calculated using LU decomposition.</summary>
            <returns>The inverse of this matrix.</returns>
            <exception cref="T:System.ArgumentException">If this matrix is not square.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.ToString(System.String,System.IFormatProvider)">
            <summary>A string representation of this matrix.</summary>
            <param name="format">A format specification.</param>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
            <returns>The string representation of this matrix as comma seperated values.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.ToString">
            <summary>A string representation of this matrix.</summary>
            <returns>The string representation of this matrix as comma seperated values.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.GetHashCode">
            <summary>Serves as a hash function for a particular type.</summary>
            <returns>A hash code for the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.SaveToStream(System.IO.Stream)">
            <summary>Saves the current <see cref="T:BioLab.Math.LinearAlgebra.Matrix"/> to a specified <see cref="T:System.IO.Stream"/> in rowise mode.</summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.Math.LinearAlgebra.Matrix"/> will be saved.</param>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.LoadFromFile(System.String)">
            <summary>Creates a <see cref="T:BioLab.Math.LinearAlgebra.Matrix"/> from the specified file.</summary>
            <param name="path">A string that contains the name of the file from which to create the <see cref="T:BioLab.Math.LinearAlgebra.Matrix"/>.
            The File has got data in rowise mode.
            </param>
            <returns>
            The <see cref="T:BioLab.Math.LinearAlgebra.Matrix"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.LoadFromStream(System.IO.Stream)">
            <summary>Creates a <see cref="T:BioLab.Math.LinearAlgebra.Matrix"/> from the specified data stream.</summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> that contains the data for this <see cref="T:BioLab.Math.LinearAlgebra.Vector"/>.
            </param>
            <returns>
            The <see cref="T:BioLab.Math.LinearAlgebra.Vector"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.op_Equality(BioLab.Math.LinearAlgebra.Matrix,BioLab.Math.LinearAlgebra.Matrix)">
            <summary>
            Check if two matrices are identical.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>True if the matrices are equal.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.op_Inequality(BioLab.Math.LinearAlgebra.Matrix,BioLab.Math.LinearAlgebra.Matrix)">
            <summary>
            Check if two matrices are not equal.
            </summary>
            <param name="matrix1">The first matrix.</param>
            <param name="matrix2">The second matrix.</param>
            <returns>True if the matrices are not equal.</returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.op_UnaryPlus(BioLab.Math.LinearAlgebra.Matrix)">
            <summary>Returns a <strong>Matrix</strong> containing the same values of rightSide.</summary>
            <param name="rightSide">The matrix to get the values from.</param>
            <returns>A matrix containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.op_Addition(BioLab.Math.LinearAlgebra.Matrix,System.Double)">
            <summary>Add a scalar to a matrix and returns the results.</summary>
            <param name="leftSide">The matrix.</param>
            <param name="rightSide">The scalar to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.op_Addition(System.Double,BioLab.Math.LinearAlgebra.Matrix)">
            <summary>Add a scalar to a matrix and returns the results.</summary>
            <param name="leftSide">The scalar to add.</param>
            <param name="rightSide">The matrix.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.op_Addition(BioLab.Math.LinearAlgebra.Matrix,BioLab.Math.LinearAlgebra.Matrix)">
            <summary>Adds two matrices together and returns the results.</summary>
            <param name="leftSide">One of the matrices to add.</param>
            <param name="rightSide">One of the matrices to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.op_UnaryNegation(BioLab.Math.LinearAlgebra.Matrix)">
            <summary>Negates each element of the matrix.</summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.op_Subtraction(BioLab.Math.LinearAlgebra.Matrix,System.Double)">
            <summary>Subtract a scalar to a matrix and returns the results.</summary>
            <param name="leftSide">The matrix.</param>
            <param name="rightSide">The scalar to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.op_Subtraction(BioLab.Math.LinearAlgebra.Matrix,BioLab.Math.LinearAlgebra.Matrix)">
            <summary>Subtracts two matrices and returns the results.</summary>
            <param name="leftSide">The matrix to subtract from.</param>
            <param name="rightSide">The matrix to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.op_Division(BioLab.Math.LinearAlgebra.Matrix,System.Double)">
            <summary>Divides a <strong>Matrix</strong> by a constant and returns the result.</summary>
            <param name="leftSide">The matrix to divide.</param>
            <param name="scalar">The constant to divide the matrix by.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.op_Multiply(BioLab.Math.LinearAlgebra.Matrix,System.Double)">
            <summary>Multiplies a <strong>Matrix</strong> by a constant and returns the result.</summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="scalar">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.op_Multiply(System.Double,BioLab.Math.LinearAlgebra.Matrix)">
            <summary>Multiplies a <strong>Matrix</strong> by a constant and returns the result.</summary>
            <param name="scalar">The scalar to multiply.</param>
            <param name="rightSide">The Matrix to multiply</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.op_Multiply(BioLab.Math.LinearAlgebra.Matrix,BioLab.Math.LinearAlgebra.Matrix)">
            <summary>Multiplies two matrices.</summary>
            <param name="leftSide">One of the matrices to multiply.</param>
            <param name="rightSide">One of the matrices to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.op_Multiply(BioLab.Math.LinearAlgebra.Matrix,BioLab.Math.LinearAlgebra.Vector)">
            <summary>Multiplies a <strong>Matrix</strong> and a <see cref="T:BioLab.Math.LinearAlgebra.Vector"/>.</summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If <strong>leftSide.Columns ! = rightSide.Count</strong>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.op_Multiply(BioLab.Math.LinearAlgebra.Vector,BioLab.Math.LinearAlgebra.Matrix)">
            <summary>Multiplies a <see cref="T:BioLab.Math.LinearAlgebra.Vector"/> and a <strong>Matrix</strong>.</summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">If <strong>leftSide.Count != rightSide.Rows</strong>.</exception>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the matrix.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the matrix.
            </returns>
        </member>
        <member name="M:BioLab.Math.LinearAlgebra.Matrix.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the matrix.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the matrix
            </returns>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Set or get an element of the matrix.
            </summary>
            <param name="row">The row index.</param>
            <param name="column">The column index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If either the row or column index is outside the 
            the dimensions of this matrix.</exception>
            <returns>A specific element in the matrix.</returns>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.Matrix.ColumnCount">
            <summary>
            Get the number of columns.
            </summary>
            <returns>The number of columns.</returns>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.Matrix.RowCount">
            <summary>
            Get the numbers of rows.
            </summary>
            <returns>The number of rows.</returns>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.Matrix.IsSquare">
            <summary>
            Test if is a square matrix.
            </summary>
            <returns>Return the boolean <see langword="true"/> if the matrix is a square matrix.</returns>
        </member>
        <member name="P:BioLab.Math.LinearAlgebra.Matrix.IsSymmetric">
            <summary>
            Test if is a symmetric matrix.
            </summary>
            <returns>Returns the boolean <see langword="true"/> if the matrix is symmetric.</returns>
        </member>
        <member name="T:BioLab.Math.Geometry.NamespaceDoc">
            <summary>
            Provides basic geometric types and operations.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.NamespaceDoc">
            <summary>
            Provides image topology and digital morphology algorithms.
            </summary>
        </member>
        <member name="T:BioLab.GUI.DataViewers.DrawingExtensions">
            <summary>
            Provides a set of static methods to convert and manage graphic objects such as points and rectangles.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DrawingExtensions.ToPoint(BioLab.Math.Geometry.IntPoint2D)">
            <summary>
            Creates a <see cref="T:System.Drawing.Point"/> from a <see cref="T:BioLab.Math.Geometry.IntPoint2D"/>.
            </summary>
            <param name="location">A <see cref="T:BioLab.GUI.DataViewers.DrawingExtensions"/> to create the <see cref="T:System.Drawing.Point"/> from.</param>
            <returns>
            A <see cref="T:System.Drawing.Point"/> created from the input <see cref="T:BioLab.Math.Geometry.IntPoint2D"/>.
            </returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DrawingExtensions.ToPoint(BioLab.Math.Geometry.Point2D)">
            <summary>
            Creates a <see cref="T:System.Drawing.Point"/> from a <see cref="T:BioLab.Math.Geometry.Point2D"/>.
            </summary>
            <param name="point">A <see cref="T:BioLab.GUI.DataViewers.DrawingExtensions"/> to create the <see cref="T:System.Drawing.Point"/> from.</param>
            <returns>
            A <see cref="T:System.Drawing.Point"/> created from the input <see cref="T:BioLab.Math.Geometry.Point2D"/>.
            </returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DrawingExtensions.ToIntPoint2D(System.Drawing.Point)">
            <summary>
            Creates a <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> from a <see cref="T:System.Drawing.Point"/>.
            </summary>
            <param name="point">A <see cref="T:BioLab.GUI.DataViewers.DrawingExtensions"/> to create the <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> from.</param>
            <returns>
            A <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> created from the input <see cref="T:System.Drawing.Point"/>.
            </returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DrawingExtensions.ToIntPoint2D(System.Drawing.PointF)">
            <summary>
            Creates a <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> from a <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <param name="point">A <see cref="T:BioLab.GUI.DataViewers.DrawingExtensions"/> to create the <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> from.</param>
            <returns>
            A <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> created from the input <see cref="T:System.Drawing.PointF"/>.
            </returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DrawingExtensions.ToPointF(BioLab.Math.Geometry.Point2D)">
            <summary>
            Creates a <see cref="T:System.Drawing.PointF"/> from a <see cref="T:BioLab.Math.Geometry.Point2D"/>.
            </summary>
            <param name="point">A <see cref="T:BioLab.GUI.DataViewers.DrawingExtensions"/> to create the <see cref="T:System.Drawing.PointF"/> from.</param>
            <returns>
            A <see cref="T:System.Drawing.PointF"/> created from the input <see cref="T:BioLab.Math.Geometry.Point2D"/>.
            </returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DrawingExtensions.ToPointF(BioLab.Math.Geometry.IntPoint2D)">
            <summary>
            Creates a <see cref="T:System.Drawing.PointF"/> from a <see cref="T:BioLab.Math.Geometry.IntPoint2D"/>.
            </summary>
            <param name="location">A <see cref="T:BioLab.GUI.DataViewers.DrawingExtensions"/> to create the <see cref="T:System.Drawing.PointF"/> from.</param>
            <returns>
            A <see cref="T:System.Drawing.PointF"/> created from the input <see cref="T:BioLab.Math.Geometry.IntPoint2D"/>.
            </returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DrawingExtensions.ToPoint2D(System.Drawing.Point)">
            <summary>
            Creates a <see cref="T:BioLab.Math.Geometry.Point2D"/> from a <see cref="T:System.Drawing.Point"/>.
            </summary>
            <param name="point">A <see cref="T:BioLab.GUI.DataViewers.DrawingExtensions"/> to create the <see cref="T:BioLab.Math.Geometry.Point2D"/> from.</param>
            <returns>
            A <see cref="T:BioLab.Math.Geometry.Point2D"/> created from the input <see cref="T:System.Drawing.Point"/>.
            </returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DrawingExtensions.ToPoint2D(System.Drawing.PointF)">
            <summary>
            Creates a <see cref="T:BioLab.Math.Geometry.Point2D"/> from a <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <param name="point">A <see cref="T:BioLab.GUI.DataViewers.DrawingExtensions"/> to create the <see cref="T:BioLab.Math.Geometry.Point2D"/> from.</param>
            <returns>
            A <see cref="T:BioLab.Math.Geometry.Point2D"/> created from the input <see cref="T:System.Drawing.PointF"/>.
            </returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DrawingExtensions.ToPoint2D(BioLab.Math.Geometry.IntPoint2D)">
            <summary>
            Creates a <see cref="T:BioLab.Math.Geometry.Point2D"/> from a <see cref="T:BioLab.Math.Geometry.IntPoint2D"/>.
            </summary>
            <param name="point">A <see cref="T:BioLab.GUI.DataViewers.DrawingExtensions"/> to create the <see cref="T:BioLab.Math.Geometry.Point2D"/> from.</param>
            <returns>
            A <see cref="T:BioLab.Math.Geometry.Point2D"/> created from the input <see cref="T:BioLab.Math.Geometry.IntPoint2D"/>.
            </returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DrawingExtensions.GetCenteredRectangle(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Gets the rectangle centered on a given point with a specified size.
            </summary>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
            <returns>The rectangle centered on the given point with the specified size.</returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DrawingExtensions.GetCenteredRectangle(System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Gets the rectangle centered on a given point with a specified size.
            </summary>
            <param name="point">The point.</param>
            <param name="size">The size.</param>
            <returns>The rectangle centered on the given point with the specified size.</returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DrawingExtensions.CalculateEnclosingRectangle(System.Collections.Generic.IEnumerable{System.Drawing.PointF})">
            <summary>
            Calculates the smallest rectangle that contains all the points in a given array.
            </summary>
            <param name="points">The points that must be enclosed in the rectangle.</param>
            <returns>The smallest rectangle enclosing all the points.</returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DrawingExtensions.ToPoint(BioLab.ImageProcessing.ImageCursor)">
            <summary>
            Creates a <see cref="T:System.Drawing.Point"/> from a <see cref="T:BioLab.ImageProcessing.ImageCursor"/>.
            </summary>
            <param name="cursor">A <see cref="T:BioLab.GUI.DataViewers.DrawingExtensions"/> to create the <see cref="T:System.Drawing.Point"/> from.</param>
            <returns>
            A <see cref="T:System.Drawing.Point"/> created from the input <see cref="T:BioLab.ImageProcessing.ImageCursor"/>.
            </returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DrawingExtensions.ToPointF(BioLab.ImageProcessing.ImageCursor)">
            <summary>
            Creates a <see cref="T:System.Drawing.PointF"/> from a <see cref="T:BioLab.ImageProcessing.ImageCursor"/>.
            </summary>
            <param name="cursor">A <see cref="T:BioLab.GUI.DataViewers.DrawingExtensions"/> to create the <see cref="T:System.Drawing.PointF"/> from.</param>
            <returns>
            A <see cref="T:System.Drawing.PointF"/> created from the input <see cref="T:BioLab.ImageProcessing.ImageCursor"/>.
            </returns>
        </member>
        <member name="M:BioLab.GUI.DataViewers.DrawingExtensions.ToPoint2D(BioLab.ImageProcessing.ImageCursor)">
            <summary>
            Creates a <see cref="T:BioLab.Math.Geometry.Point2D"/> from a <see cref="T:BioLab.ImageProcessing.ImageCursor"/>.
            </summary>
            <param name="cursor">A <see cref="T:BioLab.GUI.DataViewers.DrawingExtensions"/> to create the <see cref="T:BioLab.Math.Geometry.Point2D"/> from.</param>
            <returns>
            A <see cref="T:BioLab.Math.Geometry.Point2D"/> created from the input <see cref="T:BioLab.ImageProcessing.ImageCursor"/>.
            </returns>
        </member>
        <member name="T:BioLab.Classification.Unsupervised.NamespaceDoc">
            <summary>
            Provides clustering algorithms.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.MorphologyStructuringElement">
            <summary>
            Provides static methods to create and modify structuring elements.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyStructuringElement.CreateSquare(System.Int32)">
            <summary>
            Creates a square binary structuring element.
            </summary>
            <param name="size">The size of the structuring element.</param>
            <returns>A size x size square structuring element.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyStructuringElement.CreateCircle(System.Int32)">
            <summary>
            Creates a disk-shaped binary structuring element.
            </summary>
            <param name="size">The size of the structuring element.</param>
            <returns>A size x size disk-shaped structuring element.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyStructuringElement.CreateLine(System.Int32,System.Boolean)">
            <summary>
            Creates the line-shaped binary structuring element.
            </summary>
            <param name="size">The line length.</param>
            <param name="horizontal">if set to <c>true</c> the line is horizontal, otherwise vertical.</param>
            <returns>A size x 1 (or 1 x size) structuring element.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyStructuringElement.CreateGrayscaleCircle(System.Int32,System.Int32)">
            <summary>
            Creates a grayscale disk-shaped structuring element.
            </summary>
            <param name="size">The size of the structuring element.</param>
            <param name="maxValue">The maximum grayscale value in the structuring element.</param>
            <returns>A size x size grayscale structuring element with a disk shape.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyStructuringElement.CreateGrayscaleCircle(System.Int32,System.Double,System.Int32)">
            <summary>
            Creates a grayscale disk-shaped structuring element.
            </summary>
            <param name="size">The size of the structuring element.</param>
            <param name="radius">The radius of the disk.</param>
            <param name="maxValue">The maximum grayscale value in the structuring element.</param>
            <returns>
            A size x size grayscale structuring element with a disk shape.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyStructuringElement.Create(System.Byte[0:,0:])">
            <summary>
            Creates a structuring element from a given two-dimensional array.
            </summary>
            <param name="values">The structuring element values.</param>
            <returns>An image containing the structuring element.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyStructuringElement.Reflect(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Reflects the specified structuring element through its center.
            </summary>
            <param name="element">The structuring element element to be reflected.</param>
            <returns>A new structuring element that is the reflection of the input one.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyStructuringElement.GetValues(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Creates an array containing the values corresponding to the valid (non zero) cells of
            a given structuring element.
            </summary>
            <param name="element">The structuring element used to filter the values.</param>
            <param name="values">The values to be filtered.</param>
            <returns>An array containing the values.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyStructuringElement.CreateOffsets(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.ImageBase,System.Boolean)">
            <summary>
            Given a structuring element and a target image, creates an array of linear offsets 
            corresponding to the valid (non zero) cells of the structuring element. This array is useful
            for applying morphologycal operations to images with the same width of the target image.
            </summary>
            <param name="element">The structuring element.</param>
            <param name="targetImage">The target image.</param>
            <param name="reflect">if set to <c>true</c> the structuring element is reflected.</param>
            <returns>An array containing the linear offsets, for the target image, of the non-zero cells with respect to the center 
            of the structuring element.</returns>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.MorphologyOperation">
            <summary>
            Represents a generic binary morphology operation.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyOperation.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte},System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.MorphologyOperation"/> class and allows to specify the input
            image and the parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
            <param name="foreground">The graylevel value to be considered as foreground; any other value 
            is considered as background.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyOperation.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.MorphologyOperation"/> class and allows to specify the input image and the
            structuring element.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyOperation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.MorphologyOperation"/> class.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.Topology.MorphologyOperation.StructuringElement">
            <summary>
            Gets or sets the structuring element to be used in the current morphology operation.
            </summary>
            <value>The structuring element.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.MorphologyDilation">
            <summary>
            Performs a binary dilation operation.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyDilation.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte},System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.MorphologyDilation"/> class and allows to specify the structuring element and the foreground.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
            <param name="foreground">The graylevel value to be considered as foreground; any other value
            is considered as background.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyDilation.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.MorphologyDilation"/> class and allows to specify the structuring element.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyDilation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.MorphologyDilation"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyDilation.Run">
            <summary>
            Executes the morphology operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.MorphologyErosion">
            <summary>
            Performs a binary erosion operation.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyErosion.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte},System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.MorphologyDilation"/> class and allows to specify the structuring element and the foreground.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
            <param name="foreground">The graylevel value to be considered as foreground; any other value
            is considered as background.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyErosion.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.MorphologyDilation"/> class and allows to specify the structuring element.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyErosion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.MorphologyErosion"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyErosion.Run">
            <summary>
            Executes the morphology operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.MorphologyOpening">
            <summary>
            Performs an opening (erosion followed by dilation) morphology operation.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyOpening.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte},System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.MorphologyDilation"/> class and allows to specify the structuring element and the foreground.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
            <param name="foreground">The graylevel value to be considered as foreground; any other value
            is considered as background.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyOpening.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.MorphologyDilation"/> class and allows to specify the structuring element.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyOpening.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.MorphologyOpening"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyOpening.Run">
            <summary>
            Executes the morphology operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.MorphologyClosing">
            <summary>
            Performs a closing (dilation followed by erosion) morphology operation.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyClosing.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte},System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.MorphologyClosing"/> class and allows to specify the structuring element and the foreground.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
            <param name="foreground">The graylevel value to be considered as foreground; any other value
            is considered as background.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyClosing.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.MorphologyClosing"/> class and allows to specify the structuring element.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyClosing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.MorphologyClosing"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyClosing.Run">
            <summary>
            Executes the morphology operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.MorphologyHitOrMiss">
            <summary>
            Performs a morphology Hit-or-Miss transform.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyHitOrMiss.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte},System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.MorphologyHitOrMiss"/> class and allows to specify the structuring elements and the foreground.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element for the foreground values.</param>
            <param name="structuringElementBackground">The structuring element for the background values.</param>
            <param name="foreground">The graylevel value to be considered as foreground; any other value
            is considered as background.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyHitOrMiss.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.MorphologyHitOrMiss"/> class and allows to specify the structuring elements.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element for the foreground values.</param>
            <param name="structuringElementBackground">The structuring element for the background values.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyHitOrMiss.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.MorphologyHitOrMiss"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.MorphologyHitOrMiss.Run">
            <summary>
            Executes the morphology operation.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.Topology.MorphologyHitOrMiss.StructuringElementBackground">
            <summary>
            Gets or sets the structuring element for the background pixels.
            </summary>
            <value>The structuring element for the background pixels.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.GrayMorphologyOperation">
            <summary>
            Represents a generic grayscale morphology operation with a flat (binary) structuring element.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyOperation.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyOperation"/> class and allows to specify the structuring element.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyOperation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyOperation"/> class.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.Topology.GrayMorphologyOperation.StructuringElement">
            <summary>
            Gets or sets the structuring element.
            </summary>
            <value>The structuring element.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.GrayMorphologyDilation">
            <summary>
            Performs a grayscale morphology dilation operation with a flat (binary) structuring element.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyDilation.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyDilation"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyDilation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyDilation"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyDilation.Run">
            <summary>
            Executes the morphology operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.GrayMorphologyErosion">
            <summary>
            Performs a grayscale morphology erosion operation with a flat (binary) structuring element.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyErosion.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyErosion"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyErosion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyErosion"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyErosion.Run">
            <summary>
            Executes the morphology operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.GrayMorphologyOpening">
            <summary>
            Performs a grayscale morphology opening (erosion followed by dilation) operation with a flat (binary) structuring element.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyOpening.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyOpening"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyOpening.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyOpening"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyOpening.Run">
            <summary>
            Executes the morphology operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.GrayMorphologyClosing">
            <summary>
            Performs a grayscale morphology closing (dilation followed by erosion) operation with a flat (binary) structuring element.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyClosing.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyClosing"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyClosing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyClosing"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyClosing.Run">
            <summary>
            Executes the morphology operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.GrayMorphologyOperationNonFlatSE">
            <summary>
            Represents a generic grayscale morphology operation with a non-flat (grayscale) structuring element.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyOperationNonFlatSE.#ctor(BioLab.ImageProcessing.Image{System.Int32},BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyOperationNonFlatSE"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
            <param name="structuringElementValues">The structuring element values.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyOperationNonFlatSE.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyOperationNonFlatSE"/> class.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.Topology.GrayMorphologyOperationNonFlatSE.StructuringElement">
            <summary>
            Gets or sets the structuring element.
            </summary>
            <value>The structuring element.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.Topology.GrayMorphologyOperationNonFlatSE.StructuringElementValues">
            <summary>
            Gets or sets the structuring element values.
            </summary>
            <value>The structuring element values.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.GrayMorphologyErosionNonFlatSE">
            <summary>
            Performs a grayscale morphology erosion operation with a non-flat (grayscale) structuring element.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyErosionNonFlatSE.#ctor(BioLab.ImageProcessing.Image{System.Int32},BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyErosionNonFlatSE"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
            <param name="structuringElementValues">The structuring element values.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyErosionNonFlatSE.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyErosionNonFlatSE"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyErosionNonFlatSE.Run">
            <summary>
            Executes the morphology operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.GrayMorphologyDilationNonFlatSE">
            <summary>
            Performs a grayscale morphology dilation operation with a non-flat (grayscale) structuring element.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyDilationNonFlatSE.#ctor(BioLab.ImageProcessing.Image{System.Int32},BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyDilationNonFlatSE"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
            <param name="structuringElementValues">The structuring element values.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyDilationNonFlatSE.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyDilationNonFlatSE"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyDilationNonFlatSE.Run">
            <summary>
            Executes the morphology operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.GrayMorphologyOpeningNonFlatSE">
            <summary>
            Performs a grayscale morphology opening (erosion followed by dilation) operation with a non-flat (grayscale) structuring element.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyOpeningNonFlatSE.#ctor(BioLab.ImageProcessing.Image{System.Int32},BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyOpeningNonFlatSE"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
            <param name="structuringElementValues">The structuring element values.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyOpeningNonFlatSE.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyOpeningNonFlatSE"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyOpeningNonFlatSE.Run">
            <summary>
            Executes the morphology operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Topology.GrayMorphologyClosingNonFlatSE">
            <summary>
            Performs a grayscale morphology closing (dilation followed by erosion) operation with a non-flat (grayscale) structuring element.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyClosingNonFlatSE.#ctor(BioLab.ImageProcessing.Image{System.Int32},BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyClosingNonFlatSE"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="structuringElement">The structuring element.</param>
            <param name="structuringElementValues">The structuring element values.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyClosingNonFlatSE.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Topology.GrayMorphologyClosingNonFlatSE"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Topology.GrayMorphologyClosingNonFlatSE.Run">
            <summary>
            Executes the morphology operation.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftTransform.IsPowerOfTwo(System.Int32)">
            <summary>
            Funzione di utilità: true se n è una potenza di 2
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftTransform.GetNextPowerOfTwo(System.Int32)">
            <summary>
            Funzione di utilità: restituisce la minima potenza di due maggiore o uguale a n
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Fourier.FftBase`2">
            <summary>
            Represents a generic Fourier Transform operation on a generic single channel image. 
            </summary>
            <typeparam name="TInputImage">The pixel type of the input image.</typeparam>
            <typeparam name="TOutputImage">The pixel type of the output image.</typeparam>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftBase`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Fourier.FftBase`2"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftBase`2.OnInputImageChanged">
            <summary>
            Called when the value of the InputImage property has changed.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Fourier.FftExtension">
            <summary>
            Provides static methods to help applying the FFT to images.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftExtension.ExtendImageToNextPowerOfTwo``1(BioLab.ImageProcessing.Image{``0})">
            <summary>
            Creates a new image by adding a border to the given input image, so that the image is square and its side is a power of two.
            </summary>
            <typeparam name="T">The pixel type of the image.</typeparam>
            <param name="image">The image to be extended.</param>
            <returns>A new image obtained by adding a bottom and right border to the input image; the value of all the border pixel is zero.</returns>
        </member>
        <member name="T:BioLab.ImageProcessing.Fourier.Fft">
            <summary>
            Represents the Fast Fourier Transform operation on a <see cref="T:BioLab.ImageProcessing.ComplexImage"/>. 
            The result is stored in a <see cref="T:BioLab.ImageProcessing.ComplexImage"/>.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.Fft.#ctor(BioLab.ImageProcessing.ComplexImage)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Fourier.Fft"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.Fft.Run">
            <summary>
            Executes the algorithm.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Fourier.InvFft">
            <summary>
            Represents the Inverse Fast Fourier Transform operation on a <see cref="T:BioLab.ImageProcessing.ComplexImage"/>.
            The result is stored in a <see cref="T:BioLab.ImageProcessing.ComplexImage"/>.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.InvFft.#ctor(BioLab.ImageProcessing.ComplexImage)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Fourier.InvFft"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.InvFft.Run">
            <summary>
            Executes the inverse Fast Fourier Transform.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Fourier.FftByte">
            <summary>
            Represents the Fast Fourier Transform operation on a Image&lt;byte&gt;.
            The result is stored in a <see cref="T:BioLab.ImageProcessing.ComplexImage"/>.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftByte.#ctor(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Fourier.FftByte"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftByte.Run">
            <summary>
            Executes the Fast Fourier Transform.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Fourier.InvFftByte">
            <summary>
            Represents the Inverse Fast Fourier Transform operation on a <see cref="T:BioLab.ImageProcessing.ComplexImage"/>.
            The result is stored in a Image&lt;byte&gt;.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.InvFftByte.#ctor(BioLab.ImageProcessing.ComplexImage)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Fourier.InvFftByte"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.InvFftByte.Run">
            <summary>
            Executes the inverse Fast Fourier Transform.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Fourier.FftConvolution">
            <summary>
            Represents a convolution operation between an Image&lt;byte&gt; and a generic filter that returns an
            Image&lt;byte&gt;.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftConvolution.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.Fourier.IFftConvolutionFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Fourier.FftConvolution"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="filter">The convolution filter.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftConvolution.Run">
            <summary>
            Executes the convolution in the frequency domain.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.Fourier.FftConvolution.Filter">
            <summary>
            Gets or sets the convolution filter.
            </summary>
            <value>The convolution filter.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.Fourier.IFftConvolutionFilter">
            <summary>
            Exposes methods to apply a convolution filter in the frequency domain.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.IFftConvolutionFilter.Apply(BioLab.ImageProcessing.ComplexImage)">
            <summary>
            Applies the filter to the specified image.
            </summary>
            <param name="image">The image in the frequency domain, usually obtained by applying a Fast Fourier Transform to an image in the space domain.</param>
        </member>
        <member name="T:BioLab.ImageProcessing.Fourier.FftFilterKernel`1">
            <summary>
            Represents a generic method that implements the kernel of a filter in the frequency domain.
            The method returns a value that is used to modify the frequency value at the given input coordinates.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Fourier.FftBooleanFilter">
            <summary>
            Represents a filter that selectively sets to zero frequencies according to a given boolean kernel function.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftBooleanFilter.#ctor(BioLab.ImageProcessing.Fourier.FftFilterKernel{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Fourier.FftBooleanFilter"/> class and allows to specify the kernel function.
            </summary>
            <param name="kernel">The boolean kernel function.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftBooleanFilter.Apply(BioLab.ImageProcessing.ComplexImage)">
            <summary>
            Applies the filter to the specified image. The kernel function is called for each frequency in the complex image and when
            it returns false, the corresponding value in the frequency image is set to zero.
            </summary>
            <param name="image">The image in the frequency domain, usually obtained by applying a Fast Fourier Transform to an image in the space domain.</param>
        </member>
        <member name="T:BioLab.ImageProcessing.Fourier.FftRealFilter">
            <summary>
            Represents a filter that modifies frequencies according to a kernel function that returns a real value.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftRealFilter.#ctor(BioLab.ImageProcessing.Fourier.FftFilterKernel{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Fourier.FftRealFilter"/> class and allows to specify the kernel function.
            </summary>
            <param name="kernel">The kernel function.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftRealFilter.Apply(BioLab.ImageProcessing.ComplexImage)">
            <summary>
            Applies the filter to the specified image. The kernel function is called for each frequency in the complex image and 
            the corresponding value in the frequency image is multiplied for its return value.
            </summary>
            <param name="image">The image in the frequency domain, usually obtained by applying a Fast Fourier Transform to an image in the space domain.</param>
        </member>
        <member name="T:BioLab.ImageProcessing.Fourier.FftComplexFilter">
            <summary>
            Represents a filter that modifies frequencies according to a kernel function that returns a complex value.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftComplexFilter.#ctor(BioLab.ImageProcessing.Fourier.FftFilterKernel{BioLab.Math.Complex})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Fourier.FftComplexFilter"/> class and allows to specify the kernel function.
            </summary>
            <param name="kernel">The complex kernel function.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftComplexFilter.Apply(BioLab.ImageProcessing.ComplexImage)">
            <summary>
            Applies the filter to the specified image. The kernel function is called for each frequency in the complex image and
            the corresponding value in the frequency image is multiplied for its return value.
            </summary>
            <param name="image">The image in the frequency domain, usually obtained by applying a Fast Fourier Transform to an image in the space domain.</param>
        </member>
        <member name="T:BioLab.ImageProcessing.Fourier.FftBandPassFiltering">
            <summary>
            Represents a convolution operation between an Image&lt;byte&gt; and a band-pass filter that returns an
            Image&lt;byte&gt;.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftBandPassFiltering.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Fourier.FftBandPassFiltering"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="lowFrequency">The lowest cut-off frequency.</param>
            <param name="highFrequency">The highest cut-off frequency.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftBandPassFiltering.#ctor(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Fourier.FftBandPassFiltering"/> class with default input parameters.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftBandPassFiltering.Run">
            <summary>
            Applies the filtering.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.Fourier.FftBandPassFiltering.LowFrequency">
            <summary>
            Gets or sets the lowest cut-off frequency.
            </summary>
            <value>The lowest cut-off frequency.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.Fourier.FftBandPassFiltering.HighFrequency">
            <summary>
            Gets or sets the highest cut-off frequency.
            </summary>
            <value>The highest cut-off frequency.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.Fourier.FftLowPassFiltering">
            <summary>
            Represents a convolution operation between an Image&lt;byte&gt; and a low-pass filter that returns an
            Image&lt;byte&gt;.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftLowPassFiltering.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Fourier.FftLowPassFiltering"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="frequency">The cut-off frequency.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftLowPassFiltering.#ctor(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Fourier.FftLowPassFiltering"/> class with default input parameters.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftLowPassFiltering.Run">
            <summary>
            Applies the filtering.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.Fourier.FftLowPassFiltering.Frequency">
            <summary>
            Gets or sets the cut-off frequency.
            </summary>
            <value>The cut-off frequency.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.Fourier.FftHighPassFiltering">
            <summary>
            Represents a convolution operation between an Image&lt;byte&gt; and a high-pass filter that returns an
            Image&lt;byte&gt;.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftHighPassFiltering.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Fourier.FftHighPassFiltering"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="frequency">The cut-off frequency.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftHighPassFiltering.#ctor(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Fourier.FftHighPassFiltering"/> class with default input parameters.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftHighPassFiltering.Run">
            <summary>
            Applies the filtering.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.Fourier.FftHighPassFiltering.Frequency">
            <summary>
            Gets or sets the cut-off frequency.
            </summary>
            <value>The cut-off frequency.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.Fourier.FftButterworthFiltering">
            <summary>
            Represents a convolution operation between an Image&lt;byte&gt; and a Butterworth filter that returns an
            Image&lt;byte&gt;.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftButterworthFiltering.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Fourier.FftButterworthFiltering"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="wc">The cut-off frequency.</param>
            <param name="order">The order of the filter.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftButterworthFiltering.#ctor(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Fourier.FftButterworthFiltering"/> class with default input parameters.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftButterworthFiltering.Run">
            <summary>
            Applies the filtering.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.Fourier.FftButterworthFiltering.CutoffFrequency">
            <summary>
            Gets or sets the cut-off frequency.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.Fourier.FftButterworthFiltering.Order">
            <summary>
            Gets or sets the order of the filter.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Fourier.FftAngularFiltering">
            <summary>
            Represents a convolution operation between an Image&lt;byte&gt; and an angular filter that returns an
            Image&lt;byte&gt;.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftAngularFiltering.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Fourier.FftAngularFiltering"/> class.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="angle">The angle of the filter.</param>
            <param name="amplitude">The amplitude of the filter.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftAngularFiltering.#ctor(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Fourier.FftAngularFiltering"/> class with default input parameters.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.Fourier.FftAngularFiltering.Run">
            <summary>
            Applies the filtering.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.Fourier.FftAngularFiltering.AngleC">
            <summary>
            Gets or sets the angle of the filter C.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.Fourier.FftAngularFiltering.Amplitude">
            <summary>
            Gets or sets the amplitude.
            </summary>
        </member>
        <member name="F:BioLab.GUI.DataViewers.HistogramViewer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:BioLab.GUI.DataViewers.HistogramViewer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:BioLab.GUI.DataViewers.HistogramViewer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:BioLab.Classification.Supervised.MultiClassifier">
            <summary>
            Represents a generic multiclassifier.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.MultiClassifier.#ctor(BioLab.Classification.Supervised.Classifier[])">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.MultiClassifier"/> class.
            </summary>
            <param name="classifiers">The classifiers to use in the multiclassification.</param>
        </member>
        <member name="P:BioLab.Classification.Supervised.MultiClassifier.Classifiers">
            <summary>
            Gets the classifiers.
            </summary>
            <value>The classifiers.</value>
        </member>
        <member name="T:BioLab.Classification.Supervised.McsMayorVote">
            <summary>
            Implementation of multi-classifier system with decision-level fusion
            and majority-vote rule.
            </summary>
        </member>
        <member name="M:BioLab.Classification.Supervised.McsMayorVote.#ctor(BioLab.Classification.Supervised.Classifier[])">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.McsMayorVote"/> class.
            </summary>
            <param name="classifiers">The classifiers to merge.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.McsMayorVote.Classify(BioLab.Common.FeatureVector)">
            <summary>
            Classifies a feature vector with respect to the most voted class. 
            </summary>
            <param name="vector">The vector to be classified.</param>
            <returns>
            [0..classesCount-1] or -1 (unknown class)
            </returns>
        </member>
        <member name="M:BioLab.Classification.Supervised.McsMayorVote.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the current <see cref="T:BioLab.Common.Data"/> to a specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.Common.Data"/> will be saved.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.McsMayorVote.InternalClone">
            <summary>
            Creates an exact copy of this instance.
            </summary>
            <returns>
            The <see cref="T:BioLab.Common.Data"/> this method creates.
            </returns>
        </member>
        <member name="T:BioLab.Classification.Supervised.ClassifierFusionMethod">
            <summary>
            Confidence-fusion rule between classifiers
            </summary>
        </member>
        <member name="F:BioLab.Classification.Supervised.ClassifierFusionMethod.Sum">
            <summary>
            Sum confidences given by the classifiers
            </summary>
        </member>
        <member name="F:BioLab.Classification.Supervised.ClassifierFusionMethod.Product">
            <summary>
            Multiply confidences given by the classifiers
            </summary>
        </member>
        <member name="F:BioLab.Classification.Supervised.ClassifierFusionMethod.Max">
            <summary>
            Take the max confidence for each class given by the clssifiers
            </summary>
        </member>
        <member name="F:BioLab.Classification.Supervised.ClassifierFusionMethod.Min">
            <summary>
            Take the min confidence for each class given by the clssifiers
            </summary>
        </member>
        <member name="T:BioLab.Classification.Supervised.McsConfidence">
            <summary>
            Implementation of a multi-classifier system with confidence-level fusion
            </summary>
            <remarks>Assumes no normalization in classifiers confidences.</remarks>
        </member>
        <member name="M:BioLab.Classification.Supervised.McsConfidence.#ctor(BioLab.Classification.Supervised.Classifier[],BioLab.Classification.Supervised.ClassifierFusionMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Classification.Supervised.McsConfidence"/> class.
            </summary>
            <param name="classifiers">The classifiers to merge.</param>
            <param name="fusionRule">The fusion rule.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.McsConfidence.Classify(BioLab.Common.FeatureVector)">
            <summary>
            Classifies a feature vector.
            </summary>
            <param name="vector">The vector to be classified.</param>
            <returns>
            [0..classesCount-1] or -1 (unknown class)
            </returns>
        </member>
        <member name="M:BioLab.Classification.Supervised.McsConfidence.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the current <see cref="T:BioLab.Common.Data"/> to a specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.Common.Data"/> will be saved.</param>
        </member>
        <member name="M:BioLab.Classification.Supervised.McsConfidence.InternalClone">
            <summary>
            Creates an exact copy of this instance.
            </summary>
            <returns>
            The <see cref="T:BioLab.Common.Data"/> this method creates.
            </returns>
        </member>
        <member name="P:BioLab.Classification.Supervised.McsConfidence.FusionRule">
            <summary>
            Gets or sets the fusion rule.
            </summary>
            <value>The fusion rule.</value>
        </member>
        <member name="T:BioLab.PatternRecognition.NamespaceDoc">
            <summary>
            Provides pattern recognition techniques.
            </summary>
        </member>
        <member name="T:BioLab.PatternRecognition.Localization.NamespaceDoc">
            <summary>
            Provides pattern localization (detection) techniques.
            </summary>
        </member>
        <member name="T:BioLab.Math.Geometry.IntPoint2D">
            <summary>
            Represents a point in a two-dimensional plane, defined by two integer coordinates (X and Y).
            It is typically used to store the two coordinates of a pixel in an image: in that case the
            origin of the coordinate system is at the upper left corner, x increases to the right, 
            and y increases downwards.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.IntPoint2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> struct.
            </summary>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.IntPoint2D.ToString">
            <summary>
            Returns a string representing this location
            </summary>
            <returns>A <see cref="T:System.String"/> containing the two coordinates.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.IntPoint2D.ToPoint">
            <summary>
            Converts this <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> into a <see cref="T:System.Drawing.Point"/>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Point"/> that represents this <see cref="T:BioLab.Math.Geometry.IntPoint2D"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.IntPoint2D.CalculateSquareEuclideanDistance(BioLab.Math.Geometry.IntPoint2D,BioLab.Math.Geometry.IntPoint2D)">
            <summary>
            Calculates the square Euclidean distance, in pixel, between the two locations.
            </summary>
            <param name="location1">The first location.</param>
            <param name="location2">The second location.</param>
            <returns>The square Euclidean distance, in pixel, between the two locations.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.IntPoint2D.CalculateEuclideanDistance(BioLab.Math.Geometry.IntPoint2D,BioLab.Math.Geometry.IntPoint2D)">
            <summary>
            Calculates the Euclidean distance (in pixel) between the two locations.
            </summary>
            <param name="location1">The first location.</param>
            <param name="location2">The second location.</param>
            <returns>The Euclidean distance, in pixel, between the two locations.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.IntPoint2D.IsAdjacentTo(BioLab.Math.Geometry.IntPoint2D,BioLab.ImageProcessing.MetricType)">
            <summary>
            Determines whether the current location is adjacent to the specified location according to the given metric.
            </summary>
            <param name="location">The specified location.</param>
            <param name="metric">The metric to be used.</param>
            <returns>
            	<c>true</c> if the current location is adjacent to the specified location; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BioLab.Math.Geometry.IntPoint2D.op_Equality(BioLab.Math.Geometry.IntPoint2D,BioLab.Math.Geometry.IntPoint2D)">
            <summary>
            Compares two <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> objects. 
            The result specifies whether the values of the <see cref="P:BioLab.Math.Geometry.IntPoint2D.X"/> and <see cref="P:BioLab.Math.Geometry.IntPoint2D.Y"/> 
            properties of the two <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> objects are equal.
            </summary>
            <param name="location1"> A <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> to compare.</param>
            <param name="location2"> A <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> to compare.</param>
            <returns>
                <c>true</c> if the <see cref="P:BioLab.Math.Geometry.IntPoint2D.X"/> and <see cref="P:BioLab.Math.Geometry.IntPoint2D.Y"/> values of the two location 
                are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BioLab.Math.Geometry.IntPoint2D.op_Inequality(BioLab.Math.Geometry.IntPoint2D,BioLab.Math.Geometry.IntPoint2D)">
            <summary>
            Compares two <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> objects.
            The result specifies whether the values of the <see cref="P:BioLab.Math.Geometry.IntPoint2D.X"/> and <see cref="P:BioLab.Math.Geometry.IntPoint2D.Y"/> 
            properties of the two <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> objects are unequal.
            </summary>
            <param name="intPoint1">A <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> to compare.</param>
            <param name="intPoint2">A <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> to compare.</param>
            <returns>
                <c>true</c> if the values of either the <see cref="P:BioLab.Math.Geometry.IntPoint2D.X"/> properties or the <see cref="P:BioLab.Math.Geometry.IntPoint2D.Y"/> 
                properties of the two location differ; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BioLab.Math.Geometry.IntPoint2D.Equals(System.Object)">
            <summary>
            Specifies whether this <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> contains the same coordinates as the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
                <c>true</c> if <paramref name="obj"/> and this instance contain the same coordinates; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BioLab.Math.Geometry.IntPoint2D.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:BioLab.Math.Geometry.IntPoint2D"/>.
            </summary>
            <returns>32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.IntPoint2D.op_Implicit(BioLab.Math.Geometry.IntPoint2D)~BioLab.Math.Geometry.Point2D">
            <summary>
            Implicit operator to convert a <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> in a 
            <see cref="T:BioLab.Math.Geometry.Point2D"/>.
            </summary>
            <param name="intPoint">The <see cref="T:BioLab.Math.Geometry.IntPoint2D"/>.</param>
            <returns>The converted <see cref="T:BioLab.Math.Geometry.Point2D"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.IntPoint2D.MapTo(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Scales, rotantes and translates this <see cref="T:BioLab.Math.Geometry.IntPoint2D"/>.
            </summary>
            <param name="scale">The scale.</param>
            <param name="angle">The rotation angle.</param>
            <param name="dx">The horizontal translation.</param>
            <param name="dy">The vertical translation.</param>
            <returns>The new <see cref="T:BioLab.Math.Geometry.IntPoint2D"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.IntPoint2D.InverseMapTo(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Inverse mapping of this <see cref="T:BioLab.Math.Geometry.IntPoint2D"/>.
            </summary>
            <param name="scale">The scale.</param>
            <param name="angle">The rotation angle.</param>
            <param name="dx">The horizontal translation.</param>
            <param name="dy">The vertical translation.</param>
            <returns>The new <see cref="T:BioLab.Math.Geometry.IntPoint2D"/>.</returns>
        </member>
        <member name="F:BioLab.Math.Geometry.IntPoint2D.Origin">
            <summary>
            Represents the origin (0,0). This field is read-only.
            </summary>
        </member>
        <member name="F:BioLab.Math.Geometry.IntPoint2D.Invalid">
            <summary>
            Represents an invalid pixel location. This field is read-only.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.IntPoint2D.X">
            <summary>
            Gets or sets the x coordinate of the pixel.
            </summary>
            <value>The x coordinate.</value>
        </member>
        <member name="P:BioLab.Math.Geometry.IntPoint2D.Y">
            <summary>
            Gets or sets the y coordinate of the pixel.
            </summary>
            <value>The y coordinate.</value>
        </member>
        <member name="T:BioLab.Math.Geometry.IntRectangle">
            <summary>
            Represents a rectangle expressed in integer coordinates.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.IntRectangle.#ctor(BioLab.Math.Geometry.IntPoint2D,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.IntRectangle"/> class.
            </summary>
            <param name="topLeftCorner">The coordinates of the top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.IntRectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.IntRectangle"/> structure.
            </summary>
            <param name="x">The horizontal coordinate of the top-left corner of the rectangle.</param>
            <param name="y">The vertical coordinate of the top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.IntRectangle.#ctor(BioLab.Math.Geometry.IntPoint2D,BioLab.Math.Geometry.IntPoint2D)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.IntRectangle"/> structure.
            </summary>
            <param name="topLeftCorner">The coordinates of the top-left corner of the rectangle.</param>
            <param name="bottomRightCorner">The coordinates of the bottom-right corner of the rectangle.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.IntRectangle.IsPointInside(BioLab.Math.Geometry.IntPoint2D)">
            <summary>
            Determines if the specified <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> is contained within the
            rectangular region defined by this Rectangle.
            </summary>
            <param name="point">The <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> to test.</param>
            <returns>This method returns true if the <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> is contained
            within this Rectangle structure; otherwise false.</returns>
        </member>
        <member name="F:BioLab.Math.Geometry.IntRectangle.Empty">
            <summary>
            Represents a <see cref="T:BioLab.Math.Geometry.IntRectangle"/> that has X, Y, Width, and Height set to zero.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.IntRectangle.ToRectangle">
            <summary>
            Converts this <see cref="T:BioLab.Math.Geometry.IntRectangle"/> into a <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> that represents this <see cref="T:BioLab.Math.Geometry.IntRectangle"/>.</returns>
        </member>
        <member name="P:BioLab.Math.Geometry.IntRectangle.Width">
            <summary>
            Gets the width of the rectangle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.IntRectangle.Height">
            <summary>
            Gets the height of the rectangle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.IntRectangle.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of this <see cref="T:BioLab.Math.Geometry.IntRectangle"/> structure.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.IntRectangle.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of this <see cref="T:BioLab.Math.Geometry.IntRectangle"/> structure.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.IntRectangle.Left">
            <summary>
            Gets the x-coordinate of the left edge of this <see cref="T:BioLab.Math.Geometry.IntRectangle"/> structure.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.IntRectangle.Right">
            <summary>
            Gets the x-coordinate that is the sum of X and Width property values of this <see cref="T:BioLab.Math.Geometry.IntRectangle"/>
            structure.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.IntRectangle.Top">
            <summary>
            Gets the y-coordinate of the top edge of this <see cref="T:BioLab.Math.Geometry.IntRectangle"/> structure.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.IntRectangle.Bottom">
            <summary>
            Gets the y-coordinate that is the sum of the Y and Height property values of this
            <see cref="T:BioLab.Math.Geometry.IntRectangle"/> structure.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.IntRectangle.Area">
            <summary>
            Gets the area of the rectangle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.IntRectangle.Perimeter">
            <summary>
            Gets the perimeter of the rectangle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.IntRectangle.TopLeft">
            <summary>
            Gets the top-left corner of the rectangle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.IntRectangle.BottomRight">
            <summary>
            Gets the bottom-right corner of the rectangle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.IntRectangle.IsEmpty">
            <summary>
            Indicates whether the specified <see cref="T:BioLab.Math.Geometry.IntRectangle"/> object is an
            Empty rectangle.
            </summary>
        </member>
        <member name="T:BioLab.Math.Geometry.Point2D">
            <summary>
            Represents an ordered pair of floating-point x- and y-coordinates that defines a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.Point2D"/> structure with the specified coordinates.
            </summary>
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The vertical position of the point.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.#ctor(BioLab.Math.Geometry.IntPoint2D)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.Point2D"/> structure
            derived from a <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> point.
            </summary>
            <param name="intPoint2D">The pixel location.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.Equals(System.Object)">
            <summary>
            Specifies whether this <see cref="T:BioLab.Math.Geometry.Point2D"/> contains the same coordinates as the specified
            <see cref="T:System.Object"/>. (Overrides <see cref="T:System.ValueType"/>.<see cref="M:System.ValueType.Equals(System.Object)"/>.)
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>This method returns true if obj is a <see cref="T:BioLab.Math.Geometry.Point2D"/> and has the same
            coordinates as this <see cref="T:BioLab.Math.Geometry.Point2D"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:BioLab.Math.Geometry.Point2D"/> structure.
            (Overrides <see cref="T:System.ValueType"/>.<see cref="M:System.Object.GetHashCode"/>.)
            </summary>
            <returns>An integer value that specifies a hash value for this <see cref="T:BioLab.Math.Geometry.Point2D"/> structure.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.op_Equality(BioLab.Math.Geometry.Point2D,BioLab.Math.Geometry.Point2D)">
            <summary>
            Compares two <see cref="T:BioLab.Math.Geometry.Point2D"/> structures. The result specifies whether the values
            of the X and Y properties of the two <see cref="T:BioLab.Math.Geometry.Point2D"/> structures are equal.
            </summary>
            <param name="point1">A <see cref="T:BioLab.Math.Geometry.Point2D"/> to compare.</param>
            <param name="point2">A <see cref="T:BioLab.Math.Geometry.Point2D"/> to compare.</param>
            <returns>true if the X and Y values of the left and right <see cref="T:BioLab.Math.Geometry.Point2D"/> structures
            are equal; otherwise, false.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.op_Inequality(BioLab.Math.Geometry.Point2D,BioLab.Math.Geometry.Point2D)">
            <summary>
            Determines whether the coordinates of the specified points are not equal.
            </summary>
            <param name="point1">A <see cref="T:BioLab.Math.Geometry.Point2D"/> to compare.</param>
            <param name="point2">A <see cref="T:BioLab.Math.Geometry.Point2D"/> to compare.</param>
            <returns>true to indicate the X and Y values of left and right are not equal; otherwise, false. </returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.CalculateSquareEuclideanDistance(BioLab.Math.Geometry.Point2D,BioLab.Math.Geometry.Point2D)">
            <summary>
            Calculates the square Euclidean distance, between the two <see cref="T:BioLab.Math.Geometry.Point2D"/>.
            </summary>
            <param name="point1">The first <see cref="T:BioLab.Math.Geometry.Point2D"/>.</param>
            <param name="point2">The second <see cref="T:BioLab.Math.Geometry.Point2D"/>.</param>
            <returns>The square Euclidean distance between the two <see cref="T:BioLab.Math.Geometry.Point2D"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.CalculateSquareEuclideanDistance(BioLab.Math.Geometry.Point2D,BioLab.Math.Geometry.IntPoint2D)">
            <summary>
            Calculates the square Euclidean distance, between two points.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>The square Euclidean distance between the two points.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.CalculateEuclideanDistance(BioLab.Math.Geometry.Point2D,BioLab.Math.Geometry.Point2D)">
            <summary>
            Calculates the Euclidean distance between the two <see cref="T:BioLab.Math.Geometry.Point2D"/>.
            </summary>
            <param name="point1">The first <see cref="T:BioLab.Math.Geometry.Point2D"/>.</param>
            <param name="point2">The second <see cref="T:BioLab.Math.Geometry.Point2D"/>.</param>
            <returns>The Euclidean distance between the two <see cref="T:BioLab.Math.Geometry.Point2D"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.CalculatePointLineDistance(BioLab.Math.Geometry.Point2D,BioLab.Math.Geometry.Point2D,BioLab.Math.Geometry.Point2D)">
            <summary>
            Calculates the distance between a point and the line specified by two other points.
            </summary>
            <param name="point">The point to search for.</param>
            <param name="linePoint1">The first point that defines the line.</param>
            <param name="linePoint2">The second point that defines the line.</param>
            <returns></returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.CalculatePointSegmentPosition(BioLab.Math.Geometry.Point2D,BioLab.Math.Geometry.Point2D,BioLab.Math.Geometry.Point2D)">
            <summary>
            Evaluates if point is included in a segment.
            </summary>
            <param name="point">The point.</param>
            <param name="segmentPoint1">The first point of a segment.</param>
            <param name="segmentPoint2">The second point of a segment.</param>
            <returns>
                0 if the point coincides with the fist point of the segment, <br />
                1 if the point coincides with the second point of the segment, <br />
                &lt; 0 if the point is on the bacward extension of the segment, <br />
                &gt; 1 if the point is on the forward extension of the segment, <br />
                &gt; 0 and &lt; 1 if the point is interior to the segment
            </returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.op_Explicit(BioLab.Math.Geometry.Point2D)~BioLab.Math.Geometry.IntPoint2D">
            <summary>
            Performs an explicit conversion from <see cref="T:BioLab.Math.Geometry.Point2D"/>
            to <see cref="T:BioLab.Math.Geometry.IntPoint2D"/>.
            </summary>
            <param name="point">The point whose coordinates will be converted to a IntPoint2D.</param>
            <returns>The IntPoint2D of the current point.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.Offset(System.Double,System.Double)">
            <summary>
            Translates the <see cref="T:BioLab.Math.Geometry.Point2D"/> by the specified amount.
            </summary>
            <param name="dx">The amount to offset the x-coordinate.</param>
            <param name="dy">The amount to offset the y-coordinate.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.Offset(BioLab.Math.Geometry.Point2D)">
            <summary>
            Translates this <see cref="T:BioLab.Math.Geometry.Point2D"/> by the specified <see cref="T:BioLab.Math.Geometry.Point2D"/>.
            </summary>
            <param name="point">The <see cref="T:BioLab.Math.Geometry.Point2D"/> used offset this <see cref="T:BioLab.Math.Geometry.Point2D"/>.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.LoadFromStream(System.IO.Stream)">
            <summary>
            Creates an <see cref="T:BioLab.Math.Geometry.Point2D"/> from the specified data stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the data for this <see cref="T:BioLab.Math.Geometry.Point2D"/>.</param>
            <returns>The <see cref="T:BioLab.Math.Geometry.Point2D"/> this method creates.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the current <see cref="T:BioLab.Math.Geometry.Point2D"/> to a specified <see cref="T:System.IO.Stream"/>. 
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.Math.Geometry.Point2D"/> will be saved.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.CalculateAzimut(BioLab.Math.Geometry.Point2D,BioLab.Math.Geometry.Point2D)">
            <summary>
            Calculates the angle subtended by the edge connecting the two <see cref="T:BioLab.Math.Geometry.Point2D"/> and the
            horizontal axis.
            </summary>
            <param name="point1">The first <see cref="T:BioLab.Math.Geometry.Point2D"/>.</param>
            <param name="point2">The second <see cref="T:BioLab.Math.Geometry.Point2D"/>.</param>
            <returns>The angle subtended by the edge connecting the two <see cref="T:BioLab.Math.Geometry.Point2D"/> and the
            horizontal axis.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.CalculateModulus">
            <summary>
            Calculates the modulus of the current <see cref="T:BioLab.Math.Geometry.Point2D"/>.
            </summary>
            <returns>The modulus of the current <see cref="T:BioLab.Math.Geometry.Point2D"/></returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.Normalize">
            <summary>
            Normalizes the coordinates of the current <see cref="T:BioLab.Math.Geometry.Point2D"/> by dividing it by its modulus.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.ToPoint">
            <summary>
            Converts this <see cref="T:BioLab.Math.Geometry.Point2D"/> into a <see cref="T:System.Drawing.Point"/>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Point"/> that represents this <see cref="T:BioLab.Math.Geometry.Point2D"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.ToPointF">
            <summary>
            Converts this <see cref="T:BioLab.Math.Geometry.Point2D"/> into a <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <returns>A <see cref="T:System.Drawing.PointF"/> that represents this <see cref="T:BioLab.Math.Geometry.Point2D"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.MapTo(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Scales, rotantes and translates this <see cref="T:BioLab.Math.Geometry.Point2D"/>.
            </summary>
            <param name="scale">The scale.</param>
            <param name="angle">The rotation angle.</param>
            <param name="dx">The horizontal translation.</param>
            <param name="dy">The vertical translation.</param>
            <returns>The new <see cref="T:BioLab.Math.Geometry.Point2D"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2D.InverseMapTo(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Inverse mapping of this <see cref="T:BioLab.Math.Geometry.Point2D"/>.
            </summary>
            <param name="scale">The scale.</param>
            <param name="angle">The rotation angle.</param>
            <param name="dx">The horizontal translation.</param>
            <param name="dy">The vertical translation.</param>
            <returns>The new <see cref="T:BioLab.Math.Geometry.Point2D"/>.</returns>
        </member>
        <member name="P:BioLab.Math.Geometry.Point2D.X">
            <summary>
            Gets or sets the x-coordinate of this <see cref="T:BioLab.Math.Geometry.Point2D"/>
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Point2D.Y">
            <summary>
            Gets or sets the y-coordinate of this <see cref="T:BioLab.Math.Geometry.Point2D"/>
            </summary>
        </member>
        <member name="T:BioLab.Math.Geometry.Polygon">
            <summary>
            Represents a generic polygon.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:BioLab.Math.Geometry.Polygon"/> class.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.#ctor(BioLab.Math.Geometry.Point2D[])">
            <summary>
            Initializes a new <see cref="T:BioLab.Math.Geometry.Polygon"/> using the <see cref="T:BioLab.Math.Geometry.Point2D"/> contained
            in the pointArray as vertices of the polygon.
            </summary>
            <param name="pointArray">The <see cref="T:BioLab.Math.Geometry.Point2D"/> array that contains the vertices of the polygon.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.#ctor(System.Collections.Generic.IEnumerable{BioLab.Math.Geometry.Point2D})">
            <summary>
            Initializes a new <see cref="T:BioLab.Math.Geometry.Polygon"/> using the <see cref="T:BioLab.Math.Geometry.Point2D"/> contained
            in the pointList as vertices of the polygon.
            </summary>
            <param name="points">The vertices of the polygon.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.AddPoint(BioLab.Math.Geometry.Point2D)">
            <summary>
            Add a <see cref="T:BioLab.Math.Geometry.Point2D"/> at the end of the list that contains the vertices of the <see cref="T:BioLab.Math.Geometry.Polygon"/>.
            </summary>
            <param name="point">The <see cref="T:BioLab.Math.Geometry.Point2D"/> to be added to the list that contains the vertices
            of the polygon.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.InsertPoint(System.Int32,BioLab.Math.Geometry.Point2D)">
            <summary>
            Insert a <see cref="T:BioLab.Math.Geometry.Point2D"/> into the <see cref="T:BioLab.Math.Geometry.Polygon"/> at the specified position.
            </summary>
            <param name="position">The zero-based position at which point should be inserted.</param>
            <param name="point">The <see cref="T:BioLab.Math.Geometry.Point2D"/> to insert.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.ContainsVertex(System.Double,System.Double)">
            <summary>
            Determines whether a vertex is in the <see cref="T:BioLab.Math.Geometry.Polygon"/>.
            </summary>
            <param name="x">The x coordinate of the vertex to locate in <see cref="T:BioLab.Math.Geometry.Polygon"/>.</param>
            <param name="y">The y coordinate of the vertex to locate in <see cref="T:BioLab.Math.Geometry.Polygon"/>.</param>
            <returns>true if the specified vertex is found in the <see cref="T:BioLab.Math.Geometry.Polygon"/>; otherwise, false.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.IndexOfPoint(System.Double,System.Double)">
            <summary>
            Returns the index the of point at specified position.
            </summary>
            <param name="x">The point x coordinate.</param>
            <param name="y">The point y coordinate.</param>
            <returns>The index of the point at the specified coordinates if exists, -1 otherwise</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.IndexOfNearestPoint(System.Double,System.Double,System.Double@)">
            <summary>
            Gets the index of the nearest point starting from the specified coordinates.
            </summary>
            <param name="startX">The point x coordinate</param>
            <param name="startY">The point y coordinate.</param>        
            <param name="distance">The distance</param>
            <returns>The index of the point nearest the specified coordinates in the interval, if exists, -1 otherwise</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.RemovePoint(System.Double,System.Double)">
            <summary>
            Remove the specified vertex from the <see cref="T:BioLab.Math.Geometry.Polygon"/>. 
            </summary>
            <param name="x">The x coordinate of the vertex to remove from the <see cref="T:BioLab.Math.Geometry.Polygon"/>.</param>
            <param name="y">The y coordinate of the vertex to remove from the <see cref="T:BioLab.Math.Geometry.Polygon"/>.</param>
            <returns>true if specified vertex is successfully removed; otherwise, false.
            This method also returns false if the vertex was not found in the <see cref="T:BioLab.Math.Geometry.Polygon"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.RemovePointAt(System.Int32)">
            <summary>
            Removes the point at specified index.
            </summary>
            <param name="index">The point index.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.RemoveAllPoints">
            <summary>
            Removes all points.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.IsPointIncludedCrossingNumber(BioLab.Math.Geometry.Point2D)">
            <summary>
            Determines if the specified <see cref="T:BioLab.Math.Geometry.Point2D"/> is contained within the region defined 
            by this <see cref="T:BioLab.Math.Geometry.Polygon"/> using the crossing number test.
            </summary>
            <param name="point">The <see cref="T:BioLab.Math.Geometry.Point2D"/> to test.</param>
            <returns>This method returns true if the <see cref="T:BioLab.Math.Geometry.Point2D"/> is contained within this 
            <see cref="T:BioLab.Math.Geometry.Polygon"/> structure; otherwise false.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.IsPointIncludedWindingNumber(BioLab.Math.Geometry.Point2D)">
            <summary>
            Determines if the specified <see cref="T:BioLab.Math.Geometry.Point2D"/> is contained within the region defined 
            by this <see cref="T:BioLab.Math.Geometry.Polygon"/> using the winding number test.
            </summary>
            <param name="point">The <see cref="T:BioLab.Math.Geometry.Point2D"/> to test.</param>
            <returns>This method returns true if the <see cref="T:BioLab.Math.Geometry.Point2D"/> is contained within this 
            <see cref="T:BioLab.Math.Geometry.Polygon"/> structure; otherwise false.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.IsPointIncluded(BioLab.Math.Geometry.Point2D)">
            <summary>
            Determines if the specified <see cref="T:BioLab.Math.Geometry.Point2D"/> is contained within the region defined 
            by this <see cref="T:BioLab.Math.Geometry.Polygon"/>.
            </summary>
            <param name="point">The <see cref="T:BioLab.Math.Geometry.Point2D"/> to test.</param>
            <returns>This method returns true if the <see cref="T:BioLab.Math.Geometry.Point2D"/> is contained within this 
            <see cref="T:BioLab.Math.Geometry.Polygon"/> structure; otherwise false.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.ToPoint2DArray">
            <summary>
            Copies the vertices of the <see cref="T:BioLab.Math.Geometry.Polygon"/> to a new array of <see cref="T:BioLab.Math.Geometry.Point2D"/>.
            </summary>
            <returns>An array containing copies of the vertices of the current <see cref="T:BioLab.Math.Geometry.Polygon"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.ToPointFArray">
            <summary>
            Copies the vertices of the <see cref="T:BioLab.Math.Geometry.Polygon"/> to a new array of <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <returns>An array containing copies of the vertices of the current <see cref="T:BioLab.Math.Geometry.Polygon"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.FindNearestSide(BioLab.Math.Geometry.Point2D,System.Double@)">
            <summary>
            Finds the side that is nearest to a given point.
            </summary>
            <param name="point">The point to search for.</param>
            <param name="distance">The distance between the side and the point.</param>
            <returns>The index of the first vertex of the side.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.FindNearestSide(BioLab.Math.Geometry.Point2D,System.Double)">
            <summary>
            Finds the side that is nearest to a given point within a specified maximum distance.
            </summary>
            <param name="point">The point to search for.</param>
            <param name="maximumDistance">The maximum allowed distance between the point and the side.</param>
            <returns>
            The index of the first vertex of the side if the distance is lower than or equal to the
            maximum allowed; -1 otherwise.
            </returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.LoadFromFile(System.String)">
            <summary>
            Creates an <see cref="T:BioLab.Math.Geometry.Polygon"/> from the specified file.
            </summary>
            <param name="path">A string that contains the name of the file from which to create the <see cref="T:BioLab.Math.Geometry.Polygon"/>.</param>
            <returns>The <see cref="T:BioLab.Math.Geometry.Polygon"/> this method creates.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.LoadFromStream(System.IO.Stream)">
            <summary>
            Creates an <see cref="T:BioLab.Math.Geometry.Polygon"/> from the specified data stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the data for this <see cref="T:BioLab.Math.Geometry.Polygon"/>.</param>
            <returns>The <see cref="T:BioLab.Math.Geometry.Polygon"/> this method creates.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.SaveToFile(System.String)">
            <summary>
            Saves the current <see cref="T:BioLab.Math.Geometry.Polygon"/> to a specified file.
            </summary>
            <param name="path">A string that contains the name of the file to which to save the current <see cref="T:BioLab.Math.Geometry.Polygon"/>.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the current <see cref="T:BioLab.Math.Geometry.Polygon"/> to a specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.Math.Geometry.Polygon"/> will be saved.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Polygon.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection of <see cref="T:BioLab.Math.Geometry.Point2D"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate
            through the collection of<see cref="T:BioLab.Math.Geometry.Point2D"/>.</returns>
        </member>
        <member name="P:BioLab.Math.Geometry.Polygon.Item(System.Int32)">
            <summary>
            Gets or sets the vertex at the specified index.
            </summary>
            <param name="index">The zero-based index of the vertex to get or set.</param>
            <returns>The vertex at the specified index.</returns>
        </member>
        <member name="P:BioLab.Math.Geometry.Polygon.VertexCount">
            <summary>
            Gets the number of vertices actually contained in the <see cref="T:BioLab.Math.Geometry.Polygon"/>.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Polygon.Area">
            <summary>
            Gets the area of the polygon.
            </summary>
        </member>
        <member name="T:BioLab.Math.Geometry.Angle">
            <summary>
            Represents an angle [0..2π[.
            The angle is always measured increasing counter-clockwise from the horizontal axis to the right.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.Angle.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.Angle"/> structure.
            </summary>
            <param name="angle">The angle in radians [0..2π[</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Angle.#ctor(BioLab.Math.Geometry.Point2D,BioLab.Math.Geometry.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.Angle"/> structure using
            the angle subtended by the line going through point1 and point2 with x-axis.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Angle.#ctor(BioLab.Math.Geometry.IntPoint2D,BioLab.Math.Geometry.IntPoint2D)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.Angle"/> structure using
            the angle subtended by the line going through point1 and point2 with x-axis.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Angle.op_Explicit(BioLab.Math.Geometry.Angle)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:BioLab.Math.Geometry.Angle"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="angle">The angle whose current value will be converted to a double value.</param>
            <returns>The double value of the current angle.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Angle.NormalizeRadians(System.Double)">
            <summary>
            Converts an angle to the range [0..2π[
            </summary>
            <param name="angle">The angle in radians</param>
            <returns>The angle in radians [0..2π[</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Angle.CalculateDifferenceRadians(BioLab.Math.Geometry.Angle,BioLab.Math.Geometry.Angle)">
            <summary>
            Calculates the shortest angle difference between two <see cref="T:BioLab.Math.Geometry.Angle"/>. The angle is measured from
            the second angle to the first angle.
            A positive value means the angle is measured counter-clockwise.
            A negative value means the angle is measured clockwise.
            </summary>
            <param name="angle1">The first <see cref="T:BioLab.Math.Geometry.Angle"/>.</param>
            <param name="angle2">The second <see cref="T:BioLab.Math.Geometry.Angle"/>.</param>
            <returns>A value in the range [-π..π[ in radians</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Angle.CalculateNormalizedDifferenceRadians(BioLab.Math.Geometry.Angle,BioLab.Math.Geometry.Angle)">
            <summary>
            Calculates the normalized angle difference (measured counter-clockwise) between two <see cref="T:BioLab.Math.Geometry.Angle"/>.
            </summary>
            <param name="angle1">The first <see cref="T:BioLab.Math.Geometry.Angle"/>.</param>
            <param name="angle2">The second <see cref="T:BioLab.Math.Geometry.Angle"/>.</param>
            <returns>A value in the range [0..2π[ in radians</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Angle.CalculateAverage(BioLab.Math.Geometry.Angle,BioLab.Math.Geometry.Angle)">
            <summary>
            Calculates the average (bisector) of two angles.
            </summary>
            <param name="angle1">The first <see cref="T:BioLab.Math.Geometry.Angle"/>.</param>
            <param name="angle2">The second <see cref="T:BioLab.Math.Geometry.Angle"/>.</param>
            <returns>The angle of the bisector of the two input angles.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Angle.op_Subtraction(BioLab.Math.Geometry.Angle,BioLab.Math.Geometry.Angle)">
            <summary>
            This operator is used to perform subtraction between two <see cref="T:BioLab.Math.Geometry.Angle"/>.
            </summary>
            <param name="angle1">The first <see cref="T:BioLab.Math.Geometry.Angle"/>.</param>
            <param name="angle2">The second <see cref="T:BioLab.Math.Geometry.Angle"/>.</param>
            <returns>The resulting <see cref="T:BioLab.Math.Geometry.Angle"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Angle.op_Equality(BioLab.Math.Geometry.Angle,BioLab.Math.Geometry.Angle)">
            <summary>
            Implements the operator == in order to check if two angles (in radians) are equal.
            </summary>
            <param name="angle1">The first angle to compare.</param>
            <param name="angle2">The second angle to compare.</param>
            <returns>True if the two angles are equal.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Angle.op_Inequality(BioLab.Math.Geometry.Angle,BioLab.Math.Geometry.Angle)">
            <summary>
            Implements the operator != in order to check if two angles (in radians) are not equal.
            </summary>
            <param name="angle1">The first angle.</param>
            <param name="angle2">The second angle.</param>
            <returns>True if the angles are not equal.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Angle.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Angle.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Angle.ToString">
            <summary>
            Returns the angle as a string.
            Format: radians (degrees)
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="P:BioLab.Math.Geometry.Angle.Degrees">
            <summary>
            Gets the value in degrees of the current <see cref="T:BioLab.Math.Geometry.Angle"/>.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Angle.Radians">
            <summary>
            Gets the value in radians of the current <see cref="T:BioLab.Math.Geometry.Angle"/>.
            </summary>
        </member>
        <member name="T:BioLab.Math.Geometry.ByteAngle">
            <summary>
            Represents a binary degree angle [0..256[.
            The binary degree, also known as the binary radian (or brad), is 1/256 of a full circle.
            The binary degree is used in computing so that an angle can be efficiently represented in a single byte.
            The angle is always measured increasing counter-clockwise from the horizontal axis to the right.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.#cctor">
            <summary>
            Static constructor to initialize radians, degrees, sin and cos table.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.ByteAngle"/> structure.
            </summary>
            <param name="angle">The angle in binary degree [0..256[</param>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.ByteAngle"/> structure.
            </summary>
            <param name="angle">The angle in the range [-128..128[</param>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.ByteAngle"/> structure.
            </summary>
            <param name="angle">The angle in radians [0..2π[</param>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.#ctor(BioLab.Math.Geometry.Point2D,BioLab.Math.Geometry.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.ByteAngle"/> structure using
            the angle subtended by the line going through p1 and p2 with x-axis.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.#ctor(BioLab.Math.Geometry.IntPoint2D,BioLab.Math.Geometry.IntPoint2D)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.ByteAngle"/> structure using
            the angle subtended by the line going through p1 and p2 with x-axis.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.Normalize(System.Int32)">
            <summary>
            Converts and angle from the range [-128..128[ to the range [0..256[
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.op_Implicit(BioLab.Math.Geometry.ByteAngle)~System.Byte">
            <summary>
            Performs an implicit conversion from <see cref="T:BioLab.Math.Geometry.ByteAngle"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="angle">The angle whose current value will be converted to a byte value.</param>
            <returns>The byte value of the current angle.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.ToString">
            <summary>
            Converts the value of the current <see cref="T:BioLab.Math.Geometry.ByteAngle"/> to its equivalent string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.CalculateDifference(BioLab.Math.Geometry.ByteAngle,BioLab.Math.Geometry.ByteAngle)">
            <summary>
            Calculates the shortest angle difference between two angles
            A positive value means the angle is measured counter-clockwise<para/>
            A negative value means the angle is measured clockwise
            </summary>
            <param name="angle1">The first <see cref="T:BioLab.Math.Geometry.ByteAngle"/>.</param>
            <param name="angle2">The second <see cref="T:BioLab.Math.Geometry.ByteAngle"/>.</param>
            <returns>A value in the range [-128..128[.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.CalculateNormalizedDifference(BioLab.Math.Geometry.ByteAngle,BioLab.Math.Geometry.ByteAngle)">
            <summary>
            Calculates the normalized angle difference (measured counter-clockwise) between two angles
            </summary>
            <param name="angle1">The first <see cref="T:BioLab.Math.Geometry.ByteAngle"/>.</param>
            <param name="angle2">The second <see cref="T:BioLab.Math.Geometry.ByteAngle"/>.</param>
            <returns>A value in the range [0..256[.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.CalculateAverage(BioLab.Math.Geometry.ByteAngle,BioLab.Math.Geometry.ByteAngle)">
            <summary>
            Calculates the average (bisector) of two angles.
            </summary>
            <param name="angle1">The first <see cref="T:BioLab.Math.Geometry.ByteAngle"/>.</param>
            <param name="angle2">The second <see cref="T:BioLab.Math.Geometry.ByteAngle"/>.</param>
            <returns>The angle of the bisector of the two input angles.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.op_Subtraction(BioLab.Math.Geometry.ByteAngle,BioLab.Math.Geometry.ByteAngle)">
            <summary>
            This operator is used to perform subtraction between two <see cref="T:BioLab.Math.Geometry.ByteAngle"/>.
            </summary>
            <param name="angle1">The first <see cref="T:BioLab.Math.Geometry.ByteAngle"/>.</param>
            <param name="angle2">The second <see cref="T:BioLab.Math.Geometry.ByteAngle"/>.</param>
            <returns>The resulting <see cref="T:BioLab.Math.Geometry.ByteAngle"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.op_Equality(BioLab.Math.Geometry.ByteAngle,BioLab.Math.Geometry.ByteAngle)">
            <summary>
            Compares two angles. The results specifies whether the two angles are equal.
            </summary>
            <param name="angle1">The first angle to compare.</param>
            <param name="angle2">The second angle to compare.</param>
            <returns>True if the two angles are equal.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.op_Inequality(BioLab.Math.Geometry.ByteAngle,BioLab.Math.Geometry.ByteAngle)">
            <summary>
            Compares two angles. The results specifies whether the two angles are not equal.
            </summary>
            <param name="angle1">The first angle to compare.</param>
            <param name="angle2">The second angle to compare.</param>
            <returns>True if the two angles are not equal.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.op_Increment(BioLab.Math.Geometry.ByteAngle)">
            <summary>
            Increments by one the angle.
            </summary>
            <param name="angle">The <see cref="T:BioLab.Math.Geometry.ByteAngle"/> to increment.</param>
            <returns>The resulting <see cref="T:BioLab.Math.Geometry.ByteAngle"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.op_Decrement(BioLab.Math.Geometry.ByteAngle)">
            <summary>
            Decrements by one the angle.
            </summary>
            <param name="angle">The <see cref="T:BioLab.Math.Geometry.ByteAngle"/> to decrement.</param>
            <returns>The resulting <see cref="T:BioLab.Math.Geometry.ByteAngle"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.ToRadians(System.Byte)">
            <summary>
            Converts the specified angle value from the range [0..256[ to the range [0..2π[.
            </summary>
            <param name="angle">The angle value in the range [0..256[.</param>
            <returns>The corresponding radian value in the range [0..2π[.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.ToRadians(System.Int32)">
            <summary>
            Converts the specified angle value from the range [-128..128[ to the range [-π..π[.
            </summary>
            <param name="angle">The angle value in the range [-128..128[.</param>
            <returns>The corresponding radian value in the range [-π..π[.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.ByteAngle.Equals(BioLab.Math.Geometry.ByteAngle)">
            <summary>
            Specifies whether this <see cref="T:BioLab.Math.Geometry.ByteAngle"/> contains the same value as the specified
            <see cref="T:BioLab.Math.Geometry.ByteAngle"/>.
            </summary>
            <param name="other">The <see cref="T:BioLab.Math.Geometry.ByteAngle"/> to test.</param>
            <returns>This method returns true if angle has the same value as this <see cref="T:BioLab.Math.Geometry.ByteAngle"/>.</returns>
        </member>
        <member name="P:BioLab.Math.Geometry.ByteAngle.Radians">
            <summary>
            Gets the value of this <see cref="T:BioLab.Math.Geometry.ByteAngle"/> in radians [0..2π[.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.ByteAngle.Degrees">
            <summary>
            Gets the value of this <see cref="T:BioLab.Math.Geometry.ByteAngle"/> in degrees [0..360[.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.ByteAngle.Byte">
            <summary>
            Gets the value of this <see cref="T:BioLab.Math.Geometry.ByteAngle"/> in binary degrees [0..256[.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.ByteAngle.Sin">
            <summary>
            Gets the sine of the angle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.ByteAngle.Cos">
            <summary>
            Gets the cosine of the angle
            </summary>
        </member>
        <member name="T:BioLab.Math.Geometry.Circle">
            <summary>
            Represents a circle.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.Circle.#ctor(BioLab.Math.Geometry.Point2D,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.Circle"/> class.
            </summary>
            <param name="center">The center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Circle.IsPointInside(BioLab.Math.Geometry.Point2D)">
            <summary>
            ???
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="P:BioLab.Math.Geometry.Circle.Center">
            <summary>
            Gets the center of the circle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Circle.Radius">
            <summary>
            Gets the radius of the circle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Circle.Area">
            <summary>
            Gets the area of the circle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Circle.Circumference">
            <summary>
            Gets the circumference of the circle
            </summary>
        </member>
        <member name="T:BioLab.Math.Geometry.Rectangle">
            <summary>
            Represents a rectangle.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.Rectangle.#ctor(BioLab.Math.Geometry.Point2D,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.Rectangle"/> class.
            </summary>
            <param name="topLeftCorner">The coordinates of the top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Rectangle.#ctor(BioLab.Math.Geometry.Point2D,BioLab.Math.Geometry.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.Rectangle"/> class.
            </summary>
            <param name="topLeftCorner">The coordinates of the top-left corner of the rectangle.</param>
            <param name="bottomRightCorner">The coordinates of the bottom-right corner of the rectangle.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Rectangle.IsPointInside(BioLab.Math.Geometry.Point2D)">
            <summary>
            Determines if the specified <see cref="T:BioLab.Math.Geometry.Point2D"/> is contained within the rectangular region defined
            by this <see cref="T:BioLab.Math.Geometry.Rectangle"/>.
            </summary>
            <param name="point">The <see cref="T:BioLab.Math.Geometry.Point2D"/> to test.</param>
            <returns>This method returns true if the <see cref="T:BioLab.Math.Geometry.Point2D"/> is contained within this Rectangle
            structure; otherwise false.</returns>
        </member>
        <member name="F:BioLab.Math.Geometry.Rectangle.Empty">
            <summary>
            Represents a <see cref="T:BioLab.Math.Geometry.Rectangle"/> that has X, Y, Width, and Height set to zero.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.Rectangle.ToRectangleF">
            <summary>
            Converts this <see cref="T:BioLab.Math.Geometry.Rectangle"/> into a <see cref="T:System.Drawing.RectangleF"/>.
            </summary>
            <returns>A <see cref="T:System.Drawing.RectangleF"/> that represents this <see cref="T:BioLab.Math.Geometry.Rectangle"/>.</returns>
        </member>
        <member name="P:BioLab.Math.Geometry.Rectangle.Width">
            <summary>
            Gets the width of the rectangle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Rectangle.Height">
            <summary>
            Gets the height of the rectangle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Rectangle.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of this <see cref="T:BioLab.Math.Geometry.Rectangle"/> structure.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Rectangle.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of this <see cref="T:BioLab.Math.Geometry.Rectangle"/> structure.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Rectangle.Left">
            <summary>
            Gets the x-coordinate of the left edge of this <see cref="T:BioLab.Math.Geometry.Rectangle"/> structure.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Rectangle.Right">
            <summary>
            Gets the x-coordinate that is the sum of X and Width property values of this <see cref="T:BioLab.Math.Geometry.Rectangle"/>
            structure.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Rectangle.Top">
            <summary>
            Gets the y-coordinate of the top edge of this <see cref="T:BioLab.Math.Geometry.Rectangle"/> structure.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Rectangle.Bottom">
            <summary>
            Gets the y-coordinate that is the sum of the Y and Height property values of this
            <see cref="T:BioLab.Math.Geometry.Rectangle"/> structure.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Rectangle.Area">
            <summary>
            Gets the area of the rectangle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Rectangle.Perimeter">
            <summary>
            Gets the perimeter of the rectangle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Rectangle.TopLeft">
            <summary>
            Gets the top-left corner of the rectangle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Rectangle.BottomRight">
            <summary>
            Gets the bottom-right corner of the rectangle
            </summary>
        </member>
        <member name="T:BioLab.Math.Geometry.Triangle">
            <summary>
            Represents a triangle.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.Triangle.#ctor(BioLab.Math.Geometry.Point2D,BioLab.Math.Geometry.Point2D,BioLab.Math.Geometry.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.Triangle"/> class.
            </summary>
            <param name="vertex1">The first vertex of the triangle.</param>
            <param name="vertex2">The second vertex of the triangle.</param>
            <param name="vertex3">The third vertex of the triangle.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Triangle.IsPointInside(BioLab.Math.Geometry.Point2D)">
            <summary>
            ???
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="P:BioLab.Math.Geometry.Triangle.Vertex1">
            <summary>
            Gets the first vertex of the triangle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Triangle.Vertex2">
            <summary>
            Gets the second vertex of the triangle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Triangle.Vertex3">
            <summary>
            Gets the third vertex of the triangle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Triangle.Baricenter">
            <summary>
            Gets the baricenter of the triangle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Triangle.Perimeter">
            <summary>
            Gets the perimeter of the triangle
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Triangle.Area">
            <summary>
            Gets the area of the triangle
            </summary>
        </member>
        <member name="T:BioLab.Math.Geometry.Point2DSet">
            <summary>
            Represents a <see cref="T:BioLab.Math.Geometry.Point2D"/> set
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2DSet.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.Point2DSet"/> class.
            </summary>
            <param name="capacity">The initial capacity of the new set.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2DSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.Point2DSet"/> class.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2DSet.#ctor(BioLab.Math.Geometry.Point2D[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.Point2DSet"/> class.
            </summary>
            <param name="pointSet">The Point2D set.</param>
            <param name="copy">If true the pointSet had been copied.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2DSet.#ctor(BioLab.Math.Geometry.Point2D[])">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.Point2DSet"/> class.
            </summary>
            <param name="pointSet">The Point2D set.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2DSet.Add(BioLab.Math.Geometry.Point2D)">
            <summary>
            Adds a <see cref="T:BioLab.Math.Geometry.Point2D"/> to this <see cref="T:BioLab.Math.Geometry.Point2DSet"/>.
            </summary>
            <param name="newPoint">The <see cref="T:BioLab.Math.Geometry.Point2D"/> to be added.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2DSet.Centroid">
            <summary>
            Returns the centroid or barycenter of the Point2D set.
            </summary>
            <returns>The centroid or barycenter.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2DSet.MapTo(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Scales, rotantes and translates the entire <see cref="T:BioLab.Math.Geometry.Point2DSet"/>.
            </summary>
            <param name="scale">The scale.</param>
            <param name="angle">The rotation angle.</param>
            <param name="dx">The horizontal translation.</param>
            <param name="dy">The vertical translation.</param>
            <returns>The new <see cref="T:BioLab.Math.Geometry.Point2DSet"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2DSet.InverseMapTo(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Inverse mapping of the entire <see cref="T:BioLab.Math.Geometry.Point2DSet"/>.
            </summary>
            <param name="scale">The scale.</param>
            <param name="angle">The rotation angle.</param>
            <param name="dx">The horizontal translation.</param>
            <param name="dy">The vertical translation.</param>
            <returns>The new <see cref="T:BioLab.Math.Geometry.Point2DSet"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2DSet.LoadFromStream(System.IO.Stream)">
            <summary>
            Creates an <see cref="T:BioLab.Math.Geometry.Point2DSet"/> from the specified data stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the data for this <see cref="T:BioLab.Math.Geometry.Point2DSet"/>.</param>
            <returns>The <see cref="T:BioLab.Math.Geometry.Point2DSet"/> this method creates.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2DSet.LoadFromFile(System.String)">
            <summary>
            Creates an <see cref="T:BioLab.Math.Geometry.Point2DSet"/> from the specified file.
            </summary>
            <param name="path">A string that contains the name of the file from which to create the <see cref="T:BioLab.Math.Geometry.Point2DSet"/>.</param>
            <returns>The <see cref="T:BioLab.Math.Geometry.Point2DSet"/> this method creates.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2DSet.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the current <see cref="T:BioLab.Math.Geometry.Point2DSet"/> to a specified <see cref="T:System.IO.Stream"/>. 
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.Math.Geometry.Point2DSet"/> will be saved.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2DSet.SaveToFile(System.String)">
            <summary>
            Saves the current <see cref="T:BioLab.Math.Geometry.Point2DSet"/> to a specified file.
            </summary>
            <param name="path">A string that contains the name of the file to which to save the current <see cref="T:BioLab.Math.Geometry.Point2DSet"/>.</param>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2DSet.ToArray">
            <summary>
            Copies the elements of the current <see cref="T:BioLab.Math.Geometry.Point2DSet"/> to an array of <see cref="T:BioLab.Math.Geometry.Point2D"/>.
            </summary>
            <returns>An array containing copies of the <see cref="T:BioLab.Math.Geometry.Point2D"/> of this
            <see cref="T:BioLab.Math.Geometry.Point2DSet"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.Point2DSet.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:BioLab.Math.Geometry.Point2D"/> of the <see cref="T:BioLab.Math.Geometry.Point2DSet"/>.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the <see cref="T:BioLab.Math.Geometry.Point2D"/> of the <see cref="T:BioLab.Math.Geometry.Point2DSet"/>.
            </returns>
        </member>
        <member name="P:BioLab.Math.Geometry.Point2DSet.Cardinality">
            <summary>
            Gets the cardinality of the set.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.Point2DSet.Item(System.Int32)">
            <summary>
            Gets the Point2D at the specified index.
            </summary>
            <value>Value of the specified pixel</value>
        </member>
        <member name="T:BioLab.Math.Geometry.GeometryDrawUtilities">
            <summary>
            Static class that contains utility methods to draw geometric shapes. 
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.GeometryDrawUtilities.PolygonSurface(BioLab.Math.Geometry.Polygon,System.Int32,System.Int32)">
            <summary>
            Draws the surface of a specified <see cref="T:BioLab.Math.Geometry.Polygon"/> on a 
            <see cref="T:BioLab.ImageProcessing.Image`1"/> of bytes. 
            </summary>
            <param name="polygon">The polygon.</param>
            <param name="imageWidth">The width of the resulting image.</param>
            <param name="imageHeight">The height of the resulting image.</param>
            <returns>The <see cref="T:BioLab.ImageProcessing.Image`1"/> of bytes that contains the surface of
            the specified <see cref="T:BioLab.Math.Geometry.Polygon"/>.</returns>
        </member>
        <member name="M:BioLab.Math.Geometry.GeometryDrawUtilities.PolygonSurfaceFast(BioLab.Math.Geometry.Polygon,System.Int32,System.Int32)">
            <summary>
            Draws the surface of a specified <see cref="T:BioLab.Math.Geometry.Polygon"/> on a 
            <see cref="T:BioLab.ImageProcessing.Image`1"/> of bytes. 
            </summary>
            <param name="polygon">The polygon.</param>
            <param name="imageWidth">The width of the resulting image.</param>
            <param name="imageHeight">The height of the resulting image.</param>
            <returns>The <see cref="T:BioLab.ImageProcessing.Image`1"/> of bytes that contains the surface of
            the specified <see cref="T:BioLab.Math.Geometry.Polygon"/>.</returns>
        </member>
        <member name="T:BioLab.Math.Geometry.ConvexHullCreator">
            <summary>
            Calculates the convex hull that includes all the given <see cref="T:BioLab.Math.Geometry.Point2D"/>.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.ConvexHullCreator.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:BioLab.Math.Geometry.ConvexHullCreator"/> class.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.ConvexHullCreator.#ctor(BioLab.Math.Geometry.Point2D[])">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.ConvexHullCreator"/> class.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.ConvexHullCreator.#ctor(BioLab.Math.Geometry.Point2D[],System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Math.Geometry.ConvexHullCreator"/> class.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.ConvexHullCreator.Run">
            <summary>
            Executes the algorithm.
            </summary>
        </member>
        <member name="M:BioLab.Math.Geometry.ConvexHullCreator.Execute">
            <summary>
            Executes the algorithm.
            </summary>
            <returns>The resulting convex hull.</returns>
        </member>
        <member name="P:BioLab.Math.Geometry.ConvexHullCreator.Point2DArray">
            <summary>
            The array of <see cref="T:BioLab.Math.Geometry.Point2D"/>.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.ConvexHullCreator.Offset">
            <summary>
            The offset value parameter.
            </summary>
        </member>
        <member name="P:BioLab.Math.Geometry.ConvexHullCreator.ConvexHull">
            <summary>
            The resulting convex hull.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.ContextualConvolution`3">
            <summary>
            Represents a generic contextual convolution operation between a generic single channel image and a generic bank of filters.
            </summary>
            <typeparam name="TInputImagePixel">The pixel type of the input image.</typeparam>
            <typeparam name="TOutputImagePixel">The pixel type of the output image.</typeparam>
            <typeparam name="TFilter">The type of the elements of the convolution filters.</typeparam>
        </member>
        <member name="M:BioLab.ImageProcessing.ContextualConvolution`3.#ctor(BioLab.ImageProcessing.Image{`0},`2[],BioLab.ImageProcessing.Image{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.Convolution`3"/> class and allows to
            specify the main parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="filters">The bank of filters.</param>
            <param name="filterIndexes">An image of integers that is used to select the filter to be applied on each pixel.</param>
            <param name="additionalBorder">An additional border to be added to the result, in pixel.</param>
        </member>
        <member name="P:BioLab.ImageProcessing.ContextualConvolution`3.AdditionalBorder">
            <summary>
            Gets or sets the amount of additional border to be added to the result.
            </summary>
            <value>The additional border, in pixels.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ContextualConvolution`3.Filters">
            <summary>
            Gets or sets the array of convolution filters.
            </summary>
            <value>The convolution filters.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ContextualConvolution`3.FilterIndexes">
            <summary>
            Gets or sets the image containing the indices of the filters to be used.
            </summary>
            <value>An image of integers that is used to select the filter to be applied on each pixel.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.ByteToDoubleContextualConvolution">
            <summary>
            Represents a convolution operation between an Image&lt;byte&gt; and a bank of double filters that returns an
            Image&lt;double&gt;.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToDoubleContextualConvolution.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.ConvolutionFilter{System.Double}[],BioLab.ImageProcessing.Image{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ByteToDoubleContextualConvolution"/> class and allows to specify the input image and the parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="filters">The bank of filters.</param>
            <param name="filterIndexes">An image of integers that is used to select the filter to be applied on each pixel.</param>
            <param name="additionalBorder">An additional border to be added to the result, in pixel.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToDoubleContextualConvolution.Run">
            <summary>
            Executes the convolution operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.ByteToIntContextualConvolution">
            <summary>
            Represents a convolution operation between an Image&lt;byte&gt; and a bank of integer filters that returns an
            Image&lt;int&gt;.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToIntContextualConvolution.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.ConvolutionFilter{System.Int32}[],BioLab.ImageProcessing.Image{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ByteToIntContextualConvolution"/> class and allows to specify the input image and the parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="filters">The filter bank.</param>
            <param name="filterIndexes">An image of integers that is used to select the filter to be applied on each pixel.</param>
            <param name="additionalBorder">An additional border to be added to the result, in pixel.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToIntContextualConvolution.Run">
            <summary>
            Executes the convolution operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.ByteToByteContextualConvolution">
            <summary>
            Represents a convolution operation between an Image&lt;byte&gt; and a bank of integer filters that returns an
            Image&lt;int&gt;.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToByteContextualConvolution.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.ConvolutionFilter{System.Int32}[],BioLab.ImageProcessing.Image{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ByteToByteContextualConvolution"/> class and allows to specify the input image
            and the main parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="filters">The filter bank.</param>
            <param name="filterIndexes">An image of integers that is used to select the filter to be applied on each pixel.</param>
            <param name="additionalBorder">An additional border to be added to the result, in pixel.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToByteContextualConvolution.Run">
            <summary>
            Executes the convolution operation.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.ByteToIntUnsafeContextualConvolution">
            <summary>
            Represents a convolution operation between an Image&lt;byte&gt; and a bank of integer filters that returns an
            Image&lt;int&gt;.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToIntUnsafeContextualConvolution.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.ConvolutionFilter{System.Int32}[],BioLab.ImageProcessing.Image{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ByteToIntUnsafeContextualConvolution"/> class and allows to specify the input image and the parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="filters">The filter bank.</param>
            <param name="filterIndexes">An image of integers that is used to select the filter to be applied on each pixel.</param>
            <param name="additionalBorder">An additional border to be added to the result, in pixel.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteToIntUnsafeContextualConvolution.Run">
            <summary>
            Executes the convolution operation.
            </summary>
        </member>
        <member name="T:BioLab.Classification.DensityEstimation.NamespaceDoc">
            <summary>
            Provides algorithms able to estimate class-conditional probability densities of vector sets.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.PixelMapping`2">
            <summary>
            This delegate is used to map from one kind of pixel to another kind of pixel.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="value">The input to be mapped.</param>
            <returns>The mapping result.</returns>
        </member>
        <member name="T:BioLab.ImageProcessing.LookupTableTransform`1">
             <summary>
             This class executes a LookUp Table Transform on the input byte image.
             </summary>
             <typeparam name="TOutputPixel">The type of the output pixel.</typeparam>
            <example>
            The following code example performs the following actions:
            <list type="bullet">
            <item>
            <description>Creates an image reading it from file.</description>
            </item>
            <item>
            <description>Creates a lookup table.</description>
            </item>
            <item>
            <description>It executes the transformation.</description>
            </item>
            <item>
            <description>It saves the result to file.</description>
            </item>
            </list>
            <code>
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using BioLab;
            using BioLab.ImageProcessing;
            
            
            namespace Example
            {
                class Program
                {
                    static void Main(string[] args)
                    {
                        Image&lt;byte&gt; inputImage = ImageUtilities.ToByteImage(ImageBase.LoadFromFile(@"C:\Images\Flower.jpg"));
                        byte[] table = new byte[256];
                        for (int i = 0; i &lt; table.Length; i++)
                        {
                            table[i] = (byte)(i / 2);
                        }
                        LookUpTableTransform&lt;byte&gt; lookUp = new LookUpTableTransform&lt;byte&gt;(inputImage, table);
                        Image&lt;byte&gt; outputImage = lookUp.Execute();
                        outputImage.SaveToFile(@"C:\Images\DarkFlower.jpg");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:BioLab.ImageProcessing.LookupTableTransform`1.#ctor(BioLab.ImageProcessing.Image{System.Byte},`0[])">
            <summary>
            This constructor creates a lookup table transform, using an array of values as a lookup table.
            </summary>
            <param name="image">The image to be processed.</param>
            <param name="table">The array of values used as a lookup table.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.LookupTableTransform`1.#ctor">
            <summary>
            This constructor creates a lookup table transform, using an array of zero values as a lookup table.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.LookupTableTransform`1.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            This constructor creates a Lookup Table transform given a lookup table.
            </summary>
            <param name="image">The input image.</param>
            <param name="table">The fixed lookup table.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.LookupTableTransform`1.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.PixelMapping{System.Byte,`0})">
            <summary>
            This constructor creates a Lookup Table transform using a mapping function.
            </summary>
            <param name="image">The input image.</param>
            <param name="function">The function that creates the lookup table.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.LookupTableTransform`1.Run">
            <summary>
            Executes the image operation.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.LookupTableTransform`1.LookupTable">
            <summary>
            Gets or sets the look up table.
            </summary>
            <value>An array of 256 elements.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.RgbLookupTableTransform`1">
            <summary>
            This class executes a look up table transformation with an rgb image as output.
            </summary>
            <typeparam name="TOutputPixel">The type of each channel in the output image.</typeparam>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbLookupTableTransform`1.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.RgbPixel{`0}[])">
            <summary>
            This constructor creates a lookup table transform, using an array of 256 values as
            a lookup table.
            </summary>
            <param name="image">The image to be processed.</param>
            <param name="table">The array to be used as a lookup table.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbLookupTableTransform`1.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Collections.Generic.IEnumerable{BioLab.ImageProcessing.RgbPixel{`0}})">
            <summary>
            This constructor creates a lookup table transform, using a collection of 256 values
            as a lookup table.
            </summary>
            <param name="image">The image to be processed.</param>
            <param name="lookupTable">The lookup table.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbLookupTableTransform`1.#ctor(BioLab.ImageProcessing.Image{System.Byte},BioLab.ImageProcessing.PixelMapping{System.Byte,BioLab.ImageProcessing.RgbPixel{`0}})">
            <summary>
            This constructor creates a lookup table transform, using a mappaing function to
            create the lookup table.
            </summary>
            <param name="image">The image to be processed.</param>
            <param name="function">The function that creates the lookup table.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbLookupTableTransform`1.Run">
            <summary>
            Executes the image operation.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.RgbLookupTableTransform`1.LookupTable">
            <summary>
            Gets or sets the look up table.
            </summary>
            <value>An array of 256 elements.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.LookupTables">
            <summary>
            Provides predefined look up tables.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.LookupTables.Spectrum">
            <summary>
            Provides a spectrum-like lookup table.
            </summary>
            <value>The lookup table.</value>
        </member>
        <member name="T:BioLab.Common.FeatureVector">
            <summary>
            This class rapresents a vector of labeled or unlabeled features.
            By default the feature vector is unlabeled. 
            A description can also be associated to the feature vector.
            </summary>
        </member>
        <member name="M:BioLab.Common.FeatureVector.#ctor(System.Int32)">
            <summary>
            Initializes an unlabeled empty <see cref="T:BioLab.Common.FeatureVector"/> of given size.
            </summary>
            <param name="count">The size of the Feature Vector (at least one).</param>
        </member>
        <member name="M:BioLab.Common.FeatureVector.#ctor(BioLab.Math.LinearAlgebra.Vector)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Common.FeatureVector"/> class (unlabeled).
            </summary>
            <param name="vector">The vector for the initialization.</param>
        </member>
        <member name="M:BioLab.Common.FeatureVector.#ctor(BioLab.Math.LinearAlgebra.Vector,System.Boolean)">
            <summary>
            Initializes a new instance of the unlabeled <see cref="T:BioLab.Common.FeatureVector"/> class
            specifying if make a copy of the input Vector (as deafult is) or not.
            </summary>
            <param name="vector">The vector.</param>
            <param name="makeCopy">if set to <c>true</c> [make copy].</param>
        </member>
        <member name="M:BioLab.Common.FeatureVector.#ctor(BioLab.Math.LinearAlgebra.Vector,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Common.FeatureVector"/> class.
            </summary>
            <param name="vector">The Vector for the initialization.</param>
            <param name="vectorClass">The vector class.</param>
        </member>
        <member name="M:BioLab.Common.FeatureVector.#ctor(BioLab.Math.LinearAlgebra.Vector,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Common.FeatureVector"/> class with a given Vector.
            </summary>
            <param name="vector">The Vector for the initialization.</param>
            <param name="vectorClass">The vector class.</param>
            <param name="vectorDescription">A description.</param>
        </member>
        <member name="M:BioLab.Common.FeatureVector.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Common.FeatureVector"/> class (unlabeled).
            </summary>
            <param name="vector">The array for the initialization.</param>
        </member>
        <member name="M:BioLab.Common.FeatureVector.#ctor(System.Double[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Common.FeatureVector"/> class with a given array.
            </summary>
            <param name="vector">The array.</param>
            <param name="vectorClass">Class of the Feature Vector.</param>
        </member>
        <member name="M:BioLab.Common.FeatureVector.#ctor(System.Double[],System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Common.FeatureVector"/> class with a given array.
            </summary>
            <param name="vector">The array.</param>
            <param name="vectorClass">Class of the Feature Vector.</param>
            <param name="vectorDescription">A description.</param>
        </member>
        <member name="M:BioLab.Common.FeatureVector.EuclideanDist(BioLab.Common.FeatureVector,BioLab.Common.FeatureVector)">
            <summary>
            Euclidean Distance between feature vectors ( sqrt(v1^2 - v2^2) )
            </summary>
        </member>
        <member name="M:BioLab.Common.FeatureVector.EuclideanDistQ(BioLab.Common.FeatureVector,BioLab.Common.FeatureVector)">
            <summary>
            Squared Euclidean Distance between feature vectors ( v1^2 - v2^2 ) 
            </summary>
        </member>
        <member name="M:BioLab.Common.FeatureVector.Clone">
            <summary>Returns a deep-copy clone of the <b>FeatureVector</b>.</summary>
            <returns>A deep-copy clone of the <b>FeatureVector</b>.</returns>
        </member>
        <member name="M:BioLab.Common.FeatureVector.System#ICloneable#Clone">
            <summary>Returns a deep-copy clone of the <b>FeatureVector</b>.</summary>
            <returns>A deep-copy clone of the <b>FeatureVector</b>.</returns>
        </member>
        <member name="M:BioLab.Common.FeatureVector.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:BioLab.Common.FeatureVector.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Double"/> at the specified index.
            </summary>
        </member>
        <member name="P:BioLab.Common.FeatureVector.Features">
            <summary>
            Gets access to the underlying vector containing the feature values.
            </summary>
        </member>
        <member name="P:BioLab.Common.FeatureVector.Count">
            <summary>
            Gets the feature vector size.
            </summary>
        </member>
        <member name="P:BioLab.Common.FeatureVector.Class">
            <summary>
            Gets/Sets the feature vector Class.
            </summary>
        </member>
        <member name="P:BioLab.Common.FeatureVector.Target">
            <summary>
            Gets or sets the target for the regression problem.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:BioLab.Common.FeatureVector.Description">
            <summary>
            Gets/Sets the feature vector Description.
            </summary>
        </member>
        <member name="T:BioLab.Common.FeatureDistance">
            <summary>
            Represents a distance function between feature vectors
            </summary>
        </member>
        <member name="T:BioLab.Common.FeatureVectorSetTextFormat">
            <summary>
            Dataset Formats Supported for the LoadFromText Static Method 
            </summary>
        </member>
        <member name="F:BioLab.Common.FeatureVectorSetTextFormat.BioLab">
            <summary>
            BioLab Dataset Format
            </summary>
        </member>
        <member name="F:BioLab.Common.FeatureVectorSetTextFormat.LibSvm">
            <summary>
            LibSvm Dataset Format
            </summary>
        </member>
        <member name="F:BioLab.Common.FeatureVectorSetTextFormat.SvmLight">
            <summary>
            SvmLight Dataset Format
            </summary>
        </member>
        <member name="T:BioLab.Common.FeatureVectorPredicate">
            <summary>
            Represents a method that defines a set of criteria and determines whether the specified FeatureVector meets those criteria.
            </summary>
        </member>
        <member name="T:BioLab.Common.FeatureVectorSet">
            <summary>
            A feature vector set
            </summary>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.#ctor">
            <summary>
            Create an empty FeatureVectorSet
            </summary>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.#ctor(BioLab.Common.FeatureVectorSet)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.Common.FeatureVectorSet"/> class.
            </summary>
            <param name="vectorSet">The vector set.</param>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.LoadFromFile(System.String)">
            <summary>
            Loads a Feature Vector Set from file.
            </summary>
            <param name="path">The path from witch get the Feature Vector Set.</param>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads a Feature Vector Set from a binary stream.
            </summary>
            <param name="stream">The stream s.</param>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.LoadFromTextFile(System.String)">
            <summary>
            Loads Data from BioLab v1 Format text file.
            </summary>
            <example>
            **************** Format v1 *******************
            version #vectors #features
            empty line
            class description feat1 feat2 feat3 .... featn
            ***************** Types **********************
            version := int
            #vectors := int
            #features := int
            class := int
            description := string
            feat := double
            ***************** Example ********************
            1 2 4
            
            +1 info 2.4 4.3 1.0 5.6
            -1 info 3.2 1.1 7.8 9.0
            **********************************************
            </example>
            <param name="path">The path.</param>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.LoadFromTextFile(System.String,BioLab.Common.FeatureVectorSetTextFormat)">
            <summary>
            Loads a FeatureVectorSet from text file.
            </summary>
            <param name="path">The path.</param>
            <param name="dataSetFormat">The dataset format (BioLab, LibSvm, SvmLight).</param>
            <returns></returns>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.LoadFromLibSvmTextFile(System.String)">
            <summary>
            Loads from LibSvm format text file.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.LoadFromSvmLightTextFile(System.String)">
            <summary>
            Loads from SVM light text file.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.Clone">
            <summary>Returns a deep-copy clone of the <b>FeatureVectorSet</b>.</summary>
            <returns>A deep-copy clone of the <b>FeatureVectorSet</b>.</returns>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.InternalClone">
            <summary>
            Creates an exact copy of this instance.
            </summary>
            <returns>
            The <see cref="T:BioLab.Common.Data"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.Add(BioLab.Common.FeatureVectorSet)">
            <summary>
            Adds the specified vector set to this vector set copying vectors.
            </summary>
            <param name="vectorSet">The vector set to add.</param>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.Add(BioLab.Common.FeatureVector,System.Boolean)">
            <summary>
            Adds a specified vector to this vector set.
            </summary>
            <param name="vector">The vector.</param>
            <param name="makeCopy">if set to <c>true</c> [make copy].</param>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.Remove(BioLab.Common.FeatureVector)">
            <summary>
            Remove the vector with the same reference
            </summary>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.Remove(System.Int32)">
            <summary>
            Removes the vector at specified index.
            </summary>
            <param name="index">The index of the vector to remove.</param>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.ToMatrix(System.Boolean)">
            <summary>
            Makes a Matrix from this FeatureVectorSet.
            </summary>
            <param name="rowWise">if set to <c>true</c> make a rowise matrix, else columnwise.</param>
            <returns>A Matrix.</returns>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.FindIndex(BioLab.Common.FeatureVectorPredicate)">
            <summary>
            Get the index of the first vector that make the predicate true. 
            </summary>
            <returns>An index if there is a vector that make the predicate true. -1 otherwise.</returns>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.TrueForAll(BioLab.Common.FeatureVectorPredicate)">
            <summary>
            True if the predicate is true for all the set
            </summary>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.FindMaxClassIndex">
            <summary>
            Finds the maximum class index.
            </summary>
            <returns>The highest class index.</returns>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.CalculateClassCardinalities">
            <summary>
            Calculates the number of vectors belonging to each class in the vector set.
            </summary>
            <returns>An array of integers containing the cardinality of each class.</returns>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the current <see cref="T:BioLab.Common.Data"/> to a specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.Common.Data"/> will be saved.</param>
        </member>
        <member name="M:BioLab.Common.FeatureVectorSet.SaveToTextFile(System.String)">
            <summary>
            Saves the current Feature Vector Set to BioLab v1 Format text file.
            </summary>
            <example>
            **************** Format v1 *******************
            version #vectors #features
            empty line
            class description feat1 feat2 feat3 .... featn
            ***************** Types **********************
            version := int
            #vectors := int
            #features := int
            class := int
            description := string
            feat := double
            ***************** Example ********************
            1 2 4
            
            +1 info 2.4 4.3 1.0 5.6
            -1 info 3.2 1.1 7.8 9.0
            **********************************************
            </example>
            <param name="path">The path.</param>
        </member>
        <member name="P:BioLab.Common.FeatureVectorSet.Count">
            <summary>
            Gets the number of vectors in the set
            </summary>
        </member>
        <member name="P:BioLab.Common.FeatureVectorSet.Dim">
            <summary>
            Gets the vectors dimensionality
            </summary>
        </member>
        <member name="P:BioLab.Common.FeatureVectorSet.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:BioLab.Common.FeatureVector"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:BioLab.ImageProcessing.AffineTransform`1">
            <summary>
            Represents an image operation that applies an affine transformation to a generic image.
            </summary>
            <typeparam name="TImage">The image type.</typeparam>
        </member>
        <member name="M:BioLab.ImageProcessing.AffineTransform`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.AffineTransform`1"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.AffineTransform`1.#ctor(`0,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.AffineTransform`1"/> class and allows to specify the main parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="translationX">The horizontal translation, in pixels.</param>
            <param name="translationY">The vertical translation, in pixels.</param>
            <param name="rotationDegrees">The rotation angle, in  degrees.</param>
            <param name="scaleFactorX">The horizontal scale factor.</param>
            <param name="scaleFactorY">The vertical scale factor.</param>
            <param name="resultWidth">Width of the result image, in pixels.</param>
            <param name="resultHeight">Height of the result image, in pixels.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.AffineTransform`1.#ctor(`0,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.AffineTransform`1"/> class and allows to specify translation and rotation parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="translationX">The horizontal translation, in pixels.</param>
            <param name="translationY">The vertical translation, in pixels.</param>
            <param name="rotationDegrees">The rotation angle, in  degrees.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.AffineTransform`1.#ctor(`0,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.AffineTransform`1"/> class and allows to specify the scale factor.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="scaleFactor">The scale factor.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.AffineTransform`1.PrepareMapping">
            <summary>
            This method must be called before starting to map and interpolate pixel coordinates.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.AffineTransform`1.Map(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Maps the specified pixel coordinates of the result image into the corresponding coordinates of the input image.
            </summary>
            <param name="x">The x coordinate in the result image.</param>
            <param name="y">The y coordinate in the result image.</param>
            <param name="x1">The corresponding x coordinate in the input image.</param>
            <param name="y1">The corresponding y coordinate in the input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.AffineTransform`1.Interpolate(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Interpolates four pixel values according to the last mapping performed by the <see cref="M:BioLab.ImageProcessing.AffineTransform`1.Map(System.Int32,System.Int32,System.Int32@,System.Int32@)"/> method.
            </summary>
            <param name="firstPixel">The first pixel value.</param>
            <param name="secondPixel">The second pixel value.</param>
            <param name="thirdPixel">The third pixel value.</param>
            <param name="fourthPixel">The fourth pixel value.</param>
            <returns></returns>
        </member>
        <member name="P:BioLab.ImageProcessing.AffineTransform`1.TranslationX">
            <summary>
            Gets or sets the horizontal translation.
            </summary>
            <value>The horizontal translation, in pixels.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.AffineTransform`1.TranslationY">
            <summary>
            Gets or sets the vertical translation.
            </summary>
            <value>The vertical translationin pixels.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.AffineTransform`1.RotationDegrees">
            <summary>
            Gets or sets the rotation angle.
            </summary>
            <value>The rotation angle, in degrees.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.AffineTransform`1.RotationCenterX">
            <summary>
            Gets or sets the horizontal position of the center of rotation.
            </summary>
            <value>The horizontal position of the center of rotation, expressed in percentage with respect to the image width.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.AffineTransform`1.RotationCenterY">
            <summary>
            Gets or sets the vertical position of the center of rotation.
            </summary>
            <value>The vertical position of the center of rotation, expressed in percentage with respect to the image height.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.AffineTransform`1.ScaleFactorX">
            <summary>
            Gets or sets the horizontal scale factor.
            </summary>
            <value>The horizontal scale factor.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.AffineTransform`1.ScaleFactorY">
            <summary>
            Gets or sets the vertical scale factor.
            </summary>
            <value>The vertical scale factor.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.AffineTransform`1.ResultWidth">
            <summary>
            Gets or sets the width of the result image.
            </summary>
            <value>The width of the result image, in pixels.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.AffineTransform`1.ResultHeight">
            <summary>
            Gets or sets the height of the result image.
            </summary>
            <value>The height of the result image, in pixels.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.ByteAffineTransform">
             <summary>
             Represents an image operation that applies an affine transformation to a grayscale image.
             </summary>
            <example>
            The following code example performs the following actions:
            <list type="bullet">
            <item>
            <description>Shifts the input image by 20 pixels along both the x and y</description>
            </item>
            <item>
            <description>Rotates the image by 30 degrees</description>
            </item>
            </list>
            <code>
            using System;
            using BioLab.ImageProcessing;
            
            namespace Examples
            {
                class Program
                {
                    static void Main()
                    {
                        Image&lt;byte&gt; image = ImageBase.LoadFromFile(@"C:\images\original.png").ToByteImage();
                        ByteAffineTransform operation = new ByteAffineTransform(image, 20, 20, 30, 255);
                        Image&lt;byte&gt; result = operation.Execute();
                        result.SaveToFile(@"C:\images\result.png");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteAffineTransform.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Double,System.Double,System.Double,System.Double,System.Double,System.Byte,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ByteAffineTransform"/> class and allows to specify the main parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="translationX">The horizontal translation, in pixels.</param>
            <param name="translationY">The vertical translation, in pixels.</param>
            <param name="rotationDegrees">The rotation angle, in  degrees.</param>
            <param name="scaleFactorX">The horizontal scale factor.</param>
            <param name="scaleFactorY">The vertical scale factor.</param>
            <param name="background">The background value.</param>
            <param name="resultWidth">Width of the result image, in pixels.</param>
            <param name="resultHeight">Height of the result image, in pixels.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteAffineTransform.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Double,System.Double,System.Double,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ByteAffineTransform"/> class and allows to specify translation and rotation parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="translationX">The horizontal translation, in pixels.</param>
            <param name="translationY">The vertical translation, in pixels.</param>
            <param name="rotationDegrees">The rotation angle, in  degrees.</param>
            <param name="background">The background value.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteAffineTransform.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Double,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ByteAffineTransform"/> class and allows to specify the scale factor.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="background">The background value.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteAffineTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ByteAffineTransform"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ByteAffineTransform.Run">
            <summary>
            Executes the affine transform.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.ByteAffineTransform.Background">
            <summary>
            Gets or sets the pixel value to be used when a pixel in the result image is mapped to a point outside the input image.
            </summary>
            <value>The background pixel value.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.RgbByteAffineTransform">
             <summary>
             Represents an image operation that applies an affine transformation to a RGB image.
             </summary>
            <example>
            The following code example performs the following actions:
            <list type="bullet">
            <item>
            <description>Reads a Rgb image from file.</description>
            </item>
            <item>
            <description>Creates a new istance of the RgbPixel class of byte.</description>
            </item>
            <item>
            <description>Sets the blue, green and red channel of the instance of the RgbPixel class to 255 (white).</description>
            </item>
            <item>
            <description>Creates a new istance of the RgbByteAffineTransform class settings a translation of 20 pixels along X and Y coordinates and 30° of rotation, specifying the white as color of background.</description>
            </item>
            <item>
            <description>Executes the Rgb byte affine transform operation.</description>
            </item>
            <item>
            <description>Saves the output image in a new file.</description>
            </item>
            </list>
            <code>
            using System;
            using BioLab.ImageProcessing;
            
            namespace Examples
            {
                class Program
                {
                    static void Main()
                    {
                        RgbImage&lt;byte&gt; image = ImageBase.LoadFromFile(@"C:\images\original.jpg").ToByteRgbImage();
                        RgbPixel&lt;byte&gt; background = new RgbPixel&lt;byte&gt;(255,255,255);
                        RgbByteAffineTransform operation = new RgbByteAffineTransform(image, 20, 20, 30, background);
                        RgbImage&lt;byte&gt; result = operation.Execute();
                        result.SaveToFile(@"C:\images\result.jpg");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbByteAffineTransform.#ctor(BioLab.ImageProcessing.RgbImage{System.Byte},System.Double,System.Double,System.Double,System.Double,System.Double,BioLab.ImageProcessing.RgbPixel{System.Byte},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.RgbByteAffineTransform"/> class and allows to specify the main parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="translationX">The horizontal translation, in pixels.</param>
            <param name="translationY">The vertical translation, in pixels.</param>
            <param name="rotationDegrees">The rotation angle, in  degrees.</param>
            <param name="scaleFactorX">The horizontal scale factor.</param>
            <param name="scaleFactorY">The vertical scale factor.</param>
            <param name="background">The background color.</param>
            <param name="resultWidth">Width of the result image, in pixels.</param>
            <param name="resultHeight">Height of the result image, in pixels.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbByteAffineTransform.#ctor(BioLab.ImageProcessing.RgbImage{System.Byte},System.Double,System.Double,System.Double,BioLab.ImageProcessing.RgbPixel{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.RgbByteAffineTransform"/> class and allows to specify translation and rotation parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="translationX">The horizontal translation, in pixels.</param>
            <param name="translationY">The vertical translation, in pixels.</param>
            <param name="rotationDegrees">The rotation angle, in  degrees.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbByteAffineTransform.#ctor(BioLab.ImageProcessing.RgbImage{System.Byte},System.Double,BioLab.ImageProcessing.RgbPixel{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.RgbByteAffineTransform"/> class and allows to specify the scale factor.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="scaleFactor">The scale factor.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbByteAffineTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.RgbByteAffineTransform"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.RgbByteAffineTransform.Run">
            <summary>
            Executes the affine transform.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.RgbByteAffineTransform.Background">
            <summary>
            Gets or sets the color to be used when a pixel in the result image is mapped to a point outside the input image.
            </summary>
            <value>The background color.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.ImageUtilities">
            <summary>
            Provides static methods for converting images and pixel values and methods that allows searching 
            and calculating descriptive statistics from images.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.Average``1(BioLab.ImageProcessing.Image{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the average pixel value in a given rectangular region of an image.
            </summary>
            <typeparam name="T">The type of the pixels in the image.</typeparam>
            <param name="image">The image to calculate the average of.</param>
            <param name="x">The x coordinate of the top-left pixel.</param>
            <param name="y">The y coordinate of the top-left pixel.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>The average of the pixel values in the rectangular region.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.Average``1(BioLab.ImageProcessing.Image{``0})">
            <summary>
            Calculates the average pixel value of an image.
            </summary>
            <typeparam name="T">The type of the pixels in the image.</typeparam>
            <param name="image">The image to calculate the average of.</param>
            <returns>The average of the pixel values in the image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.ClipToByte(System.Int32)">
            <summary>
            Clips a given value to a byte value.
            </summary>
            <param name="value">The integer value to be clipped.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.FindMax(BioLab.ImageProcessing.Image{System.Byte},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines the maximum pixel value in a rectangular region of an image of bytes.
            </summary>
            <param name="image">The image of bytes to determine the maximum pixel value of.</param>
            <param name="x">The x coordinate of the top-left pixel.</param>
            <param name="y">The y coordinate of the top-left pixel.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>The maximum pixel value in the image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.FindMax(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Determines the maximum pixel value in an image of bytes.
            </summary>
            <param name="image">The image of bytes to determine the maximum pixel value of.</param>
            <returns>The maximum pixel value in the image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.FindMax(BioLab.ImageProcessing.Image{System.Int32},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines the maximum pixel value in a rectangular region of an image.
            </summary>
            <param name="image">The image to determine the maximum pixel value of.</param>
            <param name="x">The x coordinate of the top-left pixel.</param>
            <param name="y">The y coordinate of the top-left pixel.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>The maximum pixel value in the image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.FindMax(BioLab.ImageProcessing.Image{System.Int32})">
            <summary>
            Determines the maximum pixel value in an image.
            </summary>
            <param name="image">The image to determine the maximum pixel value of.</param>
            <returns>The maximum pixel value in the image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.FindMax(BioLab.ImageProcessing.Image{System.Double},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines the maximum pixel value in a rectangular region of an image.
            </summary>
            <param name="image">The image to determine the maximum pixel value of.</param>
            <param name="x">The x coordinate of the top-left pixel.</param>
            <param name="y">The y coordinate of the top-left pixel.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>The maximum pixel value in the image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.FindMax(BioLab.ImageProcessing.Image{System.Double})">
            <summary>
            Determines the maximum pixel value in an image.
            </summary>
            <param name="image">The image to determine the maximum pixel value of.</param>
            <returns>The maximum pixel value in the image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.FindMin(BioLab.ImageProcessing.Image{System.Byte},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines the minimum pixel value in a rectangular region of an image of bytes.
            </summary>
            <param name="image">The image of bytes to determine the minimum pixel value of.</param>
            <param name="x">The x coordinate of the top-left pixel.</param>
            <param name="y">The y coordinate of the top-left pixel.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>The minimum pixel value in the image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.FindMin(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Determines the minimum pixel value in an image of bytes.
            </summary>
            <param name="image">The image of bytes to determine the minimum pixel value of.</param>
            <returns>The minimum pixel value in the image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.FindMin(BioLab.ImageProcessing.Image{System.Int32},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines the minimum pixel value in a rectangular region of an image.
            </summary>
            <param name="image">The image to determine the minimum pixel value of.</param>
            <param name="x">The x coordinate of the top-left pixel.</param>
            <param name="y">The y coordinate of the top-left pixel.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>The minimum pixel value in the image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.FindMin(BioLab.ImageProcessing.Image{System.Int32})">
            <summary>
            Determines the minimum pixel value in an image.
            </summary>
            <param name="image">The image to determine the minimum pixel value of.</param>
            <returns>The minimum pixel value in the image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.FindMin(BioLab.ImageProcessing.Image{System.Double},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines the minimum pixel value in a rectangular region of an image.
            </summary>
            <param name="image">The image to determine the minimum pixel value of.</param>
            <param name="x">The x coordinate of the top-left pixel.</param>
            <param name="y">The y coordinate of the top-left pixel.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>The minimum pixel value in the image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.FindMin(BioLab.ImageProcessing.Image{System.Double})">
            <summary>
            Determines the minimum pixel value in an image.
            </summary>
            <param name="image">The image to determine the minimum pixel value of.</param>
            <returns>The minimum pixel value in the image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.RoundAndClipToByte(System.Double)">
            <summary>
            Rounds double precision floatin-point number to the nearest integer and clips it to a byte value.
            </summary>
            <param name="value">The double precision floatin-point number to be rounded and clipped.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.SampleStandardDeviation``1(BioLab.ImageProcessing.Image{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the sample standard deviation of the pixel values in a given rectangular region of an image.
            </summary>
            <typeparam name="T">The type of the pixels in the image.</typeparam>
            <param name="image">The image to calculate the sample standard deviation of.</param>
            <param name="x">The x coordinate of the top-left pixel.</param>
            <param name="y">The y coordinate of the top-left pixel.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>The sample standard deviation of the pixel values in the rectangular region.</returns>        
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.SampleStandardDeviation``1(BioLab.ImageProcessing.Image{``0})">
            <summary>
            Calculates the sample standard deviation of the pixel values in a given image.
            </summary>
            <typeparam name="T">The type of the pixels in the image.</typeparam>
            <param name="image">The image to calculate the sample standard deviation of.</param>
            <returns>The sample standard deviation of the pixel values in the image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.SampleVariance``1(BioLab.ImageProcessing.Image{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the sample variance of the pixel values in a given rectangular region of an image.
            </summary>
            <typeparam name="T">The type of the pixels in the image.</typeparam>
            <param name="image">The image to calculate the sample variance of.</param>
            <param name="x">The x coordinate of the top-left pixel.</param>
            <param name="y">The y coordinate of the top-left pixel.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>The sample variance of the pixel values in the rectangular region.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.SampleVariance``1(BioLab.ImageProcessing.Image{``0})">
            <summary>
            Calculates the sample variance of the pixel values in a given image.
            </summary>
            <typeparam name="T">The type of the pixels in the image.</typeparam>
            <param name="image">The image to calculate the sample variance of.</param>
            <returns>The sample variance of the pixel values in the image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.StandardDeviation``1(BioLab.ImageProcessing.Image{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the standard deviation of the pixel values in a given rectangular region of an image.
            </summary>
            <typeparam name="T">The type of the pixels in the image.</typeparam>
            <param name="image">The image to calculate the standard deviation of.</param>
            <param name="x">The x coordinate of the top-left pixel.</param>
            <param name="y">The y coordinate of the top-left pixel.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>The standard deviation of the pixel values in the rectangular region.</returns>        
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.StandardDeviation``1(BioLab.ImageProcessing.Image{``0})">
            <summary>
            Calculates the standard deviation of the pixel values in a given image.
            </summary>
            <typeparam name="T">The type of the pixels in the image.</typeparam>
            <param name="image">The image to calculate the standard deviation of.</param>
            <returns>The standard deviation of the pixel values in the image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.ToByteHslImage(BioLab.ImageProcessing.RgbImage{System.Byte})">
            <summary>
            Converts a given RGB image to a HSL image.
            </summary>
            <param name="image">The image to be converted.</param>
            <returns>The <see cref="T:BioLab.ImageProcessing.HslImage`1"/> this method creates.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.ToByteImage(BioLab.ImageProcessing.ImageBase)">
            <summary>
            Converts a given image to an image of bytes with a single channel, using the Stretch <see cref="T:BioLab.ImageProcessing.PixelConversionMethod"/>.
            </summary>
            <param name="image">The image to be converted.</param>
            <returns>The <see cref="T:BioLab.ImageProcessing.Image`1"/> this method creates.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.ToByteRgbImage(BioLab.ImageProcessing.ImageBase)">
            <summary>
            Converts a given image to an RGB image of bytes.
            </summary>
            <param name="image">The image to be converted.</param>
            <returns>The <see cref="T:BioLab.ImageProcessing.RgbImage`1"/> this method creates.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.ToIntImage(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Converts a given image of bytes into an image of int.
            </summary>
            <param name="image">The image to be converted.</param>
            <returns>The <see cref="T:BioLab.ImageProcessing.Image`1"/> this method creates.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.ToDoubleImage(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Converts a given image of bytes into an image of double.
            </summary>
            <param name="image">The image to be converted.</param>
            <returns>The <see cref="T:BioLab.ImageProcessing.Image`1"/> this method creates.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.ToByteImage(BioLab.ImageProcessing.Image{System.Int32},BioLab.ImageProcessing.PixelConversionMethod)">
            <summary>
            Converts a given image to an image of bytes with a single channel, using the specified <see cref="T:BioLab.ImageProcessing.PixelConversionMethod"/>.
            </summary>
            <param name="image">The image. <see cref="T:BioLab.ImageProcessing.Image`1"/></param>
            <param name="conversionMethod">The conversion method.</param>
            <returns>The <see cref="T:BioLab.ImageProcessing.Image`1"/> this method creates.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.ToByteImage(BioLab.ImageProcessing.Image{System.Double},BioLab.ImageProcessing.PixelConversionMethod)">
            <summary>
            Converts a given image to an image of bytes with a single channel, using the specified <see cref="T:BioLab.ImageProcessing.PixelConversionMethod"/>.
            </summary>
            <param name="image">The image. <see cref="T:BioLab.ImageProcessing.Image`1"/></param>
            <param name="conversionMethod">The conversion method.</param>
            <returns>The <see cref="T:BioLab.ImageProcessing.Image`1"/> this method creates.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.ToByteImage(BioLab.ImageProcessing.RgbImage{System.Byte})">
            <summary>
            Converts a given image to an image of bytes with a single channel.
            </summary>
            <param name="image">The image. <see cref="T:BioLab.ImageProcessing.Image`1"/></param>
            <returns>The <see cref="T:BioLab.ImageProcessing.Image`1"/> this method creates.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.ToByteImage(BioLab.ImageProcessing.ImageBase,BioLab.ImageProcessing.PixelConversionMethod)">
            <summary>
            Converts a given image to an image of bytes with a single channel, using the specified <see cref="T:BioLab.ImageProcessing.PixelConversionMethod"/>.
            </summary>
            <param name="image">The image. <see cref="T:BioLab.ImageProcessing.Image`1"/></param>
            <param name="conversionMethod">The conversion method.</param>
            <returns>The <see cref="T:BioLab.ImageProcessing.Image`1"/> this method creates.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.ToByteRgbImage(BioLab.ImageProcessing.HslImage{System.Byte})">
            <summary>
            Converts a given HSL image to an RGB image.
            </summary>
            <param name="image">The image to be converted.</param>
            <returns>The <see cref="T:BioLab.ImageProcessing.RgbImage`1"/> this method creates.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.Variance``1(BioLab.ImageProcessing.Image{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the variance of the pixel values in a given rectangular region of an image.
            </summary>
            <typeparam name="T">The type of the pixels in the image.</typeparam>
            <param name="image">The image to calculate the variance of.</param>
            <param name="x">The x coordinate of the top-left pixel.</param>
            <param name="y">The y coordinate of the top-left pixel.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>The variance of the pixel values in the rectangular region.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.Variance``1(BioLab.ImageProcessing.Image{``0})">
            <summary>
            Calculates the variance of the pixel values in a given image.
            </summary>
            <typeparam name="T">The type of the pixels in the image.</typeparam>
            <param name="image">The image to calculate the variance of.</param>
            <returns>The variance of the pixel values in the image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.Resize(BioLab.ImageProcessing.Image{System.Byte},System.Int32,System.Int32)">
            <summary>
            Resizes a given image and create a new image with the result.
            </summary>
            <param name="image">The input image.</param>
            <param name="width">The width of the new image.</param>
            <param name="height">The height of the new image.</param>
            <returns>A new image obtained by resizing the contents of the given input image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.Resize(BioLab.ImageProcessing.Image{System.Byte},System.Double,System.Double)">
            <summary>
            Resizes a given image and create a new image with the result.
            </summary>
            <param name="image">The input image.</param>
            <param name="scaleFactorX">The horizontal scale factor.</param>
            <param name="scaleFactorY">The vertical scale factor.</param>
            <returns>A new image obtained by resizing the contents of the given input image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.Resize(BioLab.ImageProcessing.Image{System.Byte},System.Double)">
            <summary>
            Resizes a given image and create a new image with the result.
            </summary>
            <param name="image">The input image.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>A new image obtained by resizing the contents of the given input image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.Resize(BioLab.ImageProcessing.RgbImage{System.Byte},System.Int32,System.Int32)">
            <summary>
            Resizes a given image and create a new image with the result.
            </summary>
            <param name="image">The input image.</param>
            <param name="width">The width of the new image.</param>
            <param name="height">The height of the new image.</param>
            <returns>A new image obtained by resizing the contents of the given input image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.Resize(BioLab.ImageProcessing.RgbImage{System.Byte},System.Double,System.Double)">
            <summary>
            Resizes a given image and create a new image with the result.
            </summary>
            <param name="image">The input image.</param>
            <param name="scaleFactorX">The horizontal scale factor.</param>
            <param name="scaleFactorY">The vertical scale factor.</param>
            <returns>A new image obtained by resizing the contents of the given input image.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageUtilities.Resize(BioLab.ImageProcessing.RgbImage{System.Byte},System.Double)">
            <summary>
            Resizes a given image and create a new image with the result.
            </summary>
            <param name="image">The input image.</param>
            <param name="scaleFactor">The scale factor.</param>
            <returns>A new image obtained by resizing the contents of the given input image.</returns>
        </member>
        <member name="T:BioLab.ImageProcessing.PixelConversionMethod">
            <summary>
            Specifies how pixels values are converted to byte pixel values
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.PixelConversionMethod.Clip">
            <summary>
            Specifies that pixels values are clipped to the range [0..255]
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.PixelConversionMethod.Stretch">
            <summary>
            Specifies that pixels values are rescaled so that the minimum values is mapped to 0 and the maximum to 255
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.PixelConversionMethod.ClipAbs">
            <summary>
            Specifies that pixels values are converted their absolute values and then clipped to the range [0..255]
            </summary>
        </member>
        <member name="F:BioLab.ImageProcessing.PixelConversionMethod.StretchAbs">
            <summary>
            Specifies that pixels values are converted to their absolute values and then rescaled so that the minimum values is mapped to 0 and the maximum to 255
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.ImageCursor">
             <summary>
             Represents a pixel position inside an image and provides methods for easly moving
             it according to common metrics.
             </summary>
             <example>
            The following code example performs the following actions:
            <list type="bullet">
            <item>
            <description>Reads a gray image from file.</description>
            </item>
            <item>
            <description>Creates a new gray image that is a clone of the original image</description>
            </item>
            <item>
            <description>Creates a new istance of the ImageCursor class for the cloned image starting from the top left border</description>
            </item>
            <item>
            <description>For each pixel of the image the value of the result image is increased of 20</description>
            </item>
            <item>
            <description>Saves the output image in a new file.</description>
            </item>
            </list>
            <code>
            using System;
            using BioLab.ImageProcessing;
            
            namespace Examples
            {
                class Program
                {
                    static void Main()
                    {
                        Image&lt;byte&gt; image = ImageBase.LoadFromFile(@"C:\images\original.jpg").ToByteImage();
                        Image&lt;byte&gt; result = image.Clone();
                        ImageCursor cursor = new ImageCursor(result); 
                        
                        do
                        {
                            result[cursor] += 20;
                        } while (cursor.MoveNext());
            
                        result.SaveToFile(@"C:\images\result.jpg");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.#ctor(BioLab.ImageProcessing.ImageBase)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageCursor"/> class able to iterate on
            all the pixels of a given image. The initial position of the cursor is the origin
            of the image (top-left pixel).
            </summary>
            <param name="image">The image on which the cursor will iterate.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.#ctor(BioLab.ImageProcessing.ImageBase,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageCursor"/> class able to iterate
            within a rectangular region of a given image. The initial position of 
            the cursor is the top-left pixel of the specified rectangular region. 
            </summary>
            <param name="image">The image on which the cursor will iterate.</param>
            <param name="x">The x coordinate of the top-left pixel.</param>
            <param name="y">The y coordinate of the top-left pixel.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.#ctor(BioLab.ImageProcessing.ImageBase,BioLab.Math.Geometry.IntRectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageCursor"/> class able to iterate
            within a rectangular region of a given image. The initial position of
            the cursor is the top-left pixel of the specified rectangular region.
            </summary>
            <param name="image">The image on which the cursor will iterate.</param>
            <param name="region">The rectangular region inside which the cursor will iterate.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,BioLab.ImageProcessing.ImageBase)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageCursor"/> class able to iterate
            on the pixels of a rectangular region of a given image. The initial position of 
            the cursor is the top-left pixel of the specified rectangular region.
            </summary>
            <param name="x1">The x coordinate of the top-left pixel.</param>
            <param name="y1">The y coordinate of the top-left pixel.</param>
            <param name="x2">The x coordinate of the bottom-right pixel.</param>
            <param name="y2">The y coordinate of the bottom-right pixel.</param>
            <param name="image">The image on which the cursor will iterate.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.#ctor(BioLab.ImageProcessing.ImageBase,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageCursor"/> class able to iterate on
            the pixels of a given image, excluding a specified border.
            </summary>
            <param name="image">The image on which the cursor will iterate.</param>
            <param name="border">The size of the border, in pixels, that will be excluded on all the sides of 
            the image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.#ctor(BioLab.ImageProcessing.ImageCursor)">
            <summary>
            Creates a new instance of the <see cref="T:BioLab.ImageProcessing.ImageCursor"/> class that is a copy of 
            a given <see cref="T:BioLab.ImageProcessing.ImageCursor"/>.
            </summary>
            <param name="cursor">The cursor from which the new instance will be copied.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.GetAt(BioLab.ImageProcessing.Topology.CityBlockDirection)">
            <summary>
            Gets the linear index of a pixel adjacent to the current position, 
            according to the City Block distance metric. The position of the pixel is specified 
            by the direction parameter.
            </summary>
            <param name="direction">The direction identifying the adjacent pixel.</param>
            <returns>The linear index of the desired adjacent pixel.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.GetAt(BioLab.ImageProcessing.Topology.ChessboardDirection)">
            <summary>
            Gets the linear index of a pixel adjacent to the current position, 
            according to the Chessboard distance metric. The position of the pixel is specified 
            by the direction parameter.
            </summary>
            <param name="direction">The direction identifying the adjacent pixel.</param>
            <returns>The linear index of the desired adjacent pixel.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.op_Implicit(BioLab.ImageProcessing.ImageCursor)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:BioLab.ImageProcessing.ImageCursor"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="cursor">The cursor whose current position will be converted to a linear index.</param>
            <returns>The linear index of the current position of the cursor.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.op_Explicit(BioLab.ImageProcessing.ImageCursor)~BioLab.Math.Geometry.IntPoint2D">
            <summary>
            Performs an explicit conversion from <see cref="T:BioLab.ImageProcessing.ImageCursor"/> to <see cref="T:BioLab.Math.Geometry.IntPoint2D"/>.
            </summary>
            <param name="cursor">The cursor whose current position will be converted to a <see cref="T:BioLab.Math.Geometry.IntPoint2D"/></param>
            <returns>The <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> representing the current position 
            of the cursor.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.op_Equality(BioLab.ImageProcessing.ImageCursor,BioLab.ImageProcessing.ImageCursor)">
            <summary>
            Compares two <see cref="T:BioLab.ImageProcessing.ImageCursor"/> objects.
            The result specifies whether the two <see cref="T:BioLab.ImageProcessing.ImageCursor"/> are interchangeable. 
            In particular the operator controls whether the two objects point to the same pixel and iterate on the 
            same rectangular region of images with the same width.
            </summary>
            <param name="cursor1">A <see cref="T:BioLab.ImageProcessing.ImageCursor"/> to compare.</param>
            <param name="cursor2">A <see cref="T:BioLab.ImageProcessing.ImageCursor"/> to compare.</param>
            <returns>
            <c>true</c> if the two <see cref="T:BioLab.ImageProcessing.ImageCursor"/> are interchangeable; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.op_Inequality(BioLab.ImageProcessing.ImageCursor,BioLab.ImageProcessing.ImageCursor)">
            <summary>
            Compares two <see cref="T:BioLab.ImageProcessing.ImageCursor"/> objects.
            The result specifies whether the two <see cref="T:BioLab.ImageProcessing.ImageCursor"/> are not interchangeable. 
            In particular the operator controls whether the two objects point to different pixels or iterate on different
            rectangular regions or iterate on images of different width.
            </summary>
            <param name="cursor1">A <see cref="T:BioLab.ImageProcessing.ImageCursor"/> to compare.</param>
            <param name="cursor2">A <see cref="T:BioLab.ImageProcessing.ImageCursor"/> to compare.</param>
            <returns>
            <c>true</c> if the two <see cref="T:BioLab.ImageProcessing.ImageCursor"/> are not interchangeable; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is interchangeable with the current <see cref="T:BioLab.ImageProcessing.ImageCursor"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:BioLab.ImageProcessing.ImageCursor"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is interchangeable with the current instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:BioLab.ImageProcessing.ImageCursor"/>.
            </summary>
            <returns>32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.MoveNext">
            <summary>
            Moves the current cursor position to the next pixel according to a row-wise sequential image scan.
            </summary>
            <returns>
            <c>true</c> if the cursor is not pointing to the bottom-right pixel of the region
            on which the cursor iterates; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.MovePrevious">
            <summary>
            Moves the current cursor position to the previous pixel according to a row-wise sequential image scan.
            </summary>
            <returns>
            <c>true</c> if the cursor is not pointing to the top-left pixel of the region
            on which the cursor iterates; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.Restart">
            <summary>
            Moves the current cursor position to the top-left pixel of the rectangular region on which the cursor iterates.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.MoveTo(System.Int32,System.Int32)">
            <summary>
            Moves the current cursor position to a specified pixel.
            </summary>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.MoveTo(System.Int32)">
            <summary>
            Moves the current cursor position to a specified pixel.
            </summary>
            <param name="newIndex">The linear index of the pixel.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.MoveTo(BioLab.Math.Geometry.IntPoint2D)">
            <summary>
            Moves the current cursor position to a specified pixel.
            </summary>
            <param name="location">The <see cref="T:BioLab.Math.Geometry.IntPoint2D"/> of the pixel.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.MoveTo(BioLab.ImageProcessing.Topology.CityBlockDirection)">
            <summary>
            Moves to a pixel adjacent to the current position according to the City Block distance metric.
            The position of the pixel is specified by the direction parameter.
            </summary>
            <param name="direction">The direction identifying the adjacent pixel.</param>
            <returns>
            <c>true</c> if the new position is contained within the rectangular region on which the cursor iterates; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.MoveTo(BioLab.ImageProcessing.Topology.ChessboardDirection)">
            <summary>
            Moves to a pixel adjacent to the current position according to the Chess Board distance metric. 
            The position of the pixel is specified by the direction parameter.
            </summary>
            <param name="direction">The direction identifying the adjacent pixel</param>
            <returns>
            <c>true</c> if the new position is contained within the rectangular region on which the cursor iterates; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:BioLab.ImageProcessing.ImageCursor"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:BioLab.ImageProcessing.ImageCursor"/>.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageCursor.Clone">
            <summary>
            Creates a new cursor that is a copy of the current instance.
            </summary>
            <returns>
            A new cursor that is a copy of this instance.
            </returns>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageCursor.X">
            <summary>
            Gets the x coordinate of the pixel.
            </summary>
            <value>The x coordinate.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageCursor.Y">
            <summary>
            Gets the y coordinate of the pixel.
            </summary>
            <value>The y coordinate.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageCursor.Northwest">
            <summary>
            Gets the linear index of the north-west pixel with respect to the current position.
            </summary>
            <value>The linear index of the north-west pixel.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageCursor.North">
            <summary>
            Gets the linear index of the north pixel with respect to the current position.
            </summary>
            <value>The linear index of the north pixel.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageCursor.Northeast">
            <summary>
            Gets the linear index of the north-east pixel with respect to the current position.
            </summary>
            <value>The linear index of the north-east pixel.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageCursor.East">
            <summary>
            Gets the linear index of the east pixel with respect to the current position.
            </summary>
            <value>The linear index of the east pixel.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageCursor.Southeast">
            <summary>
            Gets the linear index of the south-east pixel with respect to the current position.
            </summary>
            <value>The linear index of the south-east pixel.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageCursor.South">
            <summary>
            Gets the linear index of the south pixel with respect to the current position.
            </summary>
            <value>The linear index of the south pixel.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageCursor.Southwest">
            <summary>
            Gets the linear index of the south-west pixel with respect to the current position.
            </summary>
            <value>The linear index of the south-west pixel.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageCursor.West">
            <summary>
            Gets the linear index of the west pixel with respect to the current position.
            </summary>
            <value>The linear index of the west pixel.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.ImageBlockIteratorWithBorder">
             <summary>
             Represents a cursor able to scan an image in a block-wise fashion. A border equal to half of the block is
             used, in order to alwyas have a full block of pixels.
             </summary>
            <example>
             This code example performs the following actions:
            <list type="bullet"> 
            <item>
            <description> Reads a gray level image from file.</description>
            </item>
            <item>
            <description> Performs a smoothing by assigning to each pixel the average gray level value calculated over a window of size 3x3.</description>
            </item>
            <item>
            <description> Writes the image to a new file.</description>
            </item>
            </list>
            <code>
            
            using System;
            using BioLab.ImageProcessing;
            
            namespace Examples
            {
                class Program
                {
                    static void Main()
                    {
                        Image&lt;byte&gt; image = (Image&lt;byte&gt;)ImageBase.LoadFromFile(@"C:\images\peppers.bmp");
                        ImageBlockIteratorWithBorder blockIterator = new ImageBlockIteratorWithBorder(image, 3, 1);
                        do
                        {
                            int sum = 0;
                            // Calculates the average gray lever over the current window.
                            foreach (int index in blockIterator)
                            {
                                sum += image[index];
                            }
                            
                            // Sets the gray level value of the central pixel to the average value.
                            image[blockIterator.CurrentBlockCenterIndex] = (sum/9.0).RoundAndClipToByte();
                        } while (blockIterator.MoveNext());
                        
                        image.SaveToFile(@"C:\images\peppersSmooth.bmp");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBlockIteratorWithBorder.#ctor(BioLab.ImageProcessing.ImageBase,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageBlockIteratorWithBorder"/> class.
            </summary>
            <param name="image">The image on which the iterator will be used.</param>
            <param name="blockWidth">The width of the block.</param>
            <param name="blockHeight">The height of the block.</param>
            <param name="stepX">The horizontal step.</param>
            <param name="stepY">The vertical step.</param>
            <param name="additionalBorderX">An additional horizontal border to be excluded.</param>
            <param name="additionalBorderY">An additional vertical border to be excluded.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBlockIteratorWithBorder.#ctor(BioLab.ImageProcessing.ImageBase,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageBlockIteratorWithBorder"/> class with a square block.
            </summary>
            <param name="image">The image on which the iterator will be used.</param>
            <param name="blockSize">The size of the block.</param>
            <param name="step">The horizontal and vertical step.</param>
            <param name="additionalBorder">An additional border to be excluded.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBlockIteratorWithBorder.#ctor(BioLab.ImageProcessing.ImageBase,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageBlockIteratorWithBorder"/> class with a square block.
            </summary>
            <param name="image">The image on which the iterator will be used.</param>
            <param name="blockSize">The size of the block.</param>
            <param name="step">The horizontal and vertical step.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBlockIteratorWithBorder.#ctor(BioLab.ImageProcessing.ImageBase,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageBlockIteratorWithBorder"/> class with a square block 
            and one-pixel horizontal/vertical step.
            </summary>
            <param name="image">The image on which the iterator will be used.</param>
            <param name="blockSize">The size of the block.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBlockIteratorWithBorder.MoveNext">
            <summary>
            Moves to the next block.
            </summary>
            <returns>true if the are no other blocks to be visited, false otherwise.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBlockIteratorWithBorder.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the linear indices of the pixels in the current block.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the indices.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBlockIteratorWithBorder.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the linear indices of the pixels in the current block.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the indices.
            </returns>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageBlockIteratorWithBorder.BlockPaddingWidth">
            <summary>
            Gets the padding width, that is the offset to be added to the linear index
            of the last pixel of a row of a block to move to the first pixel of the next row in the same block.
            </summary>
            <value>The padding width.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageBlockIteratorWithBorder.BlocksPerColumn">
            <summary>
            Gets the number of blocks per column.
            </summary>
            <value>The number of blocks per column.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageBlockIteratorWithBorder.BlocksPerRow">
            <summary>
            Gets the number of blocks per row.
            </summary>
            <value>The number of blocks per row.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageBlockIteratorWithBorder.CurrentBlockCenterIndex">
            <summary>
            Gets the linear pixel index of the center of the current block.
            </summary>
            <value>The index of the center of the current block.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageBlockIteratorWithBorder.CurrentBlockTopLeftIndex">
            <summary>
            Gets the linear pixel index of the top-left pixel of the current block.
            </summary>
            <value>The linear pixel index of the top-left pixel of the current block.</value>
        </member>
        <member name="T:BioLab.ImageProcessing.ImageBlockIterator">
             <summary>
             Represents a cursor able to scan an image in a block-wise fashion. Near to the borders, the size
             of the block is reduced according to the available pixels.
             </summary>
            <example>
             This code example performs the following actions:
            <list type="bullet"> 
            <item>
            <description> Reads a gray level image from file.</description>
            </item>
            <item>
            <description> Performs a smoothing by assigning to each pixel the average gray level value calculated over a window of size 3x3.</description>
            </item>
            <item>
            <description> Writes the image to a new file.</description>
            </item>
            </list>
            <code>
            
            using System;
            using BioLab.ImageProcessing;
            
            namespace Examples
            {
                class Program
                {
                    static void Main()
                    {
                        Image&lt;byte&gt; image = (Image&lt;byte&gt;)ImageBase.LoadFromFile(@"C:\images\peppers.bmp");
                        var blockIterator = new ImageBlockIteratorWith(image, 3, 1);
                        do
                        {
                            int sum = 0;
                            int count = 0;
                            // Calculates the average gray lever over the current window.
                            foreach (int index in blockIterator)
                            {
                                sum += image[index];
                                count++;
                            }
                            
                            // Sets the gray level value of the central pixel to the average value.
                            image[blockIterator.CurrentBlockCenterIndex] = ((double)sum/count).RoundAndClipToByte();
                        } while (blockIterator.MoveNext());
                        
                        image.SaveToFile(@"C:\images\peppersSmooth.bmp");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBlockIterator.#ctor(BioLab.ImageProcessing.ImageBase,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageBlockIteratorWithBorder"/> class.
            </summary>
            <param name="image">The image on which the iterator will be used.</param>
            <param name="blockWidth">The width of the block.</param>
            <param name="blockHeight">The height of the block.</param>
            <param name="stepX">The horizontal step.</param>
            <param name="stepY">The vertical step.</param>
            <param name="borderX">A horizontal border to be excluded.</param>
            <param name="borderY">A vertical border to be excluded.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBlockIterator.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageBlockIteratorWithBorder"/> class.
            </summary>
            <param name="imageWidth">Width of the image.</param>
            <param name="imageHeight">Height of the image.</param>
            <param name="blockWidth">The width of the block.</param>
            <param name="blockHeight">The height of the block.</param>
            <param name="stepX">The horizontal step.</param>
            <param name="stepY">The vertical step.</param>
            <param name="borderX">A horizontal border to be excluded.</param>
            <param name="borderY">A vertical border to be excluded.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBlockIterator.#ctor(BioLab.ImageProcessing.ImageBase,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.ImageBlockIteratorWithBorder"/> class.
            </summary>
            <param name="image">The image on which the iterator will be used.</param>
            <param name="blockSize">Size of the block.</param>
            <param name="step">The horizontal and vertical step.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBlockIterator.MoveNext">
            <summary>
            Moves to the next block.
            </summary>
            <returns>true if the are no other blocks to be visited, false otherwise.</returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBlockIterator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the linear indices of the pixels in the current block.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the indices.
            </returns>
        </member>
        <member name="M:BioLab.ImageProcessing.ImageBlockIterator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the linear indices of the pixels in the current block.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the indices.
            </returns>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageBlockIterator.InnerBorder">
            <summary>
            Minimum distance of the block pixels from the image borders during the enumeration.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageBlockIterator.BlocksPerColumn">
            <summary>
            Gets the number of blocks per column.
            </summary>
            <value>The number of blocks per column.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageBlockIterator.BlocksPerRow">
            <summary>
            Gets the number of blocks per row.
            </summary>
            <value>The number of blocks per row.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageBlockIterator.CurrentBlockCenterX">
            <summary>
            Gets the current block center X coordinate.
            </summary>
            <value>The current block center X coordinate.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.ImageBlockIterator.CurrentBlockCenterY">
            <summary>
            Gets the current block center Y coordinate.
            </summary>
            <value>The current block center Y coordinate.</value>
        </member>
        <member name="T:BioLab.GUI.UserControls.ErrorOccurredEventArgs">
            <summary>
            Provides data for the FileListControl.ErrorOccurred event
            </summary>
        </member>
        <member name="M:BioLab.GUI.UserControls.ErrorOccurredEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.GUI.UserControls.ErrorOccurredEventArgs"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:BioLab.GUI.UserControls.ErrorOccurredEventArgs.Exception">
            <summary>
            Gets or sets the exception describing the error.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="T:BioLab.Math.LinearAlgebra.NamespaceDoc">
            <summary>
            Provides matrix and vector classes and basic linear algebra algorithms.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.Fourier.NamespaceDoc">
            <summary>
            Provides image processing techniques in the Fourier domain.
            </summary>
        </member>
        <member name="T:BioLab.ImageProcessing.CannyEdgeDetector">
             <summary>
             The Canny edge detector is designed to be an optimal edge detector. 
             It takes as input a gray scale image and produces as output a binary image showing the positions of intensity discontinuities (image edges).
             The algorithm works in a multi-stage process:
             <list type="number">
             <item>the image is smoothed by Gaussian convolution to reduce noise;</item>
             <item>a simple 2-D first derivative operator is applied to the smoothed image to highlight regions of 
             the image with high first spatial derivatives: edges give rise to ridges in the gradient magnitude image;</item>
             <item>the top of these ridges are tracked and all pixels that are not on the ridge top are set to zero, to give a thin line in the output, 
             a process known as non-maximal suppression;</item>
             <item>the tracking process adopts hysteresis controlled by two thresholds: T1 and T2, with T1 > T2. Tracking can only 
             begin at a point on a ridge higher than T1. Tracking then continues in both directions out from that point until the height of the 
             ridge falls below T2. This hysteresis step helps to ensure that noisy edges are not broken up into multiple edge fragments.</item>
             </list>
             </summary>
            <example>
            The following code example performs the following actions:
            <list type="bullet">
            <item>
            <description>This code example performs the following actions:</description>
            </item>
            <item>
            <description>Reads a gray image from file.</description>
            </item>
            <item>
            <description>Creates a new instance of the CannyEdgeDetector class settings the parameters sigma to 0.5, size of filter to 5, T1 to 0.4 and T2 to 0.1.</description>
            </item>
            <item>
            <description>Executes the canny edge detector operation.</description>
            </item>
            <item>
            <description>Saves the output image in a new file.</description>
            </item>
            </list>
            <code>
            using System;
            using BioLab.ImageProcessing;
            
            namespace Examples
            {
                class Program
                {
                    static void Main()
                    {
                        Image&lt;byte&gt; image = ImageBase.LoadFromFile(@"C:\images\original.jpg").ToByteImage();
                        CannyEdgeDetector operation = new CannyEdgeDetector(image, 0.5, 5, 0.4, 0.1);
                        Image&lt;byte&gt; result = operation.Execute();
                        result.SaveToFile(@"C:\images\result.jpg");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:BioLab.ImageProcessing.CannyEdgeDetector.#ctor(BioLab.ImageProcessing.Image{System.Byte},System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.CannyEdgeDetector"/> class and allows to specify the input image and all the parameters.
            </summary>
            <param name="inputImage">The input image.</param>
            <param name="sigma">The size of the gaussian filter mask, in pixels.</param>
            <param name="gaussianFilterSize">The sigma parameter of the Gaussian filter.</param>
            <param name="threshold1">The value of threshold T1.</param>
            <param name="threshold2">The value of threshold T2.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.CannyEdgeDetector.#ctor(BioLab.ImageProcessing.Image{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.CannyEdgeDetector"/> class and allows to specify the input image.
            </summary>
            <param name="inputImage">The input image.</param>
        </member>
        <member name="M:BioLab.ImageProcessing.CannyEdgeDetector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.ImageProcessing.CannyEdgeDetector"/> class.
            </summary>
        </member>
        <member name="M:BioLab.ImageProcessing.CannyEdgeDetector.Run">
            <summary>
            Executes the Canny edge detector.
            </summary>
        </member>
        <member name="P:BioLab.ImageProcessing.CannyEdgeDetector.GaussianFilterSize">
            <summary>
            Gets or sets the size of the convolution mask used to apply the Gaussian filter.
            </summary>
            <value>The size of the gaussian filter mask, in pixels.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.CannyEdgeDetector.Sigma">
            <summary>
            Gets or sets the value of the sigma parameter of the Gaussian filter.
            </summary>
            <value>The sigma parameter of the Gaussian filter.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.CannyEdgeDetector.T1">
            <summary>
            Gets or sets the first hysteresis threshold.
            </summary>
            <value>The value of threshold T1.</value>
        </member>
        <member name="P:BioLab.ImageProcessing.CannyEdgeDetector.T2">
            <summary>
            Gets or sets the second hysteresis threshold.
            </summary>
            <value>The value of threshold T2.</value>
        </member>
        <member name="T:BioLab.DataStructures.ArrayUtilities">
            <summary>
            Provides a set of additional static methods for managina and searching Arrays.
            </summary>
        </member>
        <member name="M:BioLab.DataStructures.ArrayUtilities.FindIndexOfMinimum(System.Double[])">
            <summary>
            Finds the index of the minimum value in an array of doubles.
            </summary>
            <param name="values">The array to be searched for the minimum value.</param>
            <returns>The index of the minimum value.</returns>
        </member>
        <member name="M:BioLab.DataStructures.ArrayUtilities.FindMinimum(System.Double[])">
            <summary>
            Finds the minimum value in an array of doubles.
            </summary>
            <param name="values">The array to be searched for the minimum value.</param>
            <returns>The minimum value.</returns>
        </member>
        <member name="M:BioLab.DataStructures.ArrayUtilities.FindMinimum(System.Double[],System.Int32@)">
            <summary>
            Finds the minimum value and its index in an array of doubles.
            </summary>
            <param name="values">The array to be searched for the minimum value.</param>
            <param name="index">The index of the minimum value.</param>
            <returns>The minimum value.</returns>
        </member>
        <member name="M:BioLab.DataStructures.ArrayUtilities.FindMinimum``1(``0[],System.Int32@)">
            <summary>
            Finds the minimum value and its index in a generic array.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="values">The array to be searched for the minimum value.</param>
            <param name="index">The index of the minimum value.</param>
            <returns>The minimum value.</returns>
        </member>
        <member name="M:BioLab.DataStructures.ArrayUtilities.FindMaximum``1(``0[],System.Int32@)">
            <summary>
            Finds the maximum value and its index in a generic array.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="values">The array to be searched for the maximum value.</param>
            <param name="index">The index of the maximum value.</param>
            <returns>The maximum value.</returns>
        </member>
        <member name="M:BioLab.DataStructures.ArrayUtilities.FindIndexOfMinimum``1(``0[])">
            <summary>
            Finds the index of the minimum value in a genric array.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="values">The array to be searched for the minimum value.</param>
            <returns>The index of the minimum value.</returns>
        </member>
        <member name="M:BioLab.DataStructures.ArrayUtilities.FindIndexOfMaximum``1(``0[])">
            <summary>
            Finds the index of the maximum value in a genric array.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="values">The array to be searched for the maximum value.</param>
            <returns>The index of the maximum value.</returns>
        </member>
        <member name="M:BioLab.DataStructures.ArrayUtilities.FindMinimum``1(``0[])">
            <summary>
            Finds the minimum value in a generic array.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="values">The array to be searched for the minimum value.</param>
            <returns>The minimum value.</returns>
        </member>
        <member name="M:BioLab.DataStructures.ArrayUtilities.FindMaximum``1(``0[])">
            <summary>
            Finds the maximum value in a generic array.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="values">The array to be searched for the maximum value.</param>
            <returns>The maximum value.</returns>
        </member>
        <member name="M:BioLab.DataStructures.ArrayUtilities.GetSortedIndexes``1(``0[],System.Boolean)">
            <summary>
            Returns an array of integers sorted according to the values in a generic array.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="values">The array of values.</param>
            <param name="ascending">if set to <c>true</c> the indeces are sorted in ascending order, otherwise they are sorted in descending order.</param>
            <returns></returns>
        </member>
        <member name="T:BioLab.DataStructures.MaxHeap`1">
            <summary>
            Represents a Max-Heap: a specialized tree-based data structure that satisfies the heap property: if B is a child node 
            of A, then A≥B. This implies that the greatest element is always in the root node.
            </summary>
            <typeparam name="T">The type of elements in the heap.</typeparam>
        </member>
        <member name="M:BioLab.DataStructures.MaxHeap`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.DataStructures.MaxHeap`1"/> class.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
            <param name="customComparer">A custom comparer to be used to compare the heap elements.</param>
        </member>
        <member name="M:BioLab.DataStructures.MaxHeap`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.DataStructures.MaxHeap`1"/> class.
            </summary>
        </member>
        <member name="M:BioLab.DataStructures.MaxHeap`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.DataStructures.MaxHeap`1"/> class.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:BioLab.DataStructures.MaxHeap`1.Add(`0)">
            <summary>
            Adds the specified element to the heap.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:BioLab.DataStructures.MaxHeap`1.RemoveMax">
            <summary>
            Removes the root of the heap.
            </summary>
            <returns>The root element.</returns>
        </member>
        <member name="P:BioLab.DataStructures.MaxHeap`1.Max">
            <summary>
            Gets the root element.
            </summary>
            <value>The root element.</value>
        </member>
        <member name="P:BioLab.DataStructures.MaxHeap`1.Count">
            <summary>
            Gets the number of elements contained in the heap.
            </summary>
            <value>The number of elements contained in the heap.</value>
        </member>
        <member name="P:BioLab.DataStructures.MaxHeap`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <value>The element at the specified index.</value>
        </member>
        <member name="T:BioLab.DataStructures.MinHeap`1">
            <summary>
            Represents a Min-Heap: a specialized tree-based data structure that satisfies the heap property: if B is a child node 
            of A, then A≤B. This implies that the lowest element is always in the root node.
            </summary>
            <typeparam name="T">The type of elements in the heap.</typeparam>
        </member>
        <member name="M:BioLab.DataStructures.MinHeap`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.DataStructures.MinHeap`1"/> class.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
            <param name="customComparer">A custom comparer to be used to compare the heap elements.</param>
        </member>
        <member name="M:BioLab.DataStructures.MinHeap`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.DataStructures.MinHeap`1"/> class.
            </summary>
        </member>
        <member name="M:BioLab.DataStructures.MinHeap`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.DataStructures.MinHeap`1"/> class.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:BioLab.DataStructures.MinHeap`1.Add(`0)">
            <summary>
            Adds the specified element to the heap.
            </summary>
            <param name="item">The item to be added.</param>
        </member>
        <member name="M:BioLab.DataStructures.MinHeap`1.RemoveMin">
            <summary>
            Removes the root of the heap.
            </summary>
            <returns>The root element.</returns>
        </member>
        <member name="P:BioLab.DataStructures.MinHeap`1.Min">
            <summary>
            Gets the root element.
            </summary>
            <value>The root element.</value>
        </member>
        <member name="P:BioLab.DataStructures.MinHeap`1.Count">
            <summary>
            Gets the number of elements contained in the heap.
            </summary>
            <value>The number of elements contained in the heap.</value>
        </member>
        <member name="P:BioLab.DataStructures.MinHeap`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <value>The element at the specified index.</value>
        </member>
        <member name="T:BioLab.DataStructures.DisjointSets">
            <summary>
            Represents a disjoint-sets data structure that maintains a collection of disjoint sets.
            The class assumes that the elements are associated to consecutive integer indices and
            that the maximum number of elements is known in advance.
            Each set is identified by a representative, which is some member of of the set. 
            </summary>
        </member>
        <member name="M:BioLab.DataStructures.DisjointSets.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.DataStructures.DisjointSets"/> class.
            </summary>
            <param name="size">The maximum number of elements in the data structure.</param>
        </member>
        <member name="M:BioLab.DataStructures.DisjointSets.MakeSet(System.Int32)">
            <summary>
            Creates a new set containing only a given element.
            </summary>
            <param name="index">The index of the element.</param>
        </member>
        <member name="M:BioLab.DataStructures.DisjointSets.FindRepresentative(System.Int32)">
            <summary>
            Finds the representative index of the set which a given element belongs to.
            </summary>
            <param name="index">The index of the element.</param>
            <returns>The index of the representative of the set which the input element belongs to.</returns>
        </member>
        <member name="M:BioLab.DataStructures.DisjointSets.MakeUnion(System.Int32,System.Int32)">
            <summary>
            Combines the two sets containing two given elements.
            </summary>
            <param name="index1">The index of the first element.</param>
            <param name="index2">The index of the second element.</param>
            <returns>The index of the representative of the new set.</returns>
        </member>
        <member name="M:BioLab.DataStructures.DisjointSets.Renumber(System.Int32,System.Int32@)">
            <summary>
            Renumbers the representative indices, starting from zero.
            </summary>
            <param name="elementCount">The element count.</param>
            <param name="numberOfSets">The number of sets whose the elements belong.</param>
            <returns>An array of integers, denoting, for each element, the index of the corresponding set.</returns>
        </member>
        <member name="T:BioLab.Common.NamespaceDoc">
            <summary>
            Provides various base functionalities.
            </summary>
        </member>
        <member name="T:BioLab.Optimization.NamespaceDoc">
            <summary>
            Provides general-purpose optimization algorithms.
            </summary>
        </member>
        <member name="T:BioLab.GUI.Common.NamespaceDoc">
            <summary>
            Provides various basic user interface functionalities.
            </summary>
        </member>
        <member name="T:BioLab.DimensionalityReduction.DimensionalityReductionTrasform">
            <summary>
            Generic class that implements a dimensionality reduction technique.
            </summary>
        </member>
        <member name="M:BioLab.DimensionalityReduction.DimensionalityReductionTrasform.Reduce(BioLab.Math.LinearAlgebra.Vector)">
            <summary>
            Reduces a vector
            </summary>
            <param name="vector">The vector to be reduced</param>
            <returns>The corresponding vector of reduced dimensionality</returns>
        </member>
        <member name="M:BioLab.DimensionalityReduction.DimensionalityReductionTrasform.Reduce(BioLab.Common.FeatureVector)">
            <summary>
            Reduces a feature vector
            </summary>
            <param name="vector">The feature vector to be reduced</param>
            <returns>The corresponding feature vector of reduced dimensionality</returns>
        </member>
        <member name="M:BioLab.DimensionalityReduction.DimensionalityReductionTrasform.Reduce(BioLab.Math.LinearAlgebra.Vector[])">
            <summary>
            Reduces the dimensionality of a set of vectors
            </summary>
            <param name="vectorSet">The set of vectors to be reduced.</param>
            <returns>A new set containing the reduced vectors.</returns>
        </member>
        <member name="M:BioLab.DimensionalityReduction.DimensionalityReductionTrasform.Reduce(BioLab.Common.FeatureVectorSet)">
            <summary>
            Reduces the dimensionality of a set of feature vectors
            </summary>
            <param name="vectorSet">The set of feature vectors to be reduced.</param>
            <returns>A new set containing the reduced feature vectors.</returns>
        </member>
        <member name="P:BioLab.DimensionalityReduction.DimensionalityReductionTrasform.OriginalDimensionality">
            <summary>
            Original dimensionality
            </summary>
        </member>
        <member name="P:BioLab.DimensionalityReduction.DimensionalityReductionTrasform.ReducedDimensionality">
            <summary>
            Reduced dimensionality
            </summary>
        </member>
        <member name="T:BioLab.DimensionalityReduction.DimensionalityReductionBuilder`1">
            <summary>
            Builder of the dimensionality reduction class
            </summary>
            <typeparam name="T">A dimensionality reduction class</typeparam>
        </member>
        <member name="M:BioLab.DimensionalityReduction.DimensionalityReductionBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.DimensionalityReduction.DimensionalityReductionBuilder`1"/> class.
            </summary>
        </member>
        <member name="M:BioLab.DimensionalityReduction.DimensionalityReductionBuilder`1.#ctor(BioLab.Common.FeatureVectorSet,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.DimensionalityReduction.DimensionalityReductionBuilder`1"/> class.
            </summary>
            <param name="trainingSet">The training set.</param>
            <param name="reducedDimensionality">The reduced dimensionality.</param>
        </member>
        <member name="M:BioLab.DimensionalityReduction.DimensionalityReductionBuilder`1.Calculate">
            <summary>
            Calculates the Dimensionality Reduction.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BioLab.DimensionalityReduction.DimensionalityReductionBuilder`1.TrainingSet">
            <summary>
            Gets or sets the training set.
            </summary>
            <value>The training set.</value>
        </member>
        <member name="P:BioLab.DimensionalityReduction.DimensionalityReductionBuilder`1.ReducedDimensionality">
            <summary>
            Gets or sets the reduced dimensionality.
            </summary>
            <value>The reduced dimensionality.</value>
        </member>
        <member name="P:BioLab.DimensionalityReduction.DimensionalityReductionBuilder`1.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:BioLab.DimensionalityReduction.SubspaceProjection">
            <summary>
            Represents a Dimensionality Reduction based on subspace projection
            </summary>
        </member>
        <member name="M:BioLab.DimensionalityReduction.SubspaceProjection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.DimensionalityReduction.SubspaceProjection"/> class.
            </summary>
        </member>
        <member name="M:BioLab.DimensionalityReduction.SubspaceProjection.#ctor(BioLab.Math.LinearAlgebra.Matrix,BioLab.Math.LinearAlgebra.Vector,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.DimensionalityReduction.SubspaceProjection"/> class.
            </summary>
            <param name="bases">Transposed of Projection Matrix with bases in rows.</param>
            <param name="origin">The origin of the subspace.</param>
            <param name="makeCopy">if set to <c>true</c> [make copy] of input data.</param>
        </member>
        <member name="M:BioLab.DimensionalityReduction.SubspaceProjection.Reduce(BioLab.Math.LinearAlgebra.Vector)">
            <summary>
            Reduces a vector by projecting it into the subspace.
            </summary>
            <param name="vector">The vector to be projected.</param>
            <returns>
            The corresponding vector of reduced dimensionality (in the subspace coordinates).
            </returns>
        </member>
        <member name="M:BioLab.DimensionalityReduction.SubspaceProjection.CalculateSquareDistanceFromSpace(BioLab.Math.LinearAlgebra.Vector)">
            <summary>
            Calculates the square distance from space. Defined as:
            sdfs(x,S) = ||x-u||^2 - ||y||^2
            </summary>
            <param name="vector">The vector in original space.</param>
            <returns></returns>
        </member>
        <member name="M:BioLab.DimensionalityReduction.SubspaceProjection.CalculateDistanceFromSpace(BioLab.Math.LinearAlgebra.Vector)">
            <summary>
            Calculates the distance from space:Defined as:
            dfs(x,S) = sqrt( ||x-u||^2 - ||y||^2 )
            </summary>
            <param name="vector">The vector in the original space.</param>
            <returns></returns>
        </member>
        <member name="M:BioLab.DimensionalityReduction.SubspaceProjection.BackProjection(BioLab.Math.LinearAlgebra.Vector)">
            <summary>
            Back-project a reduced vector in the original subspace, 
            obtaining the same point in the coordinates of the original subspace. Defined as:
            x = Phi*y + u
            </summary>
        </member>
        <member name="M:BioLab.DimensionalityReduction.SubspaceProjection.BackProjection(BioLab.Common.FeatureVector)">
            <summary>
            Back-project a reduced feature vector in the original subspace, 
            obtaining the same point in the coordinates of the original subspace. Defined as:
            x = Phi*y + u
            </summary>
        </member>
        <member name="M:BioLab.DimensionalityReduction.SubspaceProjection.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the current <see cref="T:BioLab.Common.Data"/> to a specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.Common.Data"/> will be saved.</param>
        </member>
        <member name="P:BioLab.DimensionalityReduction.SubspaceProjection.Bases">
            <summary>
            Transposed projection matrix (its ROWS are the bases of the subspace, 
            and eigenvectors of the covariance matrix).
            </summary>
        </member>
        <member name="P:BioLab.DimensionalityReduction.SubspaceProjection.Origin">
            <summary>
            Origin (mean) of the subspace
            </summary>
        </member>
        <member name="P:BioLab.DimensionalityReduction.SubspaceProjection.OriginalDimensionality">
            <summary>
            Original dimensionality
            </summary>
        </member>
        <member name="P:BioLab.DimensionalityReduction.SubspaceProjection.ReducedDimensionality">
            <summary>
            Reduced dimensionality
            </summary>
        </member>
        <member name="T:BioLab.DimensionalityReduction.KLTransform">
            <summary>
            Karhunen–Loeve transform (KLT) is mathematically defined as an orthogonal linear transformation 
            that transforms the data to a new coordinate system such that the greatest variance by any projection 
            of the data comes to lie on the first coordinate (called the first principal component), the second 
            greatest variance on the second coordinate, and so on. KLT is theoretically the optimum transform 
            for a given data in least square terms. KLT is also known as the Hotelling transform or proper orthogonal 
            decomposition (POD). The idea is of compute a projection matrix and a mean vector in order to project 
            a feature vector of dimensionality n in a subspace of reduced dimensionality m where the origin is given
            by the mean vector and n>m. The projection matrix contains in column the m eigenvectors corresponding to
            the m largest eigenvalues.
            </summary>
        </member>
        <member name="M:BioLab.DimensionalityReduction.KLTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.DimensionalityReduction.KLTransform"/> class.
            </summary>
        </member>
        <member name="M:BioLab.DimensionalityReduction.KLTransform.#ctor(BioLab.Math.LinearAlgebra.Matrix,BioLab.Math.LinearAlgebra.Vector,BioLab.Math.LinearAlgebra.Vector,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.DimensionalityReduction.KLTransform"/> class.
            </summary>
            <param name="bases">Matrix with the basis</param>
            <param name="origin">The origin of the subspace.</param>
            <param name="eigenvalues">The eigenvalues of the covariance matrix.</param>
            <param name="makeCopy">if set to <c>true</c> [make copy] of input data.</param>
        </member>
        <member name="M:BioLab.DimensionalityReduction.KLTransform.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that desrcibes the current <see cref="T:BioLab.Common.Data"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that desrcibes the current <see cref="T:BioLab.Common.Data"/>.
            </returns>
        </member>
        <member name="M:BioLab.DimensionalityReduction.KLTransform.SaveToStream(System.IO.Stream)">
            <summary>
            Saves the current <see cref="T:BioLab.Common.Data"/> to a specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> where the current <see cref="T:BioLab.Common.Data"/> will be saved.</param>
        </member>
        <member name="M:BioLab.DimensionalityReduction.KLTransform.LoadFromStream(System.IO.Stream)">
            <summary>
            Creates a <see cref="T:BioLab.DimensionalityReduction.KLTransform"/> from the specified data stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the data for this <see cref="T:BioLab.DimensionalityReduction.KLTransform"/>.
            </param>
            <returns>
            The <see cref="T:BioLab.DimensionalityReduction.KLTransform"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.DimensionalityReduction.KLTransform.LoadFromFile(System.String)">
            <summary>
            Creates a <see cref="T:BioLab.DimensionalityReduction.KLTransform"/> from the specified file.
            </summary>
            <param name="path">A string that contains the name of the file from which to create the <see cref="T:BioLab.DimensionalityReduction.KLTransform"/>.</param>
            <returns>
            The <see cref="T:BioLab.DimensionalityReduction.KLTransform"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.DimensionalityReduction.KLTransform.InternalClone">
            <summary>
            Creates an exact copy of this instance.
            </summary>
            <returns>
            The <see cref="T:BioLab.Common.Data"/> this method creates.
            </returns>
        </member>
        <member name="P:BioLab.DimensionalityReduction.KLTransform.Eigenvalues">
            <summary>
            Gets or sets the eigenvalues.
            </summary>
            <value>The eigenvalues.</value>
        </member>
        <member name="T:BioLab.DimensionalityReduction.KLTransformBuilder">
            <summary>
            Builder for the KL Transform
            </summary>
        </member>
        <member name="M:BioLab.DimensionalityReduction.KLTransformBuilder.#ctor(BioLab.Common.FeatureVectorSet,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.DimensionalityReduction.KLTransformBuilder"/> class.
            </summary>
            <param name="trainingSet">The training set.</param>
            <param name="reducedDimensionality">The reduced dimensionality.</param>
        </member>
        <member name="M:BioLab.DimensionalityReduction.KLTransformBuilder.Run">
            <summary>
            Compute the KL Transform. 
            </summary>
        </member>
        <member name="T:BioLab.DimensionalityReduction.DATransform">
            <summary>
            Linear discriminant analysis (LDA)is a method used to find the linear combination of features 
            which best separate two or more classes of objects or events. The resulting combination may be 
            used as a linear classifier, or, more commonly, for dimensionality reduction before later classification.
            LDA is also closely related to KL Transofrm in that both look for linear combinations of variables which 
            best explain the data. LDA explicitly attempts to model the difference between the classes of data. 
            PCA on the other hand does not take into account any difference 
            in class.
            </summary>
        </member>
        <member name="M:BioLab.DimensionalityReduction.DATransform.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that desrcibes the current <see cref="T:BioLab.Common.Data"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that desrcibes the current <see cref="T:BioLab.Common.Data"/>.
            </returns>
        </member>
        <member name="M:BioLab.DimensionalityReduction.DATransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.DimensionalityReduction.DATransform"/> class.
            </summary>
        </member>
        <member name="M:BioLab.DimensionalityReduction.DATransform.#ctor(BioLab.Math.LinearAlgebra.Matrix,BioLab.Math.LinearAlgebra.Vector,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.DimensionalityReduction.DATransform"/> class.
            </summary>
            <param name="bases">The bases.</param>
            <param name="origin">The origin.</param>
            <param name="makeCopy">if set to <c>true</c> [make copy].</param>
        </member>
        <member name="M:BioLab.DimensionalityReduction.DATransform.LoadFromStream(System.IO.Stream)">
            <summary>
            Creates a <see cref="T:BioLab.DimensionalityReduction.DATransform"/> from the specified data stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the data for this <see cref="T:BioLab.DimensionalityReduction.DATransform"/>.
            </param>
            <returns>
            The <see cref="T:BioLab.DimensionalityReduction.DATransform"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.DimensionalityReduction.DATransform.LoadFromFile(System.String)">
            <summary>
            Creates a <see cref="T:BioLab.DimensionalityReduction.DATransform"/> from the specified file.
            </summary>
            <param name="path">A string that contains the name of the file from which to create the <see cref="T:BioLab.DimensionalityReduction.DATransform"/>.</param>
            <returns>
            The <see cref="T:BioLab.DimensionalityReduction.DATransform"/> this method creates.
            </returns>
        </member>
        <member name="M:BioLab.DimensionalityReduction.DATransform.InternalClone">
            <summary>
            Creates an exact copy of this instance.
            </summary>
            <returns>
            The <see cref="T:BioLab.Common.Data"/> this method creates.
            </returns>
        </member>
        <member name="T:BioLab.DimensionalityReduction.DATransformBuilder">
            <summary>
            Builder of the Discriminant Analysis transform
            </summary>
        </member>
        <member name="M:BioLab.DimensionalityReduction.DATransformBuilder.#ctor(BioLab.Common.FeatureVectorSet,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BioLab.DimensionalityReduction.DATransformBuilder"/> class.
            </summary>
            <param name="trainingSet">The training set.</param>
            <param name="reducedDimensionality">The reduced dimensionality.</param>
        </member>
        <member name="M:BioLab.DimensionalityReduction.DATransformBuilder.Run">
            <summary>
            Executes the Linear Discriminant Analysis to reduce dimensionality.
            </summary>
        </member>
        <member name="M:BioLab.DimensionalityReduction.DATransformBuilder.CalculateScatteringMatrices(BioLab.Common.FeatureVectorSet,System.Int32,System.Int32,System.Int32,BioLab.Math.LinearAlgebra.Matrix@,BioLab.Math.LinearAlgebra.Matrix@,BioLab.Math.LinearAlgebra.Vector@)">
            Calculates the scattering matrices.
        </member>
    </members>
</doc>
